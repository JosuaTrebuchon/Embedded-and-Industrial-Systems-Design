
PongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800100  000009be  00000a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001f8  008001f8  00000b4a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ba8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ed2  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad1  00000000  00000000  00001b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000664  00000000  00000000  00002637  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00002c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e5  00000000  00000000  00002e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000329  00000000  00000000  00003311  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000363a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee eb       	ldi	r30, 0xBE	; 190
  84:	f9 e0       	ldi	r31, 0x09	; 9
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 3f       	cpi	r26, 0xF8	; 248
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a8 ef       	ldi	r26, 0xF8	; 248
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ae 3f       	cpi	r26, 0xFE	; 254
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 84 00 	call	0x108	; 0x108 <main>
  a6:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <uart_putchar>:

unsigned char USART_RX(){
	while ( !( UCSR0A & (1 << RXC0) ));
	
	return UDR0;	
}
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	8a 30       	cpi	r24, 0x0A	; 10
  b4:	19 f4       	brne	.+6      	; 0xbc <uart_putchar+0xe>
  b6:	8d e0       	ldi	r24, 0x0D	; 13
  b8:	0e 94 57 00 	call	0xae	; 0xae <uart_putchar>
  bc:	5d 9b       	sbis	0x0b, 5	; 11
  be:	fe cf       	rjmp	.-4      	; 0xbc <uart_putchar+0xe>
  c0:	cc b9       	out	0x0c, r28	; 12
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <USART_Init>:
  ca:	90 bd       	out	0x20, r25	; 32
  cc:	89 b9       	out	0x09, r24	; 9
  ce:	88 e1       	ldi	r24, 0x18	; 24
  d0:	8a b9       	out	0x0a, r24	; 10
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	8e e8       	ldi	r24, 0x8E	; 142
  da:	80 bd       	out	0x20, r24	; 32
  dc:	08 95       	ret

000000de <xmem_init>:
	return 0;
}

void xmem_init(void)
{
	set_bit(MCUCR, SRE);
  de:	85 b7       	in	r24, 0x35	; 53
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	85 bf       	out	0x35, r24	; 53
	
	set_bit(SFIOR, XMM2);
  e4:	80 b7       	in	r24, 0x30	; 48
  e6:	80 62       	ori	r24, 0x20	; 32
  e8:	80 bf       	out	0x30, r24	; 48
  ea:	08 95       	ret

000000ec <__vector_19>:
#include "test.h"
#include "ATmega162_driver.h"
#include <avr/interrupt.h>

ISR(USART0_RXC_vect)
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	8f 93       	push	r24
   char ReceivedByte;
   ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
  f8:	8c b1       	in	r24, 0x0c	; 12
   UDR0 = ReceivedByte; // Echo back the received byte back to the computer
  fa:	8c b9       	out	0x0c, r24	; 12
}
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <main>:


int main(void)
{
	stdout = &mystdout;
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <__data_end+0x3>
 110:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <__data_end+0x2>
	
	USART_Init(UBRR);
 114:	8f e1       	ldi	r24, 0x1F	; 31
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 65 00 	call	0xca	; 0xca <USART_Init>
	
	xmem_init();
 11c:	0e 94 6f 00 	call	0xde	; 0xde <xmem_init>
	SRAM_test();
 120:	0e 94 95 00 	call	0x12a	; 0x12a <SRAM_test>

	
	
}
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	08 95       	ret

0000012a <SRAM_test>:
		
	}
}

void SRAM_test(void)
{
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29

	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
 136:	82 e1       	ldi	r24, 0x12	; 18
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 82 01 	call	0x304	; 0x304 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
 13e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <rand>
 142:	7c 01       	movw	r14, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
 144:	0e 94 61 01 	call	0x2c2	; 0x2c2 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 148:	c0 e0       	ldi	r28, 0x00	; 0
 14a:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{

	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
 14c:	00 e0       	ldi	r16, 0x00	; 0
 14e:	10 e0       	ldi	r17, 0x00	; 0
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 150:	20 c0       	rjmp	.+64     	; 0x192 <SRAM_test+0x68>
		uint8_t some_value = rand();
 152:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <rand>
		ext_ram[i] = some_value;
 156:	fe 01       	movw	r30, r28
 158:	f8 5e       	subi	r31, 0xE8	; 232
 15a:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
 15c:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
 15e:	28 17       	cp	r18, r24
 160:	b9 f0       	breq	.+46     	; 0x190 <SRAM_test+0x66>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
 162:	99 27       	eor	r25, r25
 164:	9f 93       	push	r25
 166:	8f 93       	push	r24
 168:	1f 92       	push	r1
 16a:	2f 93       	push	r18
 16c:	df 93       	push	r29
 16e:	cf 93       	push	r28
 170:	88 e2       	ldi	r24, 0x28	; 40
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	9f 93       	push	r25
 176:	8f 93       	push	r24
 178:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <printf>
			write_errors++;
 17c:	0f 5f       	subi	r16, 0xFF	; 255
 17e:	1f 4f       	sbci	r17, 0xFF	; 255
 180:	8d b7       	in	r24, 0x3d	; 61
 182:	9e b7       	in	r25, 0x3e	; 62
 184:	08 96       	adiw	r24, 0x08	; 8
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	9e bf       	out	0x3e, r25	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 190:	21 96       	adiw	r28, 0x01	; 1
 192:	c1 15       	cp	r28, r1
 194:	98 e0       	ldi	r25, 0x08	; 8
 196:	d9 07       	cpc	r29, r25
 198:	e0 f2       	brcs	.-72     	; 0x152 <SRAM_test+0x28>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
 19a:	c7 01       	movw	r24, r14
 19c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 1a0:	c0 e0       	ldi	r28, 0x00	; 0
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
{

	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
 1a4:	e1 2c       	mov	r14, r1
 1a6:	f1 2c       	mov	r15, r1
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 1a8:	20 c0       	rjmp	.+64     	; 0x1ea <SRAM_test+0xc0>
		uint8_t some_value = rand();
 1aa:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <rand>
		uint8_t retreived_value = ext_ram[i];
 1ae:	fe 01       	movw	r30, r28
 1b0:	f8 5e       	subi	r31, 0xE8	; 232
 1b2:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
 1b4:	28 17       	cp	r18, r24
 1b6:	c1 f0       	breq	.+48     	; 0x1e8 <SRAM_test+0xbe>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
 1b8:	99 27       	eor	r25, r25
 1ba:	9f 93       	push	r25
 1bc:	8f 93       	push	r24
 1be:	1f 92       	push	r1
 1c0:	2f 93       	push	r18
 1c2:	df 93       	push	r29
 1c4:	cf 93       	push	r28
 1c6:	81 e6       	ldi	r24, 0x61	; 97
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	9f 93       	push	r25
 1cc:	8f 93       	push	r24
 1ce:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <printf>
			retrieval_errors++;
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	e8 1a       	sub	r14, r24
 1d6:	f8 0a       	sbc	r15, r24
 1d8:	8d b7       	in	r24, 0x3d	; 61
 1da:	9e b7       	in	r25, 0x3e	; 62
 1dc:	08 96       	adiw	r24, 0x08	; 8
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	9e bf       	out	0x3e, r25	; 62
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 1e8:	21 96       	adiw	r28, 0x01	; 1
 1ea:	c1 15       	cp	r28, r1
 1ec:	98 e0       	ldi	r25, 0x08	; 8
 1ee:	d9 07       	cpc	r29, r25
 1f0:	e0 f2       	brcs	.-72     	; 0x1aa <SRAM_test+0x80>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
 1f2:	ff 92       	push	r15
 1f4:	ef 92       	push	r14
 1f6:	1f 93       	push	r17
 1f8:	0f 93       	push	r16
 1fa:	8e e9       	ldi	r24, 0x9E	; 158
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	9f 93       	push	r25
 200:	8f 93       	push	r24
 202:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <printf>
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	08 95       	ret

00000220 <do_rand>:
 220:	8f 92       	push	r8
 222:	9f 92       	push	r9
 224:	af 92       	push	r10
 226:	bf 92       	push	r11
 228:	cf 92       	push	r12
 22a:	df 92       	push	r13
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	ec 01       	movw	r28, r24
 236:	68 81       	ld	r22, Y
 238:	79 81       	ldd	r23, Y+1	; 0x01
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	9b 81       	ldd	r25, Y+3	; 0x03
 23e:	61 15       	cp	r22, r1
 240:	71 05       	cpc	r23, r1
 242:	81 05       	cpc	r24, r1
 244:	91 05       	cpc	r25, r1
 246:	21 f4       	brne	.+8      	; 0x250 <do_rand+0x30>
 248:	64 e2       	ldi	r22, 0x24	; 36
 24a:	79 ed       	ldi	r23, 0xD9	; 217
 24c:	8b e5       	ldi	r24, 0x5B	; 91
 24e:	97 e0       	ldi	r25, 0x07	; 7
 250:	2d e1       	ldi	r18, 0x1D	; 29
 252:	33 ef       	ldi	r19, 0xF3	; 243
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	0e 94 43 04 	call	0x886	; 0x886 <__divmodsi4>
 25c:	49 01       	movw	r8, r18
 25e:	5a 01       	movw	r10, r20
 260:	9b 01       	movw	r18, r22
 262:	ac 01       	movw	r20, r24
 264:	a7 ea       	ldi	r26, 0xA7	; 167
 266:	b1 e4       	ldi	r27, 0x41	; 65
 268:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__muluhisi3>
 26c:	6b 01       	movw	r12, r22
 26e:	7c 01       	movw	r14, r24
 270:	ac ee       	ldi	r26, 0xEC	; 236
 272:	b4 ef       	ldi	r27, 0xF4	; 244
 274:	a5 01       	movw	r20, r10
 276:	94 01       	movw	r18, r8
 278:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__mulohisi3>
 27c:	dc 01       	movw	r26, r24
 27e:	cb 01       	movw	r24, r22
 280:	8c 0d       	add	r24, r12
 282:	9d 1d       	adc	r25, r13
 284:	ae 1d       	adc	r26, r14
 286:	bf 1d       	adc	r27, r15
 288:	b7 ff       	sbrs	r27, 7
 28a:	03 c0       	rjmp	.+6      	; 0x292 <do_rand+0x72>
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	a1 09       	sbc	r26, r1
 290:	b0 48       	sbci	r27, 0x80	; 128
 292:	88 83       	st	Y, r24
 294:	99 83       	std	Y+1, r25	; 0x01
 296:	aa 83       	std	Y+2, r26	; 0x02
 298:	bb 83       	std	Y+3, r27	; 0x03
 29a:	9f 77       	andi	r25, 0x7F	; 127
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	df 90       	pop	r13
 2a6:	cf 90       	pop	r12
 2a8:	bf 90       	pop	r11
 2aa:	af 90       	pop	r10
 2ac:	9f 90       	pop	r9
 2ae:	8f 90       	pop	r8
 2b0:	08 95       	ret

000002b2 <rand_r>:
 2b2:	0e 94 10 01 	call	0x220	; 0x220 <do_rand>
 2b6:	08 95       	ret

000002b8 <rand>:
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 10 01 	call	0x220	; 0x220 <do_rand>
 2c0:	08 95       	ret

000002c2 <srand>:
 2c2:	a0 e0       	ldi	r26, 0x00	; 0
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ce:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2d2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2d6:	08 95       	ret

000002d8 <printf>:
 2d8:	a0 e0       	ldi	r26, 0x00	; 0
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	e2 e7       	ldi	r30, 0x72	; 114
 2de:	f1 e0       	ldi	r31, 0x01	; 1
 2e0:	0c 94 85 04 	jmp	0x90a	; 0x90a <__prologue_saves__+0x20>
 2e4:	ae 01       	movw	r20, r28
 2e6:	4b 5f       	subi	r20, 0xFB	; 251
 2e8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ea:	fa 01       	movw	r30, r20
 2ec:	61 91       	ld	r22, Z+
 2ee:	71 91       	ld	r23, Z+
 2f0:	af 01       	movw	r20, r30
 2f2:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <__data_end+0x2>
 2f6:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <__data_end+0x3>
 2fa:	0e 94 b2 01 	call	0x364	; 0x364 <vfprintf>
 2fe:	e2 e0       	ldi	r30, 0x02	; 2
 300:	0c 94 a1 04 	jmp	0x942	; 0x942 <__epilogue_restores__+0x20>

00000304 <puts>:
 304:	0f 93       	push	r16
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <__data_end+0x2>
 310:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <__data_end+0x3>
 314:	23 81       	ldd	r18, Z+3	; 0x03
 316:	21 ff       	sbrs	r18, 1
 318:	1b c0       	rjmp	.+54     	; 0x350 <puts+0x4c>
 31a:	8c 01       	movw	r16, r24
 31c:	d0 e0       	ldi	r29, 0x00	; 0
 31e:	c0 e0       	ldi	r28, 0x00	; 0
 320:	f8 01       	movw	r30, r16
 322:	81 91       	ld	r24, Z+
 324:	8f 01       	movw	r16, r30
 326:	60 91 fa 01 	lds	r22, 0x01FA	; 0x8001fa <__data_end+0x2>
 32a:	70 91 fb 01 	lds	r23, 0x01FB	; 0x8001fb <__data_end+0x3>
 32e:	db 01       	movw	r26, r22
 330:	18 96       	adiw	r26, 0x08	; 8
 332:	ed 91       	ld	r30, X+
 334:	fc 91       	ld	r31, X
 336:	19 97       	sbiw	r26, 0x09	; 9
 338:	88 23       	and	r24, r24
 33a:	31 f0       	breq	.+12     	; 0x348 <puts+0x44>
 33c:	09 95       	icall
 33e:	89 2b       	or	r24, r25
 340:	79 f3       	breq	.-34     	; 0x320 <puts+0x1c>
 342:	df ef       	ldi	r29, 0xFF	; 255
 344:	cf ef       	ldi	r28, 0xFF	; 255
 346:	ec cf       	rjmp	.-40     	; 0x320 <puts+0x1c>
 348:	8a e0       	ldi	r24, 0x0A	; 10
 34a:	09 95       	icall
 34c:	89 2b       	or	r24, r25
 34e:	19 f0       	breq	.+6      	; 0x356 <puts+0x52>
 350:	8f ef       	ldi	r24, 0xFF	; 255
 352:	9f ef       	ldi	r25, 0xFF	; 255
 354:	02 c0       	rjmp	.+4      	; 0x35a <puts+0x56>
 356:	8d 2f       	mov	r24, r29
 358:	9c 2f       	mov	r25, r28
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	08 95       	ret

00000364 <vfprintf>:
 364:	ab e0       	ldi	r26, 0x0B	; 11
 366:	b0 e0       	ldi	r27, 0x00	; 0
 368:	e8 eb       	ldi	r30, 0xB8	; 184
 36a:	f1 e0       	ldi	r31, 0x01	; 1
 36c:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__prologue_saves__>
 370:	6c 01       	movw	r12, r24
 372:	7b 01       	movw	r14, r22
 374:	8a 01       	movw	r16, r20
 376:	fc 01       	movw	r30, r24
 378:	17 82       	std	Z+7, r1	; 0x07
 37a:	16 82       	std	Z+6, r1	; 0x06
 37c:	83 81       	ldd	r24, Z+3	; 0x03
 37e:	81 ff       	sbrs	r24, 1
 380:	cc c1       	rjmp	.+920    	; 0x71a <__stack+0x21b>
 382:	ce 01       	movw	r24, r28
 384:	01 96       	adiw	r24, 0x01	; 1
 386:	3c 01       	movw	r6, r24
 388:	f6 01       	movw	r30, r12
 38a:	93 81       	ldd	r25, Z+3	; 0x03
 38c:	f7 01       	movw	r30, r14
 38e:	93 fd       	sbrc	r25, 3
 390:	85 91       	lpm	r24, Z+
 392:	93 ff       	sbrs	r25, 3
 394:	81 91       	ld	r24, Z+
 396:	7f 01       	movw	r14, r30
 398:	88 23       	and	r24, r24
 39a:	09 f4       	brne	.+2      	; 0x39e <vfprintf+0x3a>
 39c:	ba c1       	rjmp	.+884    	; 0x712 <__stack+0x213>
 39e:	85 32       	cpi	r24, 0x25	; 37
 3a0:	39 f4       	brne	.+14     	; 0x3b0 <vfprintf+0x4c>
 3a2:	93 fd       	sbrc	r25, 3
 3a4:	85 91       	lpm	r24, Z+
 3a6:	93 ff       	sbrs	r25, 3
 3a8:	81 91       	ld	r24, Z+
 3aa:	7f 01       	movw	r14, r30
 3ac:	85 32       	cpi	r24, 0x25	; 37
 3ae:	29 f4       	brne	.+10     	; 0x3ba <vfprintf+0x56>
 3b0:	b6 01       	movw	r22, r12
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
 3b8:	e7 cf       	rjmp	.-50     	; 0x388 <vfprintf+0x24>
 3ba:	91 2c       	mov	r9, r1
 3bc:	21 2c       	mov	r2, r1
 3be:	31 2c       	mov	r3, r1
 3c0:	ff e1       	ldi	r31, 0x1F	; 31
 3c2:	f3 15       	cp	r31, r3
 3c4:	d8 f0       	brcs	.+54     	; 0x3fc <vfprintf+0x98>
 3c6:	8b 32       	cpi	r24, 0x2B	; 43
 3c8:	79 f0       	breq	.+30     	; 0x3e8 <vfprintf+0x84>
 3ca:	38 f4       	brcc	.+14     	; 0x3da <vfprintf+0x76>
 3cc:	80 32       	cpi	r24, 0x20	; 32
 3ce:	79 f0       	breq	.+30     	; 0x3ee <vfprintf+0x8a>
 3d0:	83 32       	cpi	r24, 0x23	; 35
 3d2:	a1 f4       	brne	.+40     	; 0x3fc <vfprintf+0x98>
 3d4:	23 2d       	mov	r18, r3
 3d6:	20 61       	ori	r18, 0x10	; 16
 3d8:	1d c0       	rjmp	.+58     	; 0x414 <__DATA_REGION_LENGTH__+0x14>
 3da:	8d 32       	cpi	r24, 0x2D	; 45
 3dc:	61 f0       	breq	.+24     	; 0x3f6 <vfprintf+0x92>
 3de:	80 33       	cpi	r24, 0x30	; 48
 3e0:	69 f4       	brne	.+26     	; 0x3fc <vfprintf+0x98>
 3e2:	23 2d       	mov	r18, r3
 3e4:	21 60       	ori	r18, 0x01	; 1
 3e6:	16 c0       	rjmp	.+44     	; 0x414 <__DATA_REGION_LENGTH__+0x14>
 3e8:	83 2d       	mov	r24, r3
 3ea:	82 60       	ori	r24, 0x02	; 2
 3ec:	38 2e       	mov	r3, r24
 3ee:	e3 2d       	mov	r30, r3
 3f0:	e4 60       	ori	r30, 0x04	; 4
 3f2:	3e 2e       	mov	r3, r30
 3f4:	2a c0       	rjmp	.+84     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
 3f6:	f3 2d       	mov	r31, r3
 3f8:	f8 60       	ori	r31, 0x08	; 8
 3fa:	1d c0       	rjmp	.+58     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
 3fc:	37 fc       	sbrc	r3, 7
 3fe:	2d c0       	rjmp	.+90     	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
 400:	20 ed       	ldi	r18, 0xD0	; 208
 402:	28 0f       	add	r18, r24
 404:	2a 30       	cpi	r18, 0x0A	; 10
 406:	40 f0       	brcs	.+16     	; 0x418 <__DATA_REGION_LENGTH__+0x18>
 408:	8e 32       	cpi	r24, 0x2E	; 46
 40a:	b9 f4       	brne	.+46     	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
 40c:	36 fc       	sbrc	r3, 6
 40e:	81 c1       	rjmp	.+770    	; 0x712 <__stack+0x213>
 410:	23 2d       	mov	r18, r3
 412:	20 64       	ori	r18, 0x40	; 64
 414:	32 2e       	mov	r3, r18
 416:	19 c0       	rjmp	.+50     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
 418:	36 fe       	sbrs	r3, 6
 41a:	06 c0       	rjmp	.+12     	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 41c:	8a e0       	ldi	r24, 0x0A	; 10
 41e:	98 9e       	mul	r9, r24
 420:	20 0d       	add	r18, r0
 422:	11 24       	eor	r1, r1
 424:	92 2e       	mov	r9, r18
 426:	11 c0       	rjmp	.+34     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
 428:	ea e0       	ldi	r30, 0x0A	; 10
 42a:	2e 9e       	mul	r2, r30
 42c:	20 0d       	add	r18, r0
 42e:	11 24       	eor	r1, r1
 430:	22 2e       	mov	r2, r18
 432:	f3 2d       	mov	r31, r3
 434:	f0 62       	ori	r31, 0x20	; 32
 436:	3f 2e       	mov	r3, r31
 438:	08 c0       	rjmp	.+16     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
 43a:	8c 36       	cpi	r24, 0x6C	; 108
 43c:	21 f4       	brne	.+8      	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 43e:	83 2d       	mov	r24, r3
 440:	80 68       	ori	r24, 0x80	; 128
 442:	38 2e       	mov	r3, r24
 444:	02 c0       	rjmp	.+4      	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
 446:	88 36       	cpi	r24, 0x68	; 104
 448:	41 f4       	brne	.+16     	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
 44a:	f7 01       	movw	r30, r14
 44c:	93 fd       	sbrc	r25, 3
 44e:	85 91       	lpm	r24, Z+
 450:	93 ff       	sbrs	r25, 3
 452:	81 91       	ld	r24, Z+
 454:	7f 01       	movw	r14, r30
 456:	81 11       	cpse	r24, r1
 458:	b3 cf       	rjmp	.-154    	; 0x3c0 <vfprintf+0x5c>
 45a:	98 2f       	mov	r25, r24
 45c:	9f 7d       	andi	r25, 0xDF	; 223
 45e:	95 54       	subi	r25, 0x45	; 69
 460:	93 30       	cpi	r25, 0x03	; 3
 462:	28 f4       	brcc	.+10     	; 0x46e <__DATA_REGION_LENGTH__+0x6e>
 464:	0c 5f       	subi	r16, 0xFC	; 252
 466:	1f 4f       	sbci	r17, 0xFF	; 255
 468:	9f e3       	ldi	r25, 0x3F	; 63
 46a:	99 83       	std	Y+1, r25	; 0x01
 46c:	0d c0       	rjmp	.+26     	; 0x488 <__DATA_REGION_LENGTH__+0x88>
 46e:	83 36       	cpi	r24, 0x63	; 99
 470:	31 f0       	breq	.+12     	; 0x47e <__DATA_REGION_LENGTH__+0x7e>
 472:	83 37       	cpi	r24, 0x73	; 115
 474:	71 f0       	breq	.+28     	; 0x492 <__DATA_REGION_LENGTH__+0x92>
 476:	83 35       	cpi	r24, 0x53	; 83
 478:	09 f0       	breq	.+2      	; 0x47c <__DATA_REGION_LENGTH__+0x7c>
 47a:	59 c0       	rjmp	.+178    	; 0x52e <__stack+0x2f>
 47c:	21 c0       	rjmp	.+66     	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
 47e:	f8 01       	movw	r30, r16
 480:	80 81       	ld	r24, Z
 482:	89 83       	std	Y+1, r24	; 0x01
 484:	0e 5f       	subi	r16, 0xFE	; 254
 486:	1f 4f       	sbci	r17, 0xFF	; 255
 488:	88 24       	eor	r8, r8
 48a:	83 94       	inc	r8
 48c:	91 2c       	mov	r9, r1
 48e:	53 01       	movw	r10, r6
 490:	13 c0       	rjmp	.+38     	; 0x4b8 <__DATA_REGION_LENGTH__+0xb8>
 492:	28 01       	movw	r4, r16
 494:	f2 e0       	ldi	r31, 0x02	; 2
 496:	4f 0e       	add	r4, r31
 498:	51 1c       	adc	r5, r1
 49a:	f8 01       	movw	r30, r16
 49c:	a0 80       	ld	r10, Z
 49e:	b1 80       	ldd	r11, Z+1	; 0x01
 4a0:	36 fe       	sbrs	r3, 6
 4a2:	03 c0       	rjmp	.+6      	; 0x4aa <__DATA_REGION_LENGTH__+0xaa>
 4a4:	69 2d       	mov	r22, r9
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__DATA_REGION_LENGTH__+0xae>
 4aa:	6f ef       	ldi	r22, 0xFF	; 255
 4ac:	7f ef       	ldi	r23, 0xFF	; 255
 4ae:	c5 01       	movw	r24, r10
 4b0:	0e 94 9e 03 	call	0x73c	; 0x73c <strnlen>
 4b4:	4c 01       	movw	r8, r24
 4b6:	82 01       	movw	r16, r4
 4b8:	f3 2d       	mov	r31, r3
 4ba:	ff 77       	andi	r31, 0x7F	; 127
 4bc:	3f 2e       	mov	r3, r31
 4be:	16 c0       	rjmp	.+44     	; 0x4ec <__DATA_REGION_LENGTH__+0xec>
 4c0:	28 01       	movw	r4, r16
 4c2:	22 e0       	ldi	r18, 0x02	; 2
 4c4:	42 0e       	add	r4, r18
 4c6:	51 1c       	adc	r5, r1
 4c8:	f8 01       	movw	r30, r16
 4ca:	a0 80       	ld	r10, Z
 4cc:	b1 80       	ldd	r11, Z+1	; 0x01
 4ce:	36 fe       	sbrs	r3, 6
 4d0:	03 c0       	rjmp	.+6      	; 0x4d8 <__DATA_REGION_LENGTH__+0xd8>
 4d2:	69 2d       	mov	r22, r9
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__DATA_REGION_LENGTH__+0xdc>
 4d8:	6f ef       	ldi	r22, 0xFF	; 255
 4da:	7f ef       	ldi	r23, 0xFF	; 255
 4dc:	c5 01       	movw	r24, r10
 4de:	0e 94 93 03 	call	0x726	; 0x726 <strnlen_P>
 4e2:	4c 01       	movw	r8, r24
 4e4:	f3 2d       	mov	r31, r3
 4e6:	f0 68       	ori	r31, 0x80	; 128
 4e8:	3f 2e       	mov	r3, r31
 4ea:	82 01       	movw	r16, r4
 4ec:	33 fc       	sbrc	r3, 3
 4ee:	1b c0       	rjmp	.+54     	; 0x526 <__stack+0x27>
 4f0:	82 2d       	mov	r24, r2
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	88 16       	cp	r8, r24
 4f6:	99 06       	cpc	r9, r25
 4f8:	b0 f4       	brcc	.+44     	; 0x526 <__stack+0x27>
 4fa:	b6 01       	movw	r22, r12
 4fc:	80 e2       	ldi	r24, 0x20	; 32
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
 504:	2a 94       	dec	r2
 506:	f4 cf       	rjmp	.-24     	; 0x4f0 <__DATA_REGION_LENGTH__+0xf0>
 508:	f5 01       	movw	r30, r10
 50a:	37 fc       	sbrc	r3, 7
 50c:	85 91       	lpm	r24, Z+
 50e:	37 fe       	sbrs	r3, 7
 510:	81 91       	ld	r24, Z+
 512:	5f 01       	movw	r10, r30
 514:	b6 01       	movw	r22, r12
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
 51c:	21 10       	cpse	r2, r1
 51e:	2a 94       	dec	r2
 520:	21 e0       	ldi	r18, 0x01	; 1
 522:	82 1a       	sub	r8, r18
 524:	91 08       	sbc	r9, r1
 526:	81 14       	cp	r8, r1
 528:	91 04       	cpc	r9, r1
 52a:	71 f7       	brne	.-36     	; 0x508 <__stack+0x9>
 52c:	e8 c0       	rjmp	.+464    	; 0x6fe <__stack+0x1ff>
 52e:	84 36       	cpi	r24, 0x64	; 100
 530:	11 f0       	breq	.+4      	; 0x536 <__stack+0x37>
 532:	89 36       	cpi	r24, 0x69	; 105
 534:	41 f5       	brne	.+80     	; 0x586 <__stack+0x87>
 536:	f8 01       	movw	r30, r16
 538:	37 fe       	sbrs	r3, 7
 53a:	07 c0       	rjmp	.+14     	; 0x54a <__stack+0x4b>
 53c:	60 81       	ld	r22, Z
 53e:	71 81       	ldd	r23, Z+1	; 0x01
 540:	82 81       	ldd	r24, Z+2	; 0x02
 542:	93 81       	ldd	r25, Z+3	; 0x03
 544:	0c 5f       	subi	r16, 0xFC	; 252
 546:	1f 4f       	sbci	r17, 0xFF	; 255
 548:	08 c0       	rjmp	.+16     	; 0x55a <__stack+0x5b>
 54a:	60 81       	ld	r22, Z
 54c:	71 81       	ldd	r23, Z+1	; 0x01
 54e:	07 2e       	mov	r0, r23
 550:	00 0c       	add	r0, r0
 552:	88 0b       	sbc	r24, r24
 554:	99 0b       	sbc	r25, r25
 556:	0e 5f       	subi	r16, 0xFE	; 254
 558:	1f 4f       	sbci	r17, 0xFF	; 255
 55a:	f3 2d       	mov	r31, r3
 55c:	ff 76       	andi	r31, 0x6F	; 111
 55e:	3f 2e       	mov	r3, r31
 560:	97 ff       	sbrs	r25, 7
 562:	09 c0       	rjmp	.+18     	; 0x576 <__stack+0x77>
 564:	90 95       	com	r25
 566:	80 95       	com	r24
 568:	70 95       	com	r23
 56a:	61 95       	neg	r22
 56c:	7f 4f       	sbci	r23, 0xFF	; 255
 56e:	8f 4f       	sbci	r24, 0xFF	; 255
 570:	9f 4f       	sbci	r25, 0xFF	; 255
 572:	f0 68       	ori	r31, 0x80	; 128
 574:	3f 2e       	mov	r3, r31
 576:	2a e0       	ldi	r18, 0x0A	; 10
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	a3 01       	movw	r20, r6
 57c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__ultoa_invert>
 580:	88 2e       	mov	r8, r24
 582:	86 18       	sub	r8, r6
 584:	45 c0       	rjmp	.+138    	; 0x610 <__stack+0x111>
 586:	85 37       	cpi	r24, 0x75	; 117
 588:	31 f4       	brne	.+12     	; 0x596 <__stack+0x97>
 58a:	23 2d       	mov	r18, r3
 58c:	2f 7e       	andi	r18, 0xEF	; 239
 58e:	b2 2e       	mov	r11, r18
 590:	2a e0       	ldi	r18, 0x0A	; 10
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	25 c0       	rjmp	.+74     	; 0x5e0 <__stack+0xe1>
 596:	93 2d       	mov	r25, r3
 598:	99 7f       	andi	r25, 0xF9	; 249
 59a:	b9 2e       	mov	r11, r25
 59c:	8f 36       	cpi	r24, 0x6F	; 111
 59e:	c1 f0       	breq	.+48     	; 0x5d0 <__stack+0xd1>
 5a0:	18 f4       	brcc	.+6      	; 0x5a8 <__stack+0xa9>
 5a2:	88 35       	cpi	r24, 0x58	; 88
 5a4:	79 f0       	breq	.+30     	; 0x5c4 <__stack+0xc5>
 5a6:	b5 c0       	rjmp	.+362    	; 0x712 <__stack+0x213>
 5a8:	80 37       	cpi	r24, 0x70	; 112
 5aa:	19 f0       	breq	.+6      	; 0x5b2 <__stack+0xb3>
 5ac:	88 37       	cpi	r24, 0x78	; 120
 5ae:	21 f0       	breq	.+8      	; 0x5b8 <__stack+0xb9>
 5b0:	b0 c0       	rjmp	.+352    	; 0x712 <__stack+0x213>
 5b2:	e9 2f       	mov	r30, r25
 5b4:	e0 61       	ori	r30, 0x10	; 16
 5b6:	be 2e       	mov	r11, r30
 5b8:	b4 fe       	sbrs	r11, 4
 5ba:	0d c0       	rjmp	.+26     	; 0x5d6 <__stack+0xd7>
 5bc:	fb 2d       	mov	r31, r11
 5be:	f4 60       	ori	r31, 0x04	; 4
 5c0:	bf 2e       	mov	r11, r31
 5c2:	09 c0       	rjmp	.+18     	; 0x5d6 <__stack+0xd7>
 5c4:	34 fe       	sbrs	r3, 4
 5c6:	0a c0       	rjmp	.+20     	; 0x5dc <__stack+0xdd>
 5c8:	29 2f       	mov	r18, r25
 5ca:	26 60       	ori	r18, 0x06	; 6
 5cc:	b2 2e       	mov	r11, r18
 5ce:	06 c0       	rjmp	.+12     	; 0x5dc <__stack+0xdd>
 5d0:	28 e0       	ldi	r18, 0x08	; 8
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	05 c0       	rjmp	.+10     	; 0x5e0 <__stack+0xe1>
 5d6:	20 e1       	ldi	r18, 0x10	; 16
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <__stack+0xe1>
 5dc:	20 e1       	ldi	r18, 0x10	; 16
 5de:	32 e0       	ldi	r19, 0x02	; 2
 5e0:	f8 01       	movw	r30, r16
 5e2:	b7 fe       	sbrs	r11, 7
 5e4:	07 c0       	rjmp	.+14     	; 0x5f4 <__stack+0xf5>
 5e6:	60 81       	ld	r22, Z
 5e8:	71 81       	ldd	r23, Z+1	; 0x01
 5ea:	82 81       	ldd	r24, Z+2	; 0x02
 5ec:	93 81       	ldd	r25, Z+3	; 0x03
 5ee:	0c 5f       	subi	r16, 0xFC	; 252
 5f0:	1f 4f       	sbci	r17, 0xFF	; 255
 5f2:	06 c0       	rjmp	.+12     	; 0x600 <__stack+0x101>
 5f4:	60 81       	ld	r22, Z
 5f6:	71 81       	ldd	r23, Z+1	; 0x01
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 5f       	subi	r16, 0xFE	; 254
 5fe:	1f 4f       	sbci	r17, 0xFF	; 255
 600:	a3 01       	movw	r20, r6
 602:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__ultoa_invert>
 606:	88 2e       	mov	r8, r24
 608:	86 18       	sub	r8, r6
 60a:	fb 2d       	mov	r31, r11
 60c:	ff 77       	andi	r31, 0x7F	; 127
 60e:	3f 2e       	mov	r3, r31
 610:	36 fe       	sbrs	r3, 6
 612:	0d c0       	rjmp	.+26     	; 0x62e <__stack+0x12f>
 614:	23 2d       	mov	r18, r3
 616:	2e 7f       	andi	r18, 0xFE	; 254
 618:	a2 2e       	mov	r10, r18
 61a:	89 14       	cp	r8, r9
 61c:	58 f4       	brcc	.+22     	; 0x634 <__stack+0x135>
 61e:	34 fe       	sbrs	r3, 4
 620:	0b c0       	rjmp	.+22     	; 0x638 <__stack+0x139>
 622:	32 fc       	sbrc	r3, 2
 624:	09 c0       	rjmp	.+18     	; 0x638 <__stack+0x139>
 626:	83 2d       	mov	r24, r3
 628:	8e 7e       	andi	r24, 0xEE	; 238
 62a:	a8 2e       	mov	r10, r24
 62c:	05 c0       	rjmp	.+10     	; 0x638 <__stack+0x139>
 62e:	b8 2c       	mov	r11, r8
 630:	a3 2c       	mov	r10, r3
 632:	03 c0       	rjmp	.+6      	; 0x63a <__stack+0x13b>
 634:	b8 2c       	mov	r11, r8
 636:	01 c0       	rjmp	.+2      	; 0x63a <__stack+0x13b>
 638:	b9 2c       	mov	r11, r9
 63a:	a4 fe       	sbrs	r10, 4
 63c:	0f c0       	rjmp	.+30     	; 0x65c <__stack+0x15d>
 63e:	fe 01       	movw	r30, r28
 640:	e8 0d       	add	r30, r8
 642:	f1 1d       	adc	r31, r1
 644:	80 81       	ld	r24, Z
 646:	80 33       	cpi	r24, 0x30	; 48
 648:	21 f4       	brne	.+8      	; 0x652 <__stack+0x153>
 64a:	9a 2d       	mov	r25, r10
 64c:	99 7e       	andi	r25, 0xE9	; 233
 64e:	a9 2e       	mov	r10, r25
 650:	09 c0       	rjmp	.+18     	; 0x664 <__stack+0x165>
 652:	a2 fe       	sbrs	r10, 2
 654:	06 c0       	rjmp	.+12     	; 0x662 <__stack+0x163>
 656:	b3 94       	inc	r11
 658:	b3 94       	inc	r11
 65a:	04 c0       	rjmp	.+8      	; 0x664 <__stack+0x165>
 65c:	8a 2d       	mov	r24, r10
 65e:	86 78       	andi	r24, 0x86	; 134
 660:	09 f0       	breq	.+2      	; 0x664 <__stack+0x165>
 662:	b3 94       	inc	r11
 664:	a3 fc       	sbrc	r10, 3
 666:	11 c0       	rjmp	.+34     	; 0x68a <__stack+0x18b>
 668:	a0 fe       	sbrs	r10, 0
 66a:	06 c0       	rjmp	.+12     	; 0x678 <__stack+0x179>
 66c:	b2 14       	cp	r11, r2
 66e:	88 f4       	brcc	.+34     	; 0x692 <__stack+0x193>
 670:	28 0c       	add	r2, r8
 672:	92 2c       	mov	r9, r2
 674:	9b 18       	sub	r9, r11
 676:	0e c0       	rjmp	.+28     	; 0x694 <__stack+0x195>
 678:	b2 14       	cp	r11, r2
 67a:	60 f4       	brcc	.+24     	; 0x694 <__stack+0x195>
 67c:	b6 01       	movw	r22, r12
 67e:	80 e2       	ldi	r24, 0x20	; 32
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
 686:	b3 94       	inc	r11
 688:	f7 cf       	rjmp	.-18     	; 0x678 <__stack+0x179>
 68a:	b2 14       	cp	r11, r2
 68c:	18 f4       	brcc	.+6      	; 0x694 <__stack+0x195>
 68e:	2b 18       	sub	r2, r11
 690:	02 c0       	rjmp	.+4      	; 0x696 <__stack+0x197>
 692:	98 2c       	mov	r9, r8
 694:	21 2c       	mov	r2, r1
 696:	a4 fe       	sbrs	r10, 4
 698:	10 c0       	rjmp	.+32     	; 0x6ba <__stack+0x1bb>
 69a:	b6 01       	movw	r22, r12
 69c:	80 e3       	ldi	r24, 0x30	; 48
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
 6a4:	a2 fe       	sbrs	r10, 2
 6a6:	17 c0       	rjmp	.+46     	; 0x6d6 <__stack+0x1d7>
 6a8:	a1 fc       	sbrc	r10, 1
 6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <__stack+0x1b3>
 6ac:	88 e7       	ldi	r24, 0x78	; 120
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <__stack+0x1b7>
 6b2:	88 e5       	ldi	r24, 0x58	; 88
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	b6 01       	movw	r22, r12
 6b8:	0c c0       	rjmp	.+24     	; 0x6d2 <__stack+0x1d3>
 6ba:	8a 2d       	mov	r24, r10
 6bc:	86 78       	andi	r24, 0x86	; 134
 6be:	59 f0       	breq	.+22     	; 0x6d6 <__stack+0x1d7>
 6c0:	a1 fe       	sbrs	r10, 1
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <__stack+0x1c9>
 6c4:	8b e2       	ldi	r24, 0x2B	; 43
 6c6:	01 c0       	rjmp	.+2      	; 0x6ca <__stack+0x1cb>
 6c8:	80 e2       	ldi	r24, 0x20	; 32
 6ca:	a7 fc       	sbrc	r10, 7
 6cc:	8d e2       	ldi	r24, 0x2D	; 45
 6ce:	b6 01       	movw	r22, r12
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
 6d6:	89 14       	cp	r8, r9
 6d8:	38 f4       	brcc	.+14     	; 0x6e8 <__stack+0x1e9>
 6da:	b6 01       	movw	r22, r12
 6dc:	80 e3       	ldi	r24, 0x30	; 48
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
 6e4:	9a 94       	dec	r9
 6e6:	f7 cf       	rjmp	.-18     	; 0x6d6 <__stack+0x1d7>
 6e8:	8a 94       	dec	r8
 6ea:	f3 01       	movw	r30, r6
 6ec:	e8 0d       	add	r30, r8
 6ee:	f1 1d       	adc	r31, r1
 6f0:	80 81       	ld	r24, Z
 6f2:	b6 01       	movw	r22, r12
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
 6fa:	81 10       	cpse	r8, r1
 6fc:	f5 cf       	rjmp	.-22     	; 0x6e8 <__stack+0x1e9>
 6fe:	22 20       	and	r2, r2
 700:	09 f4       	brne	.+2      	; 0x704 <__stack+0x205>
 702:	42 ce       	rjmp	.-892    	; 0x388 <vfprintf+0x24>
 704:	b6 01       	movw	r22, r12
 706:	80 e2       	ldi	r24, 0x20	; 32
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
 70e:	2a 94       	dec	r2
 710:	f6 cf       	rjmp	.-20     	; 0x6fe <__stack+0x1ff>
 712:	f6 01       	movw	r30, r12
 714:	86 81       	ldd	r24, Z+6	; 0x06
 716:	97 81       	ldd	r25, Z+7	; 0x07
 718:	02 c0       	rjmp	.+4      	; 0x71e <__stack+0x21f>
 71a:	8f ef       	ldi	r24, 0xFF	; 255
 71c:	9f ef       	ldi	r25, 0xFF	; 255
 71e:	2b 96       	adiw	r28, 0x0b	; 11
 720:	e2 e1       	ldi	r30, 0x12	; 18
 722:	0c 94 91 04 	jmp	0x922	; 0x922 <__epilogue_restores__>

00000726 <strnlen_P>:
 726:	fc 01       	movw	r30, r24
 728:	05 90       	lpm	r0, Z+
 72a:	61 50       	subi	r22, 0x01	; 1
 72c:	70 40       	sbci	r23, 0x00	; 0
 72e:	01 10       	cpse	r0, r1
 730:	d8 f7       	brcc	.-10     	; 0x728 <strnlen_P+0x2>
 732:	80 95       	com	r24
 734:	90 95       	com	r25
 736:	8e 0f       	add	r24, r30
 738:	9f 1f       	adc	r25, r31
 73a:	08 95       	ret

0000073c <strnlen>:
 73c:	fc 01       	movw	r30, r24
 73e:	61 50       	subi	r22, 0x01	; 1
 740:	70 40       	sbci	r23, 0x00	; 0
 742:	01 90       	ld	r0, Z+
 744:	01 10       	cpse	r0, r1
 746:	d8 f7       	brcc	.-10     	; 0x73e <strnlen+0x2>
 748:	80 95       	com	r24
 74a:	90 95       	com	r25
 74c:	8e 0f       	add	r24, r30
 74e:	9f 1f       	adc	r25, r31
 750:	08 95       	ret

00000752 <fputc>:
 752:	0f 93       	push	r16
 754:	1f 93       	push	r17
 756:	cf 93       	push	r28
 758:	df 93       	push	r29
 75a:	fb 01       	movw	r30, r22
 75c:	23 81       	ldd	r18, Z+3	; 0x03
 75e:	21 fd       	sbrc	r18, 1
 760:	03 c0       	rjmp	.+6      	; 0x768 <fputc+0x16>
 762:	8f ef       	ldi	r24, 0xFF	; 255
 764:	9f ef       	ldi	r25, 0xFF	; 255
 766:	2c c0       	rjmp	.+88     	; 0x7c0 <fputc+0x6e>
 768:	22 ff       	sbrs	r18, 2
 76a:	16 c0       	rjmp	.+44     	; 0x798 <fputc+0x46>
 76c:	46 81       	ldd	r20, Z+6	; 0x06
 76e:	57 81       	ldd	r21, Z+7	; 0x07
 770:	24 81       	ldd	r18, Z+4	; 0x04
 772:	35 81       	ldd	r19, Z+5	; 0x05
 774:	42 17       	cp	r20, r18
 776:	53 07       	cpc	r21, r19
 778:	44 f4       	brge	.+16     	; 0x78a <fputc+0x38>
 77a:	a0 81       	ld	r26, Z
 77c:	b1 81       	ldd	r27, Z+1	; 0x01
 77e:	9d 01       	movw	r18, r26
 780:	2f 5f       	subi	r18, 0xFF	; 255
 782:	3f 4f       	sbci	r19, 0xFF	; 255
 784:	31 83       	std	Z+1, r19	; 0x01
 786:	20 83       	st	Z, r18
 788:	8c 93       	st	X, r24
 78a:	26 81       	ldd	r18, Z+6	; 0x06
 78c:	37 81       	ldd	r19, Z+7	; 0x07
 78e:	2f 5f       	subi	r18, 0xFF	; 255
 790:	3f 4f       	sbci	r19, 0xFF	; 255
 792:	37 83       	std	Z+7, r19	; 0x07
 794:	26 83       	std	Z+6, r18	; 0x06
 796:	14 c0       	rjmp	.+40     	; 0x7c0 <fputc+0x6e>
 798:	8b 01       	movw	r16, r22
 79a:	ec 01       	movw	r28, r24
 79c:	fb 01       	movw	r30, r22
 79e:	00 84       	ldd	r0, Z+8	; 0x08
 7a0:	f1 85       	ldd	r31, Z+9	; 0x09
 7a2:	e0 2d       	mov	r30, r0
 7a4:	09 95       	icall
 7a6:	89 2b       	or	r24, r25
 7a8:	e1 f6       	brne	.-72     	; 0x762 <fputc+0x10>
 7aa:	d8 01       	movw	r26, r16
 7ac:	16 96       	adiw	r26, 0x06	; 6
 7ae:	8d 91       	ld	r24, X+
 7b0:	9c 91       	ld	r25, X
 7b2:	17 97       	sbiw	r26, 0x07	; 7
 7b4:	01 96       	adiw	r24, 0x01	; 1
 7b6:	17 96       	adiw	r26, 0x07	; 7
 7b8:	9c 93       	st	X, r25
 7ba:	8e 93       	st	-X, r24
 7bc:	16 97       	sbiw	r26, 0x06	; 6
 7be:	ce 01       	movw	r24, r28
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	1f 91       	pop	r17
 7c6:	0f 91       	pop	r16
 7c8:	08 95       	ret

000007ca <__ultoa_invert>:
 7ca:	fa 01       	movw	r30, r20
 7cc:	aa 27       	eor	r26, r26
 7ce:	28 30       	cpi	r18, 0x08	; 8
 7d0:	51 f1       	breq	.+84     	; 0x826 <__ultoa_invert+0x5c>
 7d2:	20 31       	cpi	r18, 0x10	; 16
 7d4:	81 f1       	breq	.+96     	; 0x836 <__ultoa_invert+0x6c>
 7d6:	e8 94       	clt
 7d8:	6f 93       	push	r22
 7da:	6e 7f       	andi	r22, 0xFE	; 254
 7dc:	6e 5f       	subi	r22, 0xFE	; 254
 7de:	7f 4f       	sbci	r23, 0xFF	; 255
 7e0:	8f 4f       	sbci	r24, 0xFF	; 255
 7e2:	9f 4f       	sbci	r25, 0xFF	; 255
 7e4:	af 4f       	sbci	r26, 0xFF	; 255
 7e6:	b1 e0       	ldi	r27, 0x01	; 1
 7e8:	3e d0       	rcall	.+124    	; 0x866 <__ultoa_invert+0x9c>
 7ea:	b4 e0       	ldi	r27, 0x04	; 4
 7ec:	3c d0       	rcall	.+120    	; 0x866 <__ultoa_invert+0x9c>
 7ee:	67 0f       	add	r22, r23
 7f0:	78 1f       	adc	r23, r24
 7f2:	89 1f       	adc	r24, r25
 7f4:	9a 1f       	adc	r25, r26
 7f6:	a1 1d       	adc	r26, r1
 7f8:	68 0f       	add	r22, r24
 7fa:	79 1f       	adc	r23, r25
 7fc:	8a 1f       	adc	r24, r26
 7fe:	91 1d       	adc	r25, r1
 800:	a1 1d       	adc	r26, r1
 802:	6a 0f       	add	r22, r26
 804:	71 1d       	adc	r23, r1
 806:	81 1d       	adc	r24, r1
 808:	91 1d       	adc	r25, r1
 80a:	a1 1d       	adc	r26, r1
 80c:	20 d0       	rcall	.+64     	; 0x84e <__ultoa_invert+0x84>
 80e:	09 f4       	brne	.+2      	; 0x812 <__ultoa_invert+0x48>
 810:	68 94       	set
 812:	3f 91       	pop	r19
 814:	2a e0       	ldi	r18, 0x0A	; 10
 816:	26 9f       	mul	r18, r22
 818:	11 24       	eor	r1, r1
 81a:	30 19       	sub	r19, r0
 81c:	30 5d       	subi	r19, 0xD0	; 208
 81e:	31 93       	st	Z+, r19
 820:	de f6       	brtc	.-74     	; 0x7d8 <__ultoa_invert+0xe>
 822:	cf 01       	movw	r24, r30
 824:	08 95       	ret
 826:	46 2f       	mov	r20, r22
 828:	47 70       	andi	r20, 0x07	; 7
 82a:	40 5d       	subi	r20, 0xD0	; 208
 82c:	41 93       	st	Z+, r20
 82e:	b3 e0       	ldi	r27, 0x03	; 3
 830:	0f d0       	rcall	.+30     	; 0x850 <__ultoa_invert+0x86>
 832:	c9 f7       	brne	.-14     	; 0x826 <__ultoa_invert+0x5c>
 834:	f6 cf       	rjmp	.-20     	; 0x822 <__ultoa_invert+0x58>
 836:	46 2f       	mov	r20, r22
 838:	4f 70       	andi	r20, 0x0F	; 15
 83a:	40 5d       	subi	r20, 0xD0	; 208
 83c:	4a 33       	cpi	r20, 0x3A	; 58
 83e:	18 f0       	brcs	.+6      	; 0x846 <__ultoa_invert+0x7c>
 840:	49 5d       	subi	r20, 0xD9	; 217
 842:	31 fd       	sbrc	r19, 1
 844:	40 52       	subi	r20, 0x20	; 32
 846:	41 93       	st	Z+, r20
 848:	02 d0       	rcall	.+4      	; 0x84e <__ultoa_invert+0x84>
 84a:	a9 f7       	brne	.-22     	; 0x836 <__ultoa_invert+0x6c>
 84c:	ea cf       	rjmp	.-44     	; 0x822 <__ultoa_invert+0x58>
 84e:	b4 e0       	ldi	r27, 0x04	; 4
 850:	a6 95       	lsr	r26
 852:	97 95       	ror	r25
 854:	87 95       	ror	r24
 856:	77 95       	ror	r23
 858:	67 95       	ror	r22
 85a:	ba 95       	dec	r27
 85c:	c9 f7       	brne	.-14     	; 0x850 <__ultoa_invert+0x86>
 85e:	00 97       	sbiw	r24, 0x00	; 0
 860:	61 05       	cpc	r22, r1
 862:	71 05       	cpc	r23, r1
 864:	08 95       	ret
 866:	9b 01       	movw	r18, r22
 868:	ac 01       	movw	r20, r24
 86a:	0a 2e       	mov	r0, r26
 86c:	06 94       	lsr	r0
 86e:	57 95       	ror	r21
 870:	47 95       	ror	r20
 872:	37 95       	ror	r19
 874:	27 95       	ror	r18
 876:	ba 95       	dec	r27
 878:	c9 f7       	brne	.-14     	; 0x86c <__ultoa_invert+0xa2>
 87a:	62 0f       	add	r22, r18
 87c:	73 1f       	adc	r23, r19
 87e:	84 1f       	adc	r24, r20
 880:	95 1f       	adc	r25, r21
 882:	a0 1d       	adc	r26, r0
 884:	08 95       	ret

00000886 <__divmodsi4>:
 886:	05 2e       	mov	r0, r21
 888:	97 fb       	bst	r25, 7
 88a:	1e f4       	brtc	.+6      	; 0x892 <__divmodsi4+0xc>
 88c:	00 94       	com	r0
 88e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__negsi2>
 892:	57 fd       	sbrc	r21, 7
 894:	07 d0       	rcall	.+14     	; 0x8a4 <__divmodsi4_neg2>
 896:	0e 94 ac 04 	call	0x958	; 0x958 <__udivmodsi4>
 89a:	07 fc       	sbrc	r0, 7
 89c:	03 d0       	rcall	.+6      	; 0x8a4 <__divmodsi4_neg2>
 89e:	4e f4       	brtc	.+18     	; 0x8b2 <__divmodsi4_exit>
 8a0:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__negsi2>

000008a4 <__divmodsi4_neg2>:
 8a4:	50 95       	com	r21
 8a6:	40 95       	com	r20
 8a8:	30 95       	com	r19
 8aa:	21 95       	neg	r18
 8ac:	3f 4f       	sbci	r19, 0xFF	; 255
 8ae:	4f 4f       	sbci	r20, 0xFF	; 255
 8b0:	5f 4f       	sbci	r21, 0xFF	; 255

000008b2 <__divmodsi4_exit>:
 8b2:	08 95       	ret

000008b4 <__negsi2>:
 8b4:	90 95       	com	r25
 8b6:	80 95       	com	r24
 8b8:	70 95       	com	r23
 8ba:	61 95       	neg	r22
 8bc:	7f 4f       	sbci	r23, 0xFF	; 255
 8be:	8f 4f       	sbci	r24, 0xFF	; 255
 8c0:	9f 4f       	sbci	r25, 0xFF	; 255
 8c2:	08 95       	ret

000008c4 <__muluhisi3>:
 8c4:	0e 94 ce 04 	call	0x99c	; 0x99c <__umulhisi3>
 8c8:	a5 9f       	mul	r26, r21
 8ca:	90 0d       	add	r25, r0
 8cc:	b4 9f       	mul	r27, r20
 8ce:	90 0d       	add	r25, r0
 8d0:	a4 9f       	mul	r26, r20
 8d2:	80 0d       	add	r24, r0
 8d4:	91 1d       	adc	r25, r1
 8d6:	11 24       	eor	r1, r1
 8d8:	08 95       	ret

000008da <__mulshisi3>:
 8da:	b7 ff       	sbrs	r27, 7
 8dc:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__muluhisi3>

000008e0 <__mulohisi3>:
 8e0:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__muluhisi3>
 8e4:	82 1b       	sub	r24, r18
 8e6:	93 0b       	sbc	r25, r19
 8e8:	08 95       	ret

000008ea <__prologue_saves__>:
 8ea:	2f 92       	push	r2
 8ec:	3f 92       	push	r3
 8ee:	4f 92       	push	r4
 8f0:	5f 92       	push	r5
 8f2:	6f 92       	push	r6
 8f4:	7f 92       	push	r7
 8f6:	8f 92       	push	r8
 8f8:	9f 92       	push	r9
 8fa:	af 92       	push	r10
 8fc:	bf 92       	push	r11
 8fe:	cf 92       	push	r12
 900:	df 92       	push	r13
 902:	ef 92       	push	r14
 904:	ff 92       	push	r15
 906:	0f 93       	push	r16
 908:	1f 93       	push	r17
 90a:	cf 93       	push	r28
 90c:	df 93       	push	r29
 90e:	cd b7       	in	r28, 0x3d	; 61
 910:	de b7       	in	r29, 0x3e	; 62
 912:	ca 1b       	sub	r28, r26
 914:	db 0b       	sbc	r29, r27
 916:	0f b6       	in	r0, 0x3f	; 63
 918:	f8 94       	cli
 91a:	de bf       	out	0x3e, r29	; 62
 91c:	0f be       	out	0x3f, r0	; 63
 91e:	cd bf       	out	0x3d, r28	; 61
 920:	09 94       	ijmp

00000922 <__epilogue_restores__>:
 922:	2a 88       	ldd	r2, Y+18	; 0x12
 924:	39 88       	ldd	r3, Y+17	; 0x11
 926:	48 88       	ldd	r4, Y+16	; 0x10
 928:	5f 84       	ldd	r5, Y+15	; 0x0f
 92a:	6e 84       	ldd	r6, Y+14	; 0x0e
 92c:	7d 84       	ldd	r7, Y+13	; 0x0d
 92e:	8c 84       	ldd	r8, Y+12	; 0x0c
 930:	9b 84       	ldd	r9, Y+11	; 0x0b
 932:	aa 84       	ldd	r10, Y+10	; 0x0a
 934:	b9 84       	ldd	r11, Y+9	; 0x09
 936:	c8 84       	ldd	r12, Y+8	; 0x08
 938:	df 80       	ldd	r13, Y+7	; 0x07
 93a:	ee 80       	ldd	r14, Y+6	; 0x06
 93c:	fd 80       	ldd	r15, Y+5	; 0x05
 93e:	0c 81       	ldd	r16, Y+4	; 0x04
 940:	1b 81       	ldd	r17, Y+3	; 0x03
 942:	aa 81       	ldd	r26, Y+2	; 0x02
 944:	b9 81       	ldd	r27, Y+1	; 0x01
 946:	ce 0f       	add	r28, r30
 948:	d1 1d       	adc	r29, r1
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	f8 94       	cli
 94e:	de bf       	out	0x3e, r29	; 62
 950:	0f be       	out	0x3f, r0	; 63
 952:	cd bf       	out	0x3d, r28	; 61
 954:	ed 01       	movw	r28, r26
 956:	08 95       	ret

00000958 <__udivmodsi4>:
 958:	a1 e2       	ldi	r26, 0x21	; 33
 95a:	1a 2e       	mov	r1, r26
 95c:	aa 1b       	sub	r26, r26
 95e:	bb 1b       	sub	r27, r27
 960:	fd 01       	movw	r30, r26
 962:	0d c0       	rjmp	.+26     	; 0x97e <__udivmodsi4_ep>

00000964 <__udivmodsi4_loop>:
 964:	aa 1f       	adc	r26, r26
 966:	bb 1f       	adc	r27, r27
 968:	ee 1f       	adc	r30, r30
 96a:	ff 1f       	adc	r31, r31
 96c:	a2 17       	cp	r26, r18
 96e:	b3 07       	cpc	r27, r19
 970:	e4 07       	cpc	r30, r20
 972:	f5 07       	cpc	r31, r21
 974:	20 f0       	brcs	.+8      	; 0x97e <__udivmodsi4_ep>
 976:	a2 1b       	sub	r26, r18
 978:	b3 0b       	sbc	r27, r19
 97a:	e4 0b       	sbc	r30, r20
 97c:	f5 0b       	sbc	r31, r21

0000097e <__udivmodsi4_ep>:
 97e:	66 1f       	adc	r22, r22
 980:	77 1f       	adc	r23, r23
 982:	88 1f       	adc	r24, r24
 984:	99 1f       	adc	r25, r25
 986:	1a 94       	dec	r1
 988:	69 f7       	brne	.-38     	; 0x964 <__udivmodsi4_loop>
 98a:	60 95       	com	r22
 98c:	70 95       	com	r23
 98e:	80 95       	com	r24
 990:	90 95       	com	r25
 992:	9b 01       	movw	r18, r22
 994:	ac 01       	movw	r20, r24
 996:	bd 01       	movw	r22, r26
 998:	cf 01       	movw	r24, r30
 99a:	08 95       	ret

0000099c <__umulhisi3>:
 99c:	a2 9f       	mul	r26, r18
 99e:	b0 01       	movw	r22, r0
 9a0:	b3 9f       	mul	r27, r19
 9a2:	c0 01       	movw	r24, r0
 9a4:	a3 9f       	mul	r26, r19
 9a6:	70 0d       	add	r23, r0
 9a8:	81 1d       	adc	r24, r1
 9aa:	11 24       	eor	r1, r1
 9ac:	91 1d       	adc	r25, r1
 9ae:	b2 9f       	mul	r27, r18
 9b0:	70 0d       	add	r23, r0
 9b2:	81 1d       	adc	r24, r1
 9b4:	11 24       	eor	r1, r1
 9b6:	91 1d       	adc	r25, r1
 9b8:	08 95       	ret

000009ba <_exit>:
 9ba:	f8 94       	cli

000009bc <__stop_program>:
 9bc:	ff cf       	rjmp	.-2      	; 0x9bc <__stop_program>
