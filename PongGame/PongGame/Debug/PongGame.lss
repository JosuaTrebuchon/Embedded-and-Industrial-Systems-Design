
PongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  000012fa  0000138e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800184  00800184  00001412  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001412  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000389d  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000161f  00000000  00000000  00004fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018d5  00000000  00000000  000065d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a0  00000000  00000000  00007eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000942  00000000  00000000  0000854c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013f5  00000000  00000000  00008e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000a283  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 1b 03 	jmp	0x636	; 0x636 <__vector_3>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_15>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__vector_19>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <oled_reset+0x40>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ea ef       	ldi	r30, 0xFA	; 250
     37c:	f2 e1       	ldi	r31, 0x12	; 18
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a4 38       	cpi	r26, 0x84	; 132
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	a4 e8       	ldi	r26, 0x84	; 132
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	aa 39       	cpi	r26, 0x9A	; 154
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 43 03 	call	0x686	; 0x686 <main>
     39e:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <PWM_Init>:
#include "ADC_driver.h"

void PWM_Init()
{
     3a6:	cf 92       	push	r12
     3a8:	df 92       	push	r13
     3aa:	ef 92       	push	r14
     3ac:	ff 92       	push	r15
	set_bit(DDRD, DDD5);
     3ae:	81 b3       	in	r24, 0x11	; 17
     3b0:	80 62       	ori	r24, 0x20	; 32
     3b2:	81 bb       	out	0x11, r24	; 17
	
	/* Fast PWM, TOP value = ICR1 */
	set_bit(TCCR1B, WGM13);
     3b4:	8e b5       	in	r24, 0x2e	; 46
     3b6:	80 61       	ori	r24, 0x10	; 16
     3b8:	8e bd       	out	0x2e, r24	; 46
	set_bit(TCCR1B, WGM12);
     3ba:	8e b5       	in	r24, 0x2e	; 46
     3bc:	88 60       	ori	r24, 0x08	; 8
     3be:	8e bd       	out	0x2e, r24	; 46
	set_bit(TCCR1A, WGM11);
     3c0:	8f b5       	in	r24, 0x2f	; 47
     3c2:	82 60       	ori	r24, 0x02	; 2
     3c4:	8f bd       	out	0x2f, r24	; 47
	clear_bit(TCCR1A, WGM10);
     3c6:	8f b5       	in	r24, 0x2f	; 47
     3c8:	8e 7f       	andi	r24, 0xFE	; 254
     3ca:	8f bd       	out	0x2f, r24	; 47
	
	set_bit(TCCR1A, COM1A1);
     3cc:	8f b5       	in	r24, 0x2f	; 47
     3ce:	80 68       	ori	r24, 0x80	; 128
     3d0:	8f bd       	out	0x2f, r24	; 47
	clear_bit(TCCR1A, COM1A0);
     3d2:	8f b5       	in	r24, 0x2f	; 47
     3d4:	8f 7b       	andi	r24, 0xBF	; 191
     3d6:	8f bd       	out	0x2f, r24	; 47
	
	set_bit(TIMSK, TOIE1);
     3d8:	89 b7       	in	r24, 0x39	; 57
     3da:	80 68       	ori	r24, 0x80	; 128
     3dc:	89 bf       	out	0x39, r24	; 57
	
	/* Configuration of the width of the PWM */
	
	ICR1 = 1;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	95 bd       	out	0x25, r25	; 37
     3e4:	84 bd       	out	0x24, r24	; 36
		
	OCR1A = (dutyCircle/100.0)*ICR1;
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	48 ec       	ldi	r20, 0xC8	; 200
     3ec:	52 e4       	ldi	r21, 0x42	; 66
     3ee:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <dutyCircle>
     3f2:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <dutyCircle+0x1>
     3f6:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <dutyCircle+0x2>
     3fa:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <dutyCircle+0x3>
     3fe:	0e 94 86 07 	call	0xf0c	; 0xf0c <__divsf3>
     402:	6b 01       	movw	r12, r22
     404:	7c 01       	movw	r14, r24
     406:	64 b5       	in	r22, 0x24	; 36
     408:	75 b5       	in	r23, 0x25	; 37
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 27 08 	call	0x104e	; 0x104e <__floatunsisf>
     412:	a7 01       	movw	r20, r14
     414:	96 01       	movw	r18, r12
     416:	0e 94 de 08 	call	0x11bc	; 0x11bc <__mulsf3>
     41a:	0e 94 f8 07 	call	0xff0	; 0xff0 <__fixunssfsi>
     41e:	7b bd       	out	0x2b, r23	; 43
     420:	6a bd       	out	0x2a, r22	; 42
	
	/*  */
	
	clear_bit(TCCR1B, CS12);
     422:	8e b5       	in	r24, 0x2e	; 46
     424:	8b 7f       	andi	r24, 0xFB	; 251
     426:	8e bd       	out	0x2e, r24	; 46
	clear_bit(TCCR1B, CS11);
     428:	8e b5       	in	r24, 0x2e	; 46
     42a:	8d 7f       	andi	r24, 0xFD	; 253
     42c:	8e bd       	out	0x2e, r24	; 46
	set_bit(TCCR1B, CS10);
     42e:	8e b5       	in	r24, 0x2e	; 46
     430:	81 60       	ori	r24, 0x01	; 1
     432:	8e bd       	out	0x2e, r24	; 46
}
     434:	ff 90       	pop	r15
     436:	ef 90       	pop	r14
     438:	df 90       	pop	r13
     43a:	cf 90       	pop	r12
     43c:	08 95       	ret

0000043e <ADC_init>:


void ADC_init(void)
{
	//set clock out on MC
	set_bit(DDRD, DDD5);
     43e:	81 b3       	in	r24, 0x11	; 17
     440:	80 62       	ori	r24, 0x20	; 32
     442:	81 bb       	out	0x11, r24	; 17
	set_bit(DDRD, DDD6); /* Enable WR output signal */
     444:	81 b3       	in	r24, 0x11	; 17
     446:	80 64       	ori	r24, 0x40	; 64
     448:	81 bb       	out	0x11, r24	; 17
	set_bit(DDRD, DDD7); /* Enable RD output signal */
     44a:	81 b3       	in	r24, 0x11	; 17
     44c:	80 68       	ori	r24, 0x80	; 128
     44e:	81 bb       	out	0x11, r24	; 17
	
	clear_bit(DDRE, DDE0); /* Set pin PE0 as INPUT to use the INT2 Interrupt for BUSY signal from ADC */
     450:	86 b1       	in	r24, 0x06	; 6
     452:	8e 7f       	andi	r24, 0xFE	; 254
     454:	86 b9       	out	0x06, r24	; 6
	
	set_bit(EMCUCR, ISC2); /* Trigger interrupt on rising edge */
     456:	86 b7       	in	r24, 0x36	; 54
     458:	81 60       	ori	r24, 0x01	; 1
     45a:	86 bf       	out	0x36, r24	; 54
	set_bit(GICR, INT2); /* Enable INT2 interrupt */ 
     45c:	8b b7       	in	r24, 0x3b	; 59
     45e:	80 62       	ori	r24, 0x20	; 32
     460:	8b bf       	out	0x3b, r24	; 59
     462:	08 95       	ret

00000464 <ADC_read>:
}

void ADC_read(uint8_t* ADC_data)
{
     464:	ef 92       	push	r14
     466:	ff 92       	push	r15
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	7c 01       	movw	r14, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     472:	00 00       	nop
	
	// uint8_t ADC_data [4]= {0,0,0,0};

	_delay_ms(t_BRD);
	
	for(int i = 0; i<channels;++i)
     474:	c0 e0       	ldi	r28, 0x00	; 0
     476:	d0 e0       	ldi	r29, 0x00	; 0
     478:	0d c0       	rjmp	.+26     	; 0x494 <ADC_read+0x30>
	{
		ADC_data[i] = xmem_read(0x1700);
     47a:	87 01       	movw	r16, r14
     47c:	0c 0f       	add	r16, r28
     47e:	1d 1f       	adc	r17, r29
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	97 e1       	ldi	r25, 0x17	; 23
     484:	0e 94 7d 02 	call	0x4fa	; 0x4fa <xmem_read>
     488:	f8 01       	movw	r30, r16
     48a:	80 83       	st	Z, r24
     48c:	f2 e0       	ldi	r31, 0x02	; 2
     48e:	fa 95       	dec	r31
     490:	f1 f7       	brne	.-4      	; 0x48e <ADC_read+0x2a>
	
	// uint8_t ADC_data [4]= {0,0,0,0};

	_delay_ms(t_BRD);
	
	for(int i = 0; i<channels;++i)
     492:	21 96       	adiw	r28, 0x01	; 1
     494:	c4 30       	cpi	r28, 0x04	; 4
     496:	d1 05       	cpc	r29, r1
     498:	84 f3       	brlt	.-32     	; 0x47a <ADC_read+0x16>
	
	}
	
	//printf( "ADC_data[%d] = %d, ADC_data[%d] = %d\n", 0, (int)ADC_data [0],3, (int)ADC_data [3]);

}
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	ff 90       	pop	r15
     4a4:	ef 90       	pop	r14
     4a6:	08 95       	ret

000004a8 <uart_putchar>:

unsigned char USART_RX(){
	while ( !( UCSR0A & (1 << RXC0) ));
	
	return UDR0;	
}
     4a8:	cf 93       	push	r28
     4aa:	c8 2f       	mov	r28, r24
     4ac:	8a 30       	cpi	r24, 0x0A	; 10
     4ae:	19 f4       	brne	.+6      	; 0x4b6 <uart_putchar+0xe>
     4b0:	8d e0       	ldi	r24, 0x0D	; 13
     4b2:	0e 94 54 02 	call	0x4a8	; 0x4a8 <uart_putchar>
     4b6:	5d 9b       	sbis	0x0b, 5	; 11
     4b8:	fe cf       	rjmp	.-4      	; 0x4b6 <uart_putchar+0xe>
     4ba:	cc b9       	out	0x0c, r28	; 12
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <USART_Init>:
     4c4:	90 bd       	out	0x20, r25	; 32
     4c6:	89 b9       	out	0x09, r24	; 9
     4c8:	88 e1       	ldi	r24, 0x18	; 24
     4ca:	8a b9       	out	0x0a, r24	; 10
     4cc:	8a b1       	in	r24, 0x0a	; 10
     4ce:	80 68       	ori	r24, 0x80	; 128
     4d0:	8a b9       	out	0x0a, r24	; 10
     4d2:	8e e8       	ldi	r24, 0x8E	; 142
     4d4:	80 bd       	out	0x20, r24	; 32
     4d6:	08 95       	ret

000004d8 <xmem_init>:
{
	//set_bit(SFIOR, XMM2);
	//clear_bit(SFIOR, XMM1);
	//clear_bit(SFIOR, XMM0);
	//set_bit(MCUCR, SRE);
	MCUCR |= (1<< SRE); //THIS MFER
     4d8:	85 b7       	in	r24, 0x35	; 53
     4da:	80 68       	ori	r24, 0x80	; 128
     4dc:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<< XMM2);
     4de:	80 b7       	in	r24, 0x30	; 48
     4e0:	80 62       	ori	r24, 0x20	; 32
     4e2:	80 bf       	out	0x30, r24	; 48
     4e4:	08 95       	ret

000004e6 <xmem_write>:
}

void xmem_write (uint8_t data , uint16_t addr)
{

	stdout = &mystdout;
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	31 e0       	ldi	r19, 0x01	; 1
     4ea:	30 93 97 01 	sts	0x0197, r19	; 0x800197 <__iob+0x3>
     4ee:	20 93 96 01 	sts	0x0196, r18	; 0x800196 <__iob+0x2>
	volatile char * ext_mem = (char *) BASE_ADDRESS;
	ext_mem [addr]= data ;
     4f2:	fb 01       	movw	r30, r22
     4f4:	80 83       	st	Z, r24
	uint8_t retreived_value = ext_mem[addr];
     4f6:	80 81       	ld	r24, Z
     4f8:	08 95       	ret

000004fa <xmem_read>:
}

uint8_t xmem_read (uint16_t addr)
{
	volatile char * ext_mem = (char *) BASE_ADDRESS;
	uint8_t ret_val = ext_mem [addr];
     4fa:	fc 01       	movw	r30, r24
     4fc:	80 81       	ld	r24, Z
	return ret_val ;
}
     4fe:	08 95       	ret

00000500 <pushButton_init>:

void pushButton_init()
{
	clear_bit(DDRD, DDD2); // set PD2 as Input to use the INT0 Interrupt for Joystick button
     500:	81 b3       	in	r24, 0x11	; 17
     502:	8b 7f       	andi	r24, 0xFB	; 251
     504:	81 bb       	out	0x11, r24	; 17
	
	set_bit(PORTD, DDD2);  // Set pull-up resistor ON -> high level on input
     506:	82 b3       	in	r24, 0x12	; 18
     508:	84 60       	ori	r24, 0x04	; 4
     50a:	82 bb       	out	0x12, r24	; 18
	
	clear_bit(MCUCR, ISC00); /* Trigger interrupt on falling edge */
     50c:	85 b7       	in	r24, 0x35	; 53
     50e:	8e 7f       	andi	r24, 0xFE	; 254
     510:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC01);
     512:	85 b7       	in	r24, 0x35	; 53
     514:	8d 7f       	andi	r24, 0xFD	; 253
     516:	85 bf       	out	0x35, r24	; 53
	
	set_bit(GICR, INT0); /* Enable INT0 interrupt */
     518:	8b b7       	in	r24, 0x3b	; 59
     51a:	80 64       	ori	r24, 0x40	; 64
     51c:	8b bf       	out	0x3b, r24	; 59
     51e:	08 95       	ret

00000520 <can_message_send>:
#include "CAN.h"

void can_message_send(can_message *message)
{
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	8c 01       	movw	r16, r24
	/*
	mcp2515_write(TXB0SIDL, (message->id<<5);
	mcp2515_write(TXB0SIDH, (message->id & 0x0F));
	*/
	mcp2515_write(TXB0DLC, message->data_length);
     528:	fc 01       	movw	r30, r24
     52a:	62 81       	ldd	r22, Z+2	; 0x02
     52c:	85 e3       	ldi	r24, 0x35	; 53
     52e:	0e 94 a2 04 	call	0x944	; 0x944 <mcp2515_write>
	
	mcp2515_bit_modify(TXB0SIDL, 0xE0, message->id<<5);
     532:	f8 01       	movw	r30, r16
     534:	40 81       	ld	r20, Z
     536:	42 95       	swap	r20
     538:	44 0f       	add	r20, r20
     53a:	40 7e       	andi	r20, 0xE0	; 224
     53c:	60 ee       	ldi	r22, 0xE0	; 224
     53e:	82 e3       	ldi	r24, 0x32	; 50
     540:	0e 94 c1 04 	call	0x982	; 0x982 <mcp2515_bit_modify>
	mcp2515_bit_modify(TXB0SIDH, 0xFF, message->id>>3);
     544:	f8 01       	movw	r30, r16
     546:	40 81       	ld	r20, Z
     548:	51 81       	ldd	r21, Z+1	; 0x01
     54a:	56 95       	lsr	r21
     54c:	47 95       	ror	r20
     54e:	56 95       	lsr	r21
     550:	47 95       	ror	r20
     552:	56 95       	lsr	r21
     554:	47 95       	ror	r20
     556:	6f ef       	ldi	r22, 0xFF	; 255
     558:	81 e3       	ldi	r24, 0x31	; 49
     55a:	0e 94 c1 04 	call	0x982	; 0x982 <mcp2515_bit_modify>
	uint8_t i;
	for (i = 0; i < message->data_length ; i ++)
     55e:	c0 e0       	ldi	r28, 0x00	; 0
     560:	09 c0       	rjmp	.+18     	; 0x574 <can_message_send+0x54>
	{
		mcp2515_write(TXB0D0+i, message->data[i]); 
     562:	f8 01       	movw	r30, r16
     564:	ec 0f       	add	r30, r28
     566:	f1 1d       	adc	r31, r1
     568:	63 81       	ldd	r22, Z+3	; 0x03
     56a:	86 e3       	ldi	r24, 0x36	; 54
     56c:	8c 0f       	add	r24, r28
     56e:	0e 94 a2 04 	call	0x944	; 0x944 <mcp2515_write>
	mcp2515_write(TXB0DLC, message->data_length);
	
	mcp2515_bit_modify(TXB0SIDL, 0xE0, message->id<<5);
	mcp2515_bit_modify(TXB0SIDH, 0xFF, message->id>>3);
	uint8_t i;
	for (i = 0; i < message->data_length ; i ++)
     572:	cf 5f       	subi	r28, 0xFF	; 255
     574:	f8 01       	movw	r30, r16
     576:	82 81       	ldd	r24, Z+2	; 0x02
     578:	c8 17       	cp	r28, r24
     57a:	98 f3       	brcs	.-26     	; 0x562 <can_message_send+0x42>
	{
		mcp2515_write(TXB0D0+i, message->data[i]); 
	}
	
	mcp2515_request_to_send(MCP_RTS_TX0);
     57c:	81 e8       	ldi	r24, 0x81	; 129
     57e:	0e 94 b8 04 	call	0x970	; 0x970 <mcp2515_request_to_send>

	//printf("end of main");
	//message transmitted when TXBnCTRL.TXREQ cleared and CANINTF.TXnIF set

}
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	08 95       	ret

0000058a <__vector_19>:

/************************************************************************/
/* Interrupt catching byte reception for UART communication             */
/************************************************************************/
ISR(USART0_RXC_vect)
{
     58a:	1f 92       	push	r1
     58c:	0f 92       	push	r0
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	0f 92       	push	r0
     592:	11 24       	eor	r1, r1
     594:	8f 93       	push	r24
	char ReceivedByte;
	ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
     596:	8c b1       	in	r24, 0x0c	; 12
	UDR0 = ReceivedByte; // Echo back the received byte back to the computer
     598:	8c b9       	out	0x0c, r24	; 12
}
     59a:	8f 91       	pop	r24
     59c:	0f 90       	pop	r0
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	0f 90       	pop	r0
     5a2:	1f 90       	pop	r1
     5a4:	18 95       	reti

000005a6 <__vector_15>:
/************************************************************************/
/* Interrupt catching the timer counter for PWM clock                   */
/************************************************************************/
ISR(TIMER1_OVF_vect)
{
     5a6:	1f 92       	push	r1
     5a8:	0f 92       	push	r0
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	0f 92       	push	r0
     5ae:	11 24       	eor	r1, r1
     5b0:	cf 92       	push	r12
     5b2:	df 92       	push	r13
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	2f 93       	push	r18
     5ba:	3f 93       	push	r19
     5bc:	4f 93       	push	r20
     5be:	5f 93       	push	r21
     5c0:	6f 93       	push	r22
     5c2:	7f 93       	push	r23
     5c4:	8f 93       	push	r24
     5c6:	9f 93       	push	r25
     5c8:	af 93       	push	r26
     5ca:	bf 93       	push	r27
     5cc:	ef 93       	push	r30
     5ce:	ff 93       	push	r31
	OCR1A = (dutyCircle/100.0)*ICR1;
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	48 ec       	ldi	r20, 0xC8	; 200
     5d6:	52 e4       	ldi	r21, 0x42	; 66
     5d8:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <dutyCircle>
     5dc:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <dutyCircle+0x1>
     5e0:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <dutyCircle+0x2>
     5e4:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <dutyCircle+0x3>
     5e8:	0e 94 86 07 	call	0xf0c	; 0xf0c <__divsf3>
     5ec:	6b 01       	movw	r12, r22
     5ee:	7c 01       	movw	r14, r24
     5f0:	64 b5       	in	r22, 0x24	; 36
     5f2:	75 b5       	in	r23, 0x25	; 37
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 27 08 	call	0x104e	; 0x104e <__floatunsisf>
     5fc:	a7 01       	movw	r20, r14
     5fe:	96 01       	movw	r18, r12
     600:	0e 94 de 08 	call	0x11bc	; 0x11bc <__mulsf3>
     604:	0e 94 f8 07 	call	0xff0	; 0xff0 <__fixunssfsi>
     608:	7b bd       	out	0x2b, r23	; 43
     60a:	6a bd       	out	0x2a, r22	; 42
}
     60c:	ff 91       	pop	r31
     60e:	ef 91       	pop	r30
     610:	bf 91       	pop	r27
     612:	af 91       	pop	r26
     614:	9f 91       	pop	r25
     616:	8f 91       	pop	r24
     618:	7f 91       	pop	r23
     61a:	6f 91       	pop	r22
     61c:	5f 91       	pop	r21
     61e:	4f 91       	pop	r20
     620:	3f 91       	pop	r19
     622:	2f 91       	pop	r18
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	df 90       	pop	r13
     62a:	cf 90       	pop	r12
     62c:	0f 90       	pop	r0
     62e:	0f be       	out	0x3f, r0	; 63
     630:	0f 90       	pop	r0
     632:	1f 90       	pop	r1
     634:	18 95       	reti

00000636 <__vector_3>:
/************************************************************************/
/* Interrupt catching BUSY signal for ADC data read                     */
/************************************************************************/
int adc_read_flag = 0;
ISR(INT2_vect)
{
     636:	1f 92       	push	r1
     638:	0f 92       	push	r0
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	0f 92       	push	r0
     63e:	11 24       	eor	r1, r1
     640:	8f 93       	push	r24
     642:	9f 93       	push	r25
	adc_read_flag = 1;
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <adc_read_flag+0x1>
     64c:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <adc_read_flag>
	// xmem_write(0x52, 0x1400);

}
     650:	9f 91       	pop	r25
     652:	8f 91       	pop	r24
     654:	0f 90       	pop	r0
     656:	0f be       	out	0x3f, r0	; 63
     658:	0f 90       	pop	r0
     65a:	1f 90       	pop	r1
     65c:	18 95       	reti

0000065e <__vector_1>:
int joystick_button_flag = 0;
/************************************************************************/
/* Interrupt catching joystick button falling edge                      */
/************************************************************************/
ISR(INT0_vect)
{
     65e:	1f 92       	push	r1
     660:	0f 92       	push	r0
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	0f 92       	push	r0
     666:	11 24       	eor	r1, r1
     668:	8f 93       	push	r24
     66a:	9f 93       	push	r25
	//printf("BUTTON pressed Column: %d, Page: %d\n", 0, 0);
	joystick_button_flag = 1;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <__data_end+0x1>
     674:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
}
     678:	9f 91       	pop	r25
     67a:	8f 91       	pop	r24
     67c:	0f 90       	pop	r0
     67e:	0f be       	out	0x3f, r0	; 63
     680:	0f 90       	pop	r0
     682:	1f 90       	pop	r1
     684:	18 95       	reti

00000686 <main>:
// {
// 	printf("CAN controller interrupt caught /!\\\n");
// }

int main(void)
{
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	69 97       	sbiw	r28, 0x19	; 25
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	de bf       	out	0x3e, r29	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	cd bf       	out	0x3d, r28	; 61

	stdout = &mystdout;
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <__iob+0x3>
     6a2:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__iob+0x2>

	USART_Init(UBRR);
     6a6:	8f e1       	ldi	r24, 0x1F	; 31
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 62 02 	call	0x4c4	; 0x4c4 <USART_Init>
	xmem_init();
     6ae:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <xmem_init>
	PWM_Init();
     6b2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <PWM_Init>
	ADC_init();
     6b6:	0e 94 1f 02 	call	0x43e	; 0x43e <ADC_init>
	mcp2515_init();
     6ba:	0e 94 e7 04 	call	0x9ce	; 0x9ce <mcp2515_init>
	pushButton_init();
     6be:	0e 94 80 02 	call	0x500	; 0x500 <pushButton_init>
	
	sei();
     6c2:	78 94       	sei
	
	float x_per;
	float y_per;
	pos_t position;
	position = 0;
	(x_per) = 0;
     6c4:	19 82       	std	Y+1, r1	; 0x01
     6c6:	1a 82       	std	Y+2, r1	; 0x02
     6c8:	1b 82       	std	Y+3, r1	; 0x03
     6ca:	1c 82       	std	Y+4, r1	; 0x04
	(y_per) = 0;
     6cc:	1d 82       	std	Y+5, r1	; 0x05
     6ce:	1e 82       	std	Y+6, r1	; 0x06
     6d0:	1f 82       	std	Y+7, r1	; 0x07
     6d2:	18 86       	std	Y+8, r1	; 0x08
	int calibrated = 0;
     6d4:	1a 86       	std	Y+10, r1	; 0x0a
     6d6:	19 86       	std	Y+9, r1	; 0x09
	can_message P1000_msg;
	
	int left_pos;
	int right_pos;
	(left_pos) = 0;
     6d8:	1f 8a       	std	Y+23, r1	; 0x17
     6da:	1e 8a       	std	Y+22, r1	; 0x16
	(right_pos) = 0;
     6dc:	19 8e       	std	Y+25, r1	; 0x19
     6de:	18 8e       	std	Y+24, r1	; 0x18
	
	uint8_t size_arrow;
	oled_init();
     6e0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <oled_init>
	oled_reset();
     6e4:	0e 94 81 05 	call	0xb02	; 0xb02 <oled_reset>
	
	oled_home();
     6e8:	0e 94 d5 05 	call	0xbaa	; 0xbaa <oled_home>
	//
	oled_reset();
     6ec:	0e 94 81 05 	call	0xb02	; 0xb02 <oled_reset>
	
	go_to_page(2);
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 e5 05 	call	0xbca	; 0xbca <go_to_page>
	go_to_col(30);
     6f8:	8e e1       	ldi	r24, 0x1E	; 30
     6fa:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <go_to_col>
	oled_print("Start");
     6fe:	8e e0       	ldi	r24, 0x0E	; 14
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <oled_print>
	go_to_page(3);
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	0e 94 e5 05 	call	0xbca	; 0xbca <go_to_page>
	go_to_col(30);
     70e:	8e e1       	ldi	r24, 0x1E	; 30
     710:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <go_to_col>
	oled_print("PingPong");
     714:	84 e1       	ldi	r24, 0x14	; 20
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <oled_print>
	go_to_page(4);
     71c:	84 e0       	ldi	r24, 0x04	; 4
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 e5 05 	call	0xbca	; 0xbca <go_to_page>
	go_to_col(30);
     724:	8e e1       	ldi	r24, 0x1E	; 30
     726:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <go_to_col>
	oled_print("End game");
     72a:	8d e1       	ldi	r24, 0x1D	; 29
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <oled_print>
	
	oled_print_arrow(page_arrow, y_arrow, 0);
     732:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <y_arrow>
     736:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <y_arrow+0x1>
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <page_arrow>
     740:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <page_arrow+0x1>
     744:	0e 94 12 06 	call	0xc24	; 0xc24 <oled_print_arrow>
	
	while (1)
	{	

		joystick_analog_position(&x_per, &y_per, ADC_data, &calibrated);
     748:	9e 01       	movw	r18, r28
     74a:	27 5f       	subi	r18, 0xF7	; 247
     74c:	3f 4f       	sbci	r19, 0xFF	; 255
     74e:	40 e9       	ldi	r20, 0x90	; 144
     750:	51 e0       	ldi	r21, 0x01	; 1
     752:	be 01       	movw	r22, r28
     754:	6b 5f       	subi	r22, 0xFB	; 251
     756:	7f 4f       	sbci	r23, 0xFF	; 255
     758:	ce 01       	movw	r24, r28
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	0e 94 56 06 	call	0xcac	; 0xcac <joystick_analog_position>
		position = pos_read(&x_per, &y_per);
     760:	be 01       	movw	r22, r28
     762:	6b 5f       	subi	r22, 0xFB	; 251
     764:	7f 4f       	sbci	r23, 0xFF	; 255
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	0e 94 be 06 	call	0xd7c	; 0xd7c <pos_read>
     76e:	18 2f       	mov	r17, r24
		
		slider_position(&left_pos, &right_pos, ADC_data);
     770:	40 e9       	ldi	r20, 0x90	; 144
     772:	51 e0       	ldi	r21, 0x01	; 1
     774:	be 01       	movw	r22, r28
     776:	68 5e       	subi	r22, 0xE8	; 232
     778:	7f 4f       	sbci	r23, 0xFF	; 255
     77a:	ce 01       	movw	r24, r28
     77c:	46 96       	adiw	r24, 0x16	; 22
     77e:	0e 94 9c 06 	call	0xd38	; 0xd38 <slider_position>

		P1000_msg.id = 1;
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	9c 87       	std	Y+12, r25	; 0x0c
     788:	8b 87       	std	Y+11, r24	; 0x0b
		P1000_msg.data_length = 4;
     78a:	84 e0       	ldi	r24, 0x04	; 4
     78c:	8d 87       	std	Y+13, r24	; 0x0d
		P1000_msg.data[0] = position;
     78e:	1e 87       	std	Y+14, r17	; 0x0e
		P1000_msg.data[1] = left_pos;
     790:	8e 89       	ldd	r24, Y+22	; 0x16
     792:	8f 87       	std	Y+15, r24	; 0x0f
		P1000_msg.data[2] = right_pos;
     794:	88 8d       	ldd	r24, Y+24	; 0x18
     796:	88 8b       	std	Y+16, r24	; 0x10
		P1000_msg.data[3] = joystick_button_flag;
     798:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     79c:	89 8b       	std	Y+17, r24	; 0x11
		joystick_button_flag = 0;
     79e:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <__data_end+0x1>
     7a2:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <__data_end>
		
		
		
		
		can_message_send(&P1000_msg);
     7a6:	ce 01       	movw	r24, r28
     7a8:	0b 96       	adiw	r24, 0x0b	; 11
     7aa:	0e 94 90 02 	call	0x520	; 0x520 <can_message_send>
		if(adc_read_flag)
     7ae:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <adc_read_flag>
     7b2:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <adc_read_flag+0x1>
     7b6:	89 2b       	or	r24, r25
     7b8:	41 f0       	breq	.+16     	; 0x7ca <main+0x144>
		{
			ADC_read(ADC_data);
     7ba:	80 e9       	ldi	r24, 0x90	; 144
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	0e 94 32 02 	call	0x464	; 0x464 <ADC_read>
			adc_read_flag = 0;
     7c2:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <adc_read_flag+0x1>
     7c6:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <adc_read_flag>
		}		
		
		switch(position)
     7ca:	12 30       	cpi	r17, 0x02	; 2
     7cc:	71 f0       	breq	.+28     	; 0x7ea <main+0x164>
     7ce:	38 f4       	brcc	.+14     	; 0x7de <main+0x158>
     7d0:	11 23       	and	r17, r17
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <main+0x150>
     7d4:	77 c0       	rjmp	.+238    	; 0x8c4 <main+0x23e>
     7d6:	11 30       	cpi	r17, 0x01	; 1
     7d8:	09 f4       	brne	.+2      	; 0x7dc <main+0x156>
     7da:	53 c0       	rjmp	.+166    	; 0x882 <main+0x1fc>
     7dc:	99 c0       	rjmp	.+306    	; 0x910 <main+0x28a>
     7de:	13 30       	cpi	r17, 0x03	; 3
     7e0:	59 f1       	breq	.+86     	; 0x838 <main+0x1b2>
     7e2:	14 30       	cpi	r17, 0x04	; 4
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <main+0x162>
     7e6:	8f c0       	rjmp	.+286    	; 0x906 <main+0x280>
     7e8:	93 c0       	rjmp	.+294    	; 0x910 <main+0x28a>
		{
			case UP:
			printf("UP\n");
     7ea:	86 e2       	ldi	r24, 0x26	; 38
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	0e 94 4b 09 	call	0x1296	; 0x1296 <puts>
			oled_print_arrow(page_arrow, y_arrow, 1);
     7f2:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <y_arrow>
     7f6:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <y_arrow+0x1>
     7fa:	41 e0       	ldi	r20, 0x01	; 1
     7fc:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <page_arrow>
     800:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <page_arrow+0x1>
     804:	0e 94 12 06 	call	0xc24	; 0xc24 <oled_print_arrow>
			page_arrow -= size_arrow;
     808:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <page_arrow>
     80c:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <page_arrow+0x1>
			if(page_arrow < 0) page_arrow = 7;
     810:	99 23       	and	r25, r25
     812:	34 f4       	brge	.+12     	; 0x820 <main+0x19a>
     814:	87 e0       	ldi	r24, 0x07	; 7
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <page_arrow+0x1>
     81c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <page_arrow>
			oled_print_arrow(page_arrow, y_arrow, 0);
     820:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <y_arrow>
     824:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <y_arrow+0x1>
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <page_arrow>
     82e:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <page_arrow+0x1>
     832:	0e 94 12 06 	call	0xc24	; 0xc24 <oled_print_arrow>
			break;
     836:	88 cf       	rjmp	.-240    	; 0x748 <main+0xc2>
			case DOWN:
			printf("DOWN\n");
     838:	89 e2       	ldi	r24, 0x29	; 41
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 4b 09 	call	0x1296	; 0x1296 <puts>
			oled_print_arrow(page_arrow, y_arrow, 1);
     840:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <y_arrow>
     844:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <y_arrow+0x1>
     848:	41 e0       	ldi	r20, 0x01	; 1
     84a:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <page_arrow>
     84e:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <page_arrow+0x1>
     852:	0e 94 12 06 	call	0xc24	; 0xc24 <oled_print_arrow>
			page_arrow += size_arrow;
     856:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <page_arrow>
     85a:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <page_arrow+0x1>
			if(page_arrow > 7) page_arrow = 0;
     85e:	08 97       	sbiw	r24, 0x08	; 8
     860:	24 f0       	brlt	.+8      	; 0x86a <main+0x1e4>
     862:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <page_arrow+0x1>
     866:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <page_arrow>
			oled_print_arrow(page_arrow, y_arrow, 0);
     86a:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <y_arrow>
     86e:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <y_arrow+0x1>
     872:	40 e0       	ldi	r20, 0x00	; 0
     874:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <page_arrow>
     878:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <page_arrow+0x1>
     87c:	0e 94 12 06 	call	0xc24	; 0xc24 <oled_print_arrow>
			break;
     880:	63 cf       	rjmp	.-314    	; 0x748 <main+0xc2>
			case RIGHT:
			printf("RIGHT\n");
     882:	8e e2       	ldi	r24, 0x2E	; 46
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	0e 94 4b 09 	call	0x1296	; 0x1296 <puts>
			
			oled_print_arrow(page_arrow, y_arrow, 1);
     88a:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <y_arrow>
     88e:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <y_arrow+0x1>
     892:	41 e0       	ldi	r20, 0x01	; 1
     894:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <page_arrow>
     898:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <page_arrow+0x1>
     89c:	0e 94 12 06 	call	0xc24	; 0xc24 <oled_print_arrow>
			y_arrow += 5;
     8a0:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <y_arrow>
     8a4:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <y_arrow+0x1>
     8a8:	6b 5f       	subi	r22, 0xFB	; 251
     8aa:	7f 4f       	sbci	r23, 0xFF	; 255
     8ac:	70 93 8d 01 	sts	0x018D, r23	; 0x80018d <y_arrow+0x1>
     8b0:	60 93 8c 01 	sts	0x018C, r22	; 0x80018c <y_arrow>
			oled_print_arrow(page_arrow, y_arrow, 0);
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <page_arrow>
     8ba:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <page_arrow+0x1>
     8be:	0e 94 12 06 	call	0xc24	; 0xc24 <oled_print_arrow>
			break;
     8c2:	42 cf       	rjmp	.-380    	; 0x748 <main+0xc2>
			
			case LEFT:
			
			printf("LEFT\n");
     8c4:	84 e3       	ldi	r24, 0x34	; 52
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	0e 94 4b 09 	call	0x1296	; 0x1296 <puts>
			oled_print_arrow(page_arrow, y_arrow, 1);
     8cc:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <y_arrow>
     8d0:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <y_arrow+0x1>
     8d4:	41 e0       	ldi	r20, 0x01	; 1
     8d6:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <page_arrow>
     8da:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <page_arrow+0x1>
     8de:	0e 94 12 06 	call	0xc24	; 0xc24 <oled_print_arrow>
			y_arrow -= 5;
     8e2:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <y_arrow>
     8e6:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <y_arrow+0x1>
     8ea:	65 50       	subi	r22, 0x05	; 5
     8ec:	71 09       	sbc	r23, r1
     8ee:	70 93 8d 01 	sts	0x018D, r23	; 0x80018d <y_arrow+0x1>
     8f2:	60 93 8c 01 	sts	0x018C, r22	; 0x80018c <y_arrow>
			oled_print_arrow(page_arrow, y_arrow, 0);
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <page_arrow>
     8fc:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <page_arrow+0x1>
     900:	0e 94 12 06 	call	0xc24	; 0xc24 <oled_print_arrow>
			break;
     904:	21 cf       	rjmp	.-446    	; 0x748 <main+0xc2>
			
			case NEUTRAL:
			printf("NEUTRAL\n");
     906:	89 e3       	ldi	r24, 0x39	; 57
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	0e 94 4b 09 	call	0x1296	; 0x1296 <puts>
			break;
     90e:	1c cf       	rjmp	.-456    	; 0x748 <main+0xc2>
			default:
			printf("Not working ?\n");
     910:	81 e4       	ldi	r24, 0x41	; 65
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	0e 94 4b 09 	call	0x1296	; 0x1296 <puts>
			break;
     918:	17 cf       	rjmp	.-466    	; 0x748 <main+0xc2>

0000091a <mcp2515_read>:
	char data;
	data = spi_slave_receive();
	
	return data;
	
}
     91a:	cf 93       	push	r28
     91c:	c8 2f       	mov	r28, r24
     91e:	88 b3       	in	r24, 0x18	; 24
     920:	8f 7e       	andi	r24, 0xEF	; 239
     922:	88 bb       	out	0x18, r24	; 24
     924:	83 e0       	ldi	r24, 0x03	; 3
     926:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_transmit>
     92a:	8c 2f       	mov	r24, r28
     92c:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_transmit>
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_transmit>
     936:	0e 94 10 07 	call	0xe20	; 0xe20 <spi_slave_receive>
     93a:	98 b3       	in	r25, 0x18	; 24
     93c:	90 61       	ori	r25, 0x10	; 16
     93e:	98 bb       	out	0x18, r25	; 24
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <mcp2515_write>:
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	d8 2f       	mov	r29, r24
     94a:	c6 2f       	mov	r28, r22
     94c:	88 b3       	in	r24, 0x18	; 24
     94e:	8f 7e       	andi	r24, 0xEF	; 239
     950:	88 bb       	out	0x18, r24	; 24
     952:	82 e0       	ldi	r24, 0x02	; 2
     954:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_transmit>
     958:	8d 2f       	mov	r24, r29
     95a:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_transmit>
     95e:	8c 2f       	mov	r24, r28
     960:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_transmit>
     964:	88 b3       	in	r24, 0x18	; 24
     966:	80 61       	ori	r24, 0x10	; 16
     968:	88 bb       	out	0x18, r24	; 24
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	08 95       	ret

00000970 <mcp2515_request_to_send>:
     970:	98 b3       	in	r25, 0x18	; 24
     972:	9f 7e       	andi	r25, 0xEF	; 239
     974:	98 bb       	out	0x18, r25	; 24
     976:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_transmit>
     97a:	88 b3       	in	r24, 0x18	; 24
     97c:	80 61       	ori	r24, 0x10	; 16
     97e:	88 bb       	out	0x18, r24	; 24
     980:	08 95       	ret

00000982 <mcp2515_bit_modify>:

void mcp2515_bit_modify(unsigned char addr, unsigned char mask, unsigned char data)
{
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	18 2f       	mov	r17, r24
     98a:	d6 2f       	mov	r29, r22
     98c:	c4 2f       	mov	r28, r20
	clear_bit(PORTB, PB4);
     98e:	88 b3       	in	r24, 0x18	; 24
     990:	8f 7e       	andi	r24, 0xEF	; 239
     992:	88 bb       	out	0x18, r24	; 24
	
	spi_transmit(MCP_BITMOD);
     994:	85 e0       	ldi	r24, 0x05	; 5
     996:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_transmit>
	spi_transmit(addr);
     99a:	81 2f       	mov	r24, r17
     99c:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_transmit>
	spi_transmit(mask);
     9a0:	8d 2f       	mov	r24, r29
     9a2:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_transmit>
	spi_transmit(data);
     9a6:	8c 2f       	mov	r24, r28
     9a8:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_transmit>
	
	set_bit(PORTB, PB4);
     9ac:	88 b3       	in	r24, 0x18	; 24
     9ae:	80 61       	ori	r24, 0x10	; 16
     9b0:	88 bb       	out	0x18, r24	; 24
}
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	08 95       	ret

000009ba <mcp2515_reset>:

void mcp2515_reset()
{
	clear_bit(PORTB, PB4);
     9ba:	88 b3       	in	r24, 0x18	; 24
     9bc:	8f 7e       	andi	r24, 0xEF	; 239
     9be:	88 bb       	out	0x18, r24	; 24
	
	spi_transmit(MCP_RESET);
     9c0:	80 ec       	ldi	r24, 0xC0	; 192
     9c2:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_transmit>
	
	set_bit(PORTB, PB4);
     9c6:	88 b3       	in	r24, 0x18	; 24
     9c8:	80 61       	ori	r24, 0x10	; 16
     9ca:	88 bb       	out	0x18, r24	; 24
     9cc:	08 95       	ret

000009ce <mcp2515_init>:

uint8_t mcp2515_init ()
{
	//stdout = &mystdout;
	char value;
	spi_init () ; // Initialize SPI
     9ce:	0e 94 06 07 	call	0xe0c	; 0xe0c <spi_init>
	mcp2515_reset () ; // Send reset - command
     9d2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <mcp2515_reset>
	
	// Self - test for Config mode (set during reset)
	value = mcp2515_read ( MCP_CANSTAT);
     9d6:	8e e0       	ldi	r24, 0x0E	; 14
     9d8:	0e 94 8d 04 	call	0x91a	; 0x91a <mcp2515_read>
	if (( value & MODE_MASK ) != MODE_CONFIG ) {
     9dc:	80 7e       	andi	r24, 0xE0	; 224
     9de:	80 38       	cpi	r24, 0x80	; 128
     9e0:	31 f0       	breq	.+12     	; 0x9ee <mcp2515_init+0x20>
		printf (" MCP2515 is NOT in configuration mode after reset !\n");
     9e2:	8f e4       	ldi	r24, 0x4F	; 79
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	0e 94 4b 09 	call	0x1296	; 0x1296 <puts>
		return 1;
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	08 95       	ret
	
	//Set baudrate, PropSeg, PS1, PS2, SJW, 
	//F_osc= 16MHz
	//Use set in register CNF1, CNF2, CNF3 From page 43 in MCP2515

	mcp2515_bit_modify(MCP_CNF1,0xFF, 0x03);
     9ee:	43 e0       	ldi	r20, 0x03	; 3
     9f0:	6f ef       	ldi	r22, 0xFF	; 255
     9f2:	8a e2       	ldi	r24, 0x2A	; 42
     9f4:	0e 94 c1 04 	call	0x982	; 0x982 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CNF2,0xFF, 0xB1);
     9f8:	41 eb       	ldi	r20, 0xB1	; 177
     9fa:	6f ef       	ldi	r22, 0xFF	; 255
     9fc:	89 e2       	ldi	r24, 0x29	; 41
     9fe:	0e 94 c1 04 	call	0x982	; 0x982 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CNF3,0xC7, 0x05);
     a02:	45 e0       	ldi	r20, 0x05	; 5
     a04:	67 ec       	ldi	r22, 0xC7	; 199
     a06:	88 e2       	ldi	r24, 0x28	; 40
     a08:	0e 94 c1 04 	call	0x982	; 0x982 <mcp2515_bit_modify>
	//
	//set to Loopback mode
	//mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
	
	//set to Normal mode
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     a0c:	40 e0       	ldi	r20, 0x00	; 0
     a0e:	60 ee       	ldi	r22, 0xE0	; 224
     a10:	8f e0       	ldi	r24, 0x0F	; 15
     a12:	0e 94 c1 04 	call	0x982	; 0x982 <mcp2515_bit_modify>
	
	return 0;
     a16:	80 e0       	ldi	r24, 0x00	; 0
}
     a18:	08 95       	ret

00000a1a <oled_init>:
		go_to_page(i);
		go_to_col(col);	
		xmem_write(0x00, 0x1200);
	}
	
}
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	70 e1       	ldi	r23, 0x10	; 16
     a1e:	8e ea       	ldi	r24, 0xAE	; 174
     a20:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e1       	ldi	r23, 0x10	; 16
     a28:	81 ea       	ldi	r24, 0xA1	; 161
     a2a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e1       	ldi	r23, 0x10	; 16
     a32:	8a ed       	ldi	r24, 0xDA	; 218
     a34:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	70 e1       	ldi	r23, 0x10	; 16
     a3c:	82 e1       	ldi	r24, 0x12	; 18
     a3e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	70 e1       	ldi	r23, 0x10	; 16
     a46:	88 ec       	ldi	r24, 0xC8	; 200
     a48:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e1       	ldi	r23, 0x10	; 16
     a50:	88 ea       	ldi	r24, 0xA8	; 168
     a52:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	70 e1       	ldi	r23, 0x10	; 16
     a5a:	8f e3       	ldi	r24, 0x3F	; 63
     a5c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	70 e1       	ldi	r23, 0x10	; 16
     a64:	85 ed       	ldi	r24, 0xD5	; 213
     a66:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	70 e1       	ldi	r23, 0x10	; 16
     a6e:	80 e8       	ldi	r24, 0x80	; 128
     a70:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e1       	ldi	r23, 0x10	; 16
     a78:	81 e8       	ldi	r24, 0x81	; 129
     a7a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	70 e1       	ldi	r23, 0x10	; 16
     a82:	80 e5       	ldi	r24, 0x50	; 80
     a84:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	70 e1       	ldi	r23, 0x10	; 16
     a8c:	89 ed       	ldi	r24, 0xD9	; 217
     a8e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	70 e1       	ldi	r23, 0x10	; 16
     a96:	81 e2       	ldi	r24, 0x21	; 33
     a98:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	70 e1       	ldi	r23, 0x10	; 16
     aa0:	80 e2       	ldi	r24, 0x20	; 32
     aa2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	70 e1       	ldi	r23, 0x10	; 16
     aaa:	82 e0       	ldi	r24, 0x02	; 2
     aac:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	70 e1       	ldi	r23, 0x10	; 16
     ab4:	8b ed       	ldi	r24, 0xDB	; 219
     ab6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	70 e1       	ldi	r23, 0x10	; 16
     abe:	80 e3       	ldi	r24, 0x30	; 48
     ac0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	70 e1       	ldi	r23, 0x10	; 16
     ac8:	8d ea       	ldi	r24, 0xAD	; 173
     aca:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	70 e1       	ldi	r23, 0x10	; 16
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	70 e1       	ldi	r23, 0x10	; 16
     adc:	84 ea       	ldi	r24, 0xA4	; 164
     ade:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	70 e1       	ldi	r23, 0x10	; 16
     ae6:	86 ea       	ldi	r24, 0xA6	; 166
     ae8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	70 e1       	ldi	r23, 0x10	; 16
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e1       	ldi	r23, 0x10	; 16
     afa:	8f ea       	ldi	r24, 0xAF	; 175
     afc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     b00:	08 95       	ret

00000b02 <oled_reset>:
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	70 e1       	ldi	r23, 0x10	; 16
     b10:	80 e4       	ldi	r24, 0x40	; 64
     b12:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	70 e1       	ldi	r23, 0x10	; 16
     b1a:	80 eb       	ldi	r24, 0xB0	; 176
     b1c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     b20:	00 e0       	ldi	r16, 0x00	; 0
     b22:	10 e0       	ldi	r17, 0x00	; 0
     b24:	0f 2e       	mov	r0, r31
     b26:	f0 eb       	ldi	r31, 0xB0	; 176
     b28:	ff 2e       	mov	r15, r31
     b2a:	f0 2d       	mov	r31, r0
     b2c:	14 c0       	rjmp	.+40     	; 0xb56 <oled_reset+0x54>
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	72 e1       	ldi	r23, 0x12	; 18
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     b38:	21 96       	adiw	r28, 0x01	; 1
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <oled_reset+0x3e>
     b3c:	c0 e0       	ldi	r28, 0x00	; 0
     b3e:	d0 e0       	ldi	r29, 0x00	; 0
     b40:	c0 38       	cpi	r28, 0x80	; 128
     b42:	d1 05       	cpc	r29, r1
     b44:	a4 f3       	brlt	.-24     	; 0xb2e <oled_reset+0x2c>
     b46:	f3 94       	inc	r15
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	70 e1       	ldi	r23, 0x10	; 16
     b4c:	8f 2d       	mov	r24, r15
     b4e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     b52:	0f 5f       	subi	r16, 0xFF	; 255
     b54:	1f 4f       	sbci	r17, 0xFF	; 255
     b56:	08 30       	cpi	r16, 0x08	; 8
     b58:	11 05       	cpc	r17, r1
     b5a:	84 f3       	brlt	.-32     	; 0xb3c <oled_reset+0x3a>
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	08 95       	ret

00000b68 <write_char>:
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	18 2f       	mov	r17, r24
     b70:	c0 e0       	ldi	r28, 0x00	; 0
     b72:	d0 e0       	ldi	r29, 0x00	; 0
     b74:	13 c0       	rjmp	.+38     	; 0xb9c <write_char+0x34>
     b76:	e1 2f       	mov	r30, r17
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	b0 97       	sbiw	r30, 0x20	; 32
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	ec 0f       	add	r30, r28
     b8a:	fd 1f       	adc	r31, r29
     b8c:	e0 59       	subi	r30, 0x90	; 144
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	84 91       	lpm	r24, Z
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	72 e1       	ldi	r23, 0x12	; 18
     b96:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     b9a:	21 96       	adiw	r28, 0x01	; 1
     b9c:	c8 30       	cpi	r28, 0x08	; 8
     b9e:	d1 05       	cpc	r29, r1
     ba0:	54 f3       	brlt	.-44     	; 0xb76 <write_char+0xe>
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	08 95       	ret

00000baa <oled_home>:
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	70 e1       	ldi	r23, 0x10	; 16
     bae:	80 eb       	ldi	r24, 0xB0	; 176
     bb0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	70 e1       	ldi	r23, 0x10	; 16
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	70 e1       	ldi	r23, 0x10	; 16
     bc2:	80 e1       	ldi	r24, 0x10	; 16
     bc4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     bc8:	08 95       	ret

00000bca <go_to_page>:
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	70 e1       	ldi	r23, 0x10	; 16
     bce:	80 55       	subi	r24, 0x50	; 80
     bd0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     bd4:	08 95       	ret

00000bd6 <go_to_col>:
     bd6:	cf 93       	push	r28
     bd8:	c8 2f       	mov	r28, r24
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	70 e1       	ldi	r23, 0x10	; 16
     bde:	8f 70       	andi	r24, 0x0F	; 15
     be0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     be4:	8c 2f       	mov	r24, r28
     be6:	82 95       	swap	r24
     be8:	8f 70       	andi	r24, 0x0F	; 15
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	70 e1       	ldi	r23, 0x10	; 16
     bee:	80 5f       	subi	r24, 0xF0	; 240
     bf0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <oled_print>:


void oled_print(char * word)
{
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	8c 01       	movw	r16, r24
	int i =0;
     c02:	c0 e0       	ldi	r28, 0x00	; 0
     c04:	d0 e0       	ldi	r29, 0x00	; 0
	while (word[i] != '\0')
     c06:	03 c0       	rjmp	.+6      	; 0xc0e <oled_print+0x16>
	{
		write_char(word[i]);
     c08:	0e 94 b4 05 	call	0xb68	; 0xb68 <write_char>
		++i;
     c0c:	21 96       	adiw	r28, 0x01	; 1


void oled_print(char * word)
{
	int i =0;
	while (word[i] != '\0')
     c0e:	f8 01       	movw	r30, r16
     c10:	ec 0f       	add	r30, r28
     c12:	fd 1f       	adc	r31, r29
     c14:	80 81       	ld	r24, Z
     c16:	81 11       	cpse	r24, r1
     c18:	f7 cf       	rjmp	.-18     	; 0xc08 <oled_print+0x10>
	{
		write_char(word[i]);
		++i;
	}
}
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	08 95       	ret

00000c24 <oled_print_arrow>:

void oled_print_arrow (int row , int col, uint8_t clear)
{
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	8c 01       	movw	r16, r24
     c2c:	86 2f       	mov	r24, r22
     c2e:	c4 2f       	mov	r28, r20
	go_to_col(col);
     c30:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <go_to_col>
	go_to_page(row);
     c34:	c8 01       	movw	r24, r16
     c36:	0e 94 e5 05 	call	0xbca	; 0xbca <go_to_page>
	//_delay_ms(5);
	if(clear < 1)
     c3a:	c1 11       	cpse	r28, r1
     c3c:	1a c0       	rjmp	.+52     	; 0xc72 <oled_print_arrow+0x4e>
	{
		xmem_write(0b00011000, 0x1200);
     c3e:	60 e0       	ldi	r22, 0x00	; 0
     c40:	72 e1       	ldi	r23, 0x12	; 18
     c42:	88 e1       	ldi	r24, 0x18	; 24
     c44:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
		xmem_write(0b00011000, 0x1200 );
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	72 e1       	ldi	r23, 0x12	; 18
     c4c:	88 e1       	ldi	r24, 0x18	; 24
     c4e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
		xmem_write(0b01111110, 0x1200 );
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	72 e1       	ldi	r23, 0x12	; 18
     c56:	8e e7       	ldi	r24, 0x7E	; 126
     c58:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
		xmem_write(0b00111100, 0x1200 );
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	72 e1       	ldi	r23, 0x12	; 18
     c60:	8c e3       	ldi	r24, 0x3C	; 60
     c62:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
		xmem_write(0b00011000, 0x1200 );
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	72 e1       	ldi	r23, 0x12	; 18
     c6a:	88 e1       	ldi	r24, 0x18	; 24
     c6c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
     c70:	19 c0       	rjmp	.+50     	; 0xca4 <oled_print_arrow+0x80>
	}else
	{
		xmem_write(0b00000000, 0x1200);
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	72 e1       	ldi	r23, 0x12	; 18
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
		xmem_write(0b00000000, 0x1200 );
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	72 e1       	ldi	r23, 0x12	; 18
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
		xmem_write(0b00000000, 0x1200 );
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	72 e1       	ldi	r23, 0x12	; 18
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
		xmem_write(0b00000000, 0x1200 );
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	72 e1       	ldi	r23, 0x12	; 18
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
		xmem_write(0b00000000, 0x1200 );		
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	72 e1       	ldi	r23, 0x12	; 18
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
	}
}
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	08 95       	ret

00000cac <joystick_analog_position>:

float x_joystick_calibrate=128; 
float y_joystick_calibrate=128; 

void joystick_analog_position(float* x_per, float* y_per, uint8_t* ADC_data, int* calibrated)
{
     cac:	ef 92       	push	r14
     cae:	ff 92       	push	r15
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	7c 01       	movw	r14, r24
     cba:	8b 01       	movw	r16, r22
     cbc:	ea 01       	movw	r28, r20
	ADC_read(ADC_data);
     cbe:	ca 01       	movw	r24, r20
     cc0:	0e 94 32 02 	call	0x464	; 0x464 <ADC_read>
	xmem_write(0x00, 0x1400);
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	74 e1       	ldi	r23, 0x14	; 20
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
		
		*calibrated = 1;
	}
	*/

	*x_per = ((float)ADC_data[3]*(float)(200.0/255.0)-100);
     cce:	6b 81       	ldd	r22, Y+3	; 0x03
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 27 08 	call	0x104e	; 0x104e <__floatunsisf>
     cda:	29 ec       	ldi	r18, 0xC9	; 201
     cdc:	38 ec       	ldi	r19, 0xC8	; 200
     cde:	48 e4       	ldi	r20, 0x48	; 72
     ce0:	5f e3       	ldi	r21, 0x3F	; 63
     ce2:	0e 94 de 08 	call	0x11bc	; 0x11bc <__mulsf3>
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	48 ec       	ldi	r20, 0xC8	; 200
     cec:	52 e4       	ldi	r21, 0x42	; 66
     cee:	0e 94 14 07 	call	0xe28	; 0xe28 <__subsf3>
     cf2:	f7 01       	movw	r30, r14
     cf4:	60 83       	st	Z, r22
     cf6:	71 83       	std	Z+1, r23	; 0x01
     cf8:	82 83       	std	Z+2, r24	; 0x02
     cfa:	93 83       	std	Z+3, r25	; 0x03
	*y_per = ((float)ADC_data[0]*(float)(200.0/255.0)-100);
     cfc:	68 81       	ld	r22, Y
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 27 08 	call	0x104e	; 0x104e <__floatunsisf>
     d08:	29 ec       	ldi	r18, 0xC9	; 201
     d0a:	38 ec       	ldi	r19, 0xC8	; 200
     d0c:	48 e4       	ldi	r20, 0x48	; 72
     d0e:	5f e3       	ldi	r21, 0x3F	; 63
     d10:	0e 94 de 08 	call	0x11bc	; 0x11bc <__mulsf3>
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	48 ec       	ldi	r20, 0xC8	; 200
     d1a:	52 e4       	ldi	r21, 0x42	; 66
     d1c:	0e 94 14 07 	call	0xe28	; 0xe28 <__subsf3>
     d20:	f8 01       	movw	r30, r16
     d22:	60 83       	st	Z, r22
     d24:	71 83       	std	Z+1, r23	; 0x01
     d26:	82 83       	std	Z+2, r24	; 0x02
     d28:	93 83       	std	Z+3, r25	; 0x03

}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	08 95       	ret

00000d38 <slider_position>:

void slider_position(int *left_per, int *right_per, uint8_t* ADC_data)
{
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	7c 01       	movw	r14, r24
     d46:	8b 01       	movw	r16, r22
     d48:	ea 01       	movw	r28, r20
	ADC_read(ADC_data);
     d4a:	ca 01       	movw	r24, r20
     d4c:	0e 94 32 02 	call	0x464	; 0x464 <ADC_read>
	xmem_write(0x00, 0x1400);
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	74 e1       	ldi	r23, 0x14	; 20
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	0e 94 73 02 	call	0x4e6	; 0x4e6 <xmem_write>
	//printf( "ADC_data[%d] = %d, ADC_data[%d] = %d\n", 1, (int)ADC_data [1],2, (int)ADC_data [2]);
	*left_per = ADC_data[1];
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	f7 01       	movw	r30, r14
     d60:	91 83       	std	Z+1, r25	; 0x01
     d62:	80 83       	st	Z, r24
	*right_per = ADC_data[2];
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	f8 01       	movw	r30, r16
     d6a:	91 83       	std	Z+1, r25	; 0x01
     d6c:	80 83       	st	Z, r24
}
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	ff 90       	pop	r15
     d78:	ef 90       	pop	r14
     d7a:	08 95       	ret

00000d7c <pos_read>:



pos_t pos_read(float* x_per, float* y_per)
{
     d7c:	cf 92       	push	r12
     d7e:	df 92       	push	r13
     d80:	ef 92       	push	r14
     d82:	ff 92       	push	r15
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	eb 01       	movw	r28, r22
	if((*x_per) >= 70)
     d8a:	fc 01       	movw	r30, r24
     d8c:	c0 80       	ld	r12, Z
     d8e:	d1 80       	ldd	r13, Z+1	; 0x01
     d90:	e2 80       	ldd	r14, Z+2	; 0x02
     d92:	f3 80       	ldd	r15, Z+3	; 0x03
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	4c e8       	ldi	r20, 0x8C	; 140
     d9a:	52 e4       	ldi	r21, 0x42	; 66
     d9c:	c7 01       	movw	r24, r14
     d9e:	b6 01       	movw	r22, r12
     da0:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__gesf2>
     da4:	88 23       	and	r24, r24
     da6:	24 f5       	brge	.+72     	; 0xdf0 <pos_read+0x74>
	{
		return RIGHT; 	
	}
	else if((*x_per) <= -70)
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	4c e8       	ldi	r20, 0x8C	; 140
     dae:	52 ec       	ldi	r21, 0xC2	; 194
     db0:	c7 01       	movw	r24, r14
     db2:	b6 01       	movw	r22, r12
     db4:	0e 94 81 07 	call	0xf02	; 0xf02 <__cmpsf2>
     db8:	18 16       	cp	r1, r24
     dba:	e4 f4       	brge	.+56     	; 0xdf4 <pos_read+0x78>
	{
		return LEFT;
	}
	else if((*y_per) >= 70)
     dbc:	c8 80       	ld	r12, Y
     dbe:	d9 80       	ldd	r13, Y+1	; 0x01
     dc0:	ea 80       	ldd	r14, Y+2	; 0x02
     dc2:	fb 80       	ldd	r15, Y+3	; 0x03
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	4c e8       	ldi	r20, 0x8C	; 140
     dca:	52 e4       	ldi	r21, 0x42	; 66
     dcc:	c7 01       	movw	r24, r14
     dce:	b6 01       	movw	r22, r12
     dd0:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__gesf2>
     dd4:	88 23       	and	r24, r24
     dd6:	84 f4       	brge	.+32     	; 0xdf8 <pos_read+0x7c>
	{
		return UP;
	}
	else if((*y_per) <= -70)
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	4c e8       	ldi	r20, 0x8C	; 140
     dde:	52 ec       	ldi	r21, 0xC2	; 194
     de0:	c7 01       	movw	r24, r14
     de2:	b6 01       	movw	r22, r12
     de4:	0e 94 81 07 	call	0xf02	; 0xf02 <__cmpsf2>
     de8:	18 16       	cp	r1, r24
     dea:	44 f0       	brlt	.+16     	; 0xdfc <pos_read+0x80>
	{
		return DOWN;
     dec:	83 e0       	ldi	r24, 0x03	; 3
     dee:	07 c0       	rjmp	.+14     	; 0xdfe <pos_read+0x82>

pos_t pos_read(float* x_per, float* y_per)
{
	if((*x_per) >= 70)
	{
		return RIGHT; 	
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	05 c0       	rjmp	.+10     	; 0xdfe <pos_read+0x82>
	}
	else if((*x_per) <= -70)
	{
		return LEFT;
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <pos_read+0x82>
	}
	else if((*y_per) >= 70)
	{
		return UP;
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	01 c0       	rjmp	.+2      	; 0xdfe <pos_read+0x82>
	else if((*y_per) <= -70)
	{
		return DOWN;
	}
	
	return NEUTRAL;
     dfc:	84 e0       	ldi	r24, 0x04	; 4
	
}
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	df 90       	pop	r13
     e08:	cf 90       	pop	r12
     e0a:	08 95       	ret

00000e0c <spi_init>:
void spi_slave_init(void)
{
	/* Set MISO output, all others input */
	DDRB |= (1<<DDB6);
	/* Enable SPI */
	SPCR = (1<<SPE);
     e0c:	87 b3       	in	r24, 0x17	; 23
     e0e:	80 6b       	ori	r24, 0xB0	; 176
     e10:	87 bb       	out	0x17, r24	; 23
     e12:	81 e5       	ldi	r24, 0x51	; 81
     e14:	8d b9       	out	0x0d, r24	; 13
     e16:	08 95       	ret

00000e18 <spi_transmit>:
     e18:	8f b9       	out	0x0f, r24	; 15
     e1a:	77 9b       	sbis	0x0e, 7	; 14
     e1c:	fe cf       	rjmp	.-4      	; 0xe1a <spi_transmit+0x2>
     e1e:	08 95       	ret

00000e20 <spi_slave_receive>:
}

char spi_slave_receive(void)
{
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
     e20:	77 9b       	sbis	0x0e, 7	; 14
     e22:	fe cf       	rjmp	.-4      	; 0xe20 <spi_slave_receive>
	;
	/* Return data register */
	return SPDR;
     e24:	8f b1       	in	r24, 0x0f	; 15
     e26:	08 95       	ret

00000e28 <__subsf3>:
     e28:	50 58       	subi	r21, 0x80	; 128

00000e2a <__addsf3>:
     e2a:	bb 27       	eor	r27, r27
     e2c:	aa 27       	eor	r26, r26
     e2e:	0e 94 2c 07 	call	0xe58	; 0xe58 <__addsf3x>
     e32:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_round>
     e36:	0e 94 91 08 	call	0x1122	; 0x1122 <__fp_pscA>
     e3a:	38 f0       	brcs	.+14     	; 0xe4a <__addsf3+0x20>
     e3c:	0e 94 98 08 	call	0x1130	; 0x1130 <__fp_pscB>
     e40:	20 f0       	brcs	.+8      	; 0xe4a <__addsf3+0x20>
     e42:	39 f4       	brne	.+14     	; 0xe52 <__addsf3+0x28>
     e44:	9f 3f       	cpi	r25, 0xFF	; 255
     e46:	19 f4       	brne	.+6      	; 0xe4e <__addsf3+0x24>
     e48:	26 f4       	brtc	.+8      	; 0xe52 <__addsf3+0x28>
     e4a:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_nan>
     e4e:	0e f4       	brtc	.+2      	; 0xe52 <__addsf3+0x28>
     e50:	e0 95       	com	r30
     e52:	e7 fb       	bst	r30, 7
     e54:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_inf>

00000e58 <__addsf3x>:
     e58:	e9 2f       	mov	r30, r25
     e5a:	0e 94 b0 08 	call	0x1160	; 0x1160 <__fp_split3>
     e5e:	58 f3       	brcs	.-42     	; 0xe36 <__addsf3+0xc>
     e60:	ba 17       	cp	r27, r26
     e62:	62 07       	cpc	r22, r18
     e64:	73 07       	cpc	r23, r19
     e66:	84 07       	cpc	r24, r20
     e68:	95 07       	cpc	r25, r21
     e6a:	20 f0       	brcs	.+8      	; 0xe74 <__addsf3x+0x1c>
     e6c:	79 f4       	brne	.+30     	; 0xe8c <__addsf3x+0x34>
     e6e:	a6 f5       	brtc	.+104    	; 0xed8 <__addsf3x+0x80>
     e70:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__fp_zero>
     e74:	0e f4       	brtc	.+2      	; 0xe78 <__addsf3x+0x20>
     e76:	e0 95       	com	r30
     e78:	0b 2e       	mov	r0, r27
     e7a:	ba 2f       	mov	r27, r26
     e7c:	a0 2d       	mov	r26, r0
     e7e:	0b 01       	movw	r0, r22
     e80:	b9 01       	movw	r22, r18
     e82:	90 01       	movw	r18, r0
     e84:	0c 01       	movw	r0, r24
     e86:	ca 01       	movw	r24, r20
     e88:	a0 01       	movw	r20, r0
     e8a:	11 24       	eor	r1, r1
     e8c:	ff 27       	eor	r31, r31
     e8e:	59 1b       	sub	r21, r25
     e90:	99 f0       	breq	.+38     	; 0xeb8 <__addsf3x+0x60>
     e92:	59 3f       	cpi	r21, 0xF9	; 249
     e94:	50 f4       	brcc	.+20     	; 0xeaa <__addsf3x+0x52>
     e96:	50 3e       	cpi	r21, 0xE0	; 224
     e98:	68 f1       	brcs	.+90     	; 0xef4 <__addsf3x+0x9c>
     e9a:	1a 16       	cp	r1, r26
     e9c:	f0 40       	sbci	r31, 0x00	; 0
     e9e:	a2 2f       	mov	r26, r18
     ea0:	23 2f       	mov	r18, r19
     ea2:	34 2f       	mov	r19, r20
     ea4:	44 27       	eor	r20, r20
     ea6:	58 5f       	subi	r21, 0xF8	; 248
     ea8:	f3 cf       	rjmp	.-26     	; 0xe90 <__addsf3x+0x38>
     eaa:	46 95       	lsr	r20
     eac:	37 95       	ror	r19
     eae:	27 95       	ror	r18
     eb0:	a7 95       	ror	r26
     eb2:	f0 40       	sbci	r31, 0x00	; 0
     eb4:	53 95       	inc	r21
     eb6:	c9 f7       	brne	.-14     	; 0xeaa <__addsf3x+0x52>
     eb8:	7e f4       	brtc	.+30     	; 0xed8 <__addsf3x+0x80>
     eba:	1f 16       	cp	r1, r31
     ebc:	ba 0b       	sbc	r27, r26
     ebe:	62 0b       	sbc	r22, r18
     ec0:	73 0b       	sbc	r23, r19
     ec2:	84 0b       	sbc	r24, r20
     ec4:	ba f0       	brmi	.+46     	; 0xef4 <__addsf3x+0x9c>
     ec6:	91 50       	subi	r25, 0x01	; 1
     ec8:	a1 f0       	breq	.+40     	; 0xef2 <__addsf3x+0x9a>
     eca:	ff 0f       	add	r31, r31
     ecc:	bb 1f       	adc	r27, r27
     ece:	66 1f       	adc	r22, r22
     ed0:	77 1f       	adc	r23, r23
     ed2:	88 1f       	adc	r24, r24
     ed4:	c2 f7       	brpl	.-16     	; 0xec6 <__addsf3x+0x6e>
     ed6:	0e c0       	rjmp	.+28     	; 0xef4 <__addsf3x+0x9c>
     ed8:	ba 0f       	add	r27, r26
     eda:	62 1f       	adc	r22, r18
     edc:	73 1f       	adc	r23, r19
     ede:	84 1f       	adc	r24, r20
     ee0:	48 f4       	brcc	.+18     	; 0xef4 <__addsf3x+0x9c>
     ee2:	87 95       	ror	r24
     ee4:	77 95       	ror	r23
     ee6:	67 95       	ror	r22
     ee8:	b7 95       	ror	r27
     eea:	f7 95       	ror	r31
     eec:	9e 3f       	cpi	r25, 0xFE	; 254
     eee:	08 f0       	brcs	.+2      	; 0xef2 <__addsf3x+0x9a>
     ef0:	b0 cf       	rjmp	.-160    	; 0xe52 <__addsf3+0x28>
     ef2:	93 95       	inc	r25
     ef4:	88 0f       	add	r24, r24
     ef6:	08 f0       	brcs	.+2      	; 0xefa <__addsf3x+0xa2>
     ef8:	99 27       	eor	r25, r25
     efa:	ee 0f       	add	r30, r30
     efc:	97 95       	ror	r25
     efe:	87 95       	ror	r24
     f00:	08 95       	ret

00000f02 <__cmpsf2>:
     f02:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fp_cmp>
     f06:	08 f4       	brcc	.+2      	; 0xf0a <__cmpsf2+0x8>
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	08 95       	ret

00000f0c <__divsf3>:
     f0c:	0e 94 9a 07 	call	0xf34	; 0xf34 <__divsf3x>
     f10:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_round>
     f14:	0e 94 98 08 	call	0x1130	; 0x1130 <__fp_pscB>
     f18:	58 f0       	brcs	.+22     	; 0xf30 <__divsf3+0x24>
     f1a:	0e 94 91 08 	call	0x1122	; 0x1122 <__fp_pscA>
     f1e:	40 f0       	brcs	.+16     	; 0xf30 <__divsf3+0x24>
     f20:	29 f4       	brne	.+10     	; 0xf2c <__divsf3+0x20>
     f22:	5f 3f       	cpi	r21, 0xFF	; 255
     f24:	29 f0       	breq	.+10     	; 0xf30 <__divsf3+0x24>
     f26:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_inf>
     f2a:	51 11       	cpse	r21, r1
     f2c:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_szero>
     f30:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_nan>

00000f34 <__divsf3x>:
     f34:	0e 94 b0 08 	call	0x1160	; 0x1160 <__fp_split3>
     f38:	68 f3       	brcs	.-38     	; 0xf14 <__divsf3+0x8>

00000f3a <__divsf3_pse>:
     f3a:	99 23       	and	r25, r25
     f3c:	b1 f3       	breq	.-20     	; 0xf2a <__divsf3+0x1e>
     f3e:	55 23       	and	r21, r21
     f40:	91 f3       	breq	.-28     	; 0xf26 <__divsf3+0x1a>
     f42:	95 1b       	sub	r25, r21
     f44:	55 0b       	sbc	r21, r21
     f46:	bb 27       	eor	r27, r27
     f48:	aa 27       	eor	r26, r26
     f4a:	62 17       	cp	r22, r18
     f4c:	73 07       	cpc	r23, r19
     f4e:	84 07       	cpc	r24, r20
     f50:	38 f0       	brcs	.+14     	; 0xf60 <__divsf3_pse+0x26>
     f52:	9f 5f       	subi	r25, 0xFF	; 255
     f54:	5f 4f       	sbci	r21, 0xFF	; 255
     f56:	22 0f       	add	r18, r18
     f58:	33 1f       	adc	r19, r19
     f5a:	44 1f       	adc	r20, r20
     f5c:	aa 1f       	adc	r26, r26
     f5e:	a9 f3       	breq	.-22     	; 0xf4a <__divsf3_pse+0x10>
     f60:	35 d0       	rcall	.+106    	; 0xfcc <__divsf3_pse+0x92>
     f62:	0e 2e       	mov	r0, r30
     f64:	3a f0       	brmi	.+14     	; 0xf74 <__divsf3_pse+0x3a>
     f66:	e0 e8       	ldi	r30, 0x80	; 128
     f68:	32 d0       	rcall	.+100    	; 0xfce <__divsf3_pse+0x94>
     f6a:	91 50       	subi	r25, 0x01	; 1
     f6c:	50 40       	sbci	r21, 0x00	; 0
     f6e:	e6 95       	lsr	r30
     f70:	00 1c       	adc	r0, r0
     f72:	ca f7       	brpl	.-14     	; 0xf66 <__divsf3_pse+0x2c>
     f74:	2b d0       	rcall	.+86     	; 0xfcc <__divsf3_pse+0x92>
     f76:	fe 2f       	mov	r31, r30
     f78:	29 d0       	rcall	.+82     	; 0xfcc <__divsf3_pse+0x92>
     f7a:	66 0f       	add	r22, r22
     f7c:	77 1f       	adc	r23, r23
     f7e:	88 1f       	adc	r24, r24
     f80:	bb 1f       	adc	r27, r27
     f82:	26 17       	cp	r18, r22
     f84:	37 07       	cpc	r19, r23
     f86:	48 07       	cpc	r20, r24
     f88:	ab 07       	cpc	r26, r27
     f8a:	b0 e8       	ldi	r27, 0x80	; 128
     f8c:	09 f0       	breq	.+2      	; 0xf90 <__divsf3_pse+0x56>
     f8e:	bb 0b       	sbc	r27, r27
     f90:	80 2d       	mov	r24, r0
     f92:	bf 01       	movw	r22, r30
     f94:	ff 27       	eor	r31, r31
     f96:	93 58       	subi	r25, 0x83	; 131
     f98:	5f 4f       	sbci	r21, 0xFF	; 255
     f9a:	3a f0       	brmi	.+14     	; 0xfaa <__divsf3_pse+0x70>
     f9c:	9e 3f       	cpi	r25, 0xFE	; 254
     f9e:	51 05       	cpc	r21, r1
     fa0:	78 f0       	brcs	.+30     	; 0xfc0 <__divsf3_pse+0x86>
     fa2:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_inf>
     fa6:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_szero>
     faa:	5f 3f       	cpi	r21, 0xFF	; 255
     fac:	e4 f3       	brlt	.-8      	; 0xfa6 <__divsf3_pse+0x6c>
     fae:	98 3e       	cpi	r25, 0xE8	; 232
     fb0:	d4 f3       	brlt	.-12     	; 0xfa6 <__divsf3_pse+0x6c>
     fb2:	86 95       	lsr	r24
     fb4:	77 95       	ror	r23
     fb6:	67 95       	ror	r22
     fb8:	b7 95       	ror	r27
     fba:	f7 95       	ror	r31
     fbc:	9f 5f       	subi	r25, 0xFF	; 255
     fbe:	c9 f7       	brne	.-14     	; 0xfb2 <__divsf3_pse+0x78>
     fc0:	88 0f       	add	r24, r24
     fc2:	91 1d       	adc	r25, r1
     fc4:	96 95       	lsr	r25
     fc6:	87 95       	ror	r24
     fc8:	97 f9       	bld	r25, 7
     fca:	08 95       	ret
     fcc:	e1 e0       	ldi	r30, 0x01	; 1
     fce:	66 0f       	add	r22, r22
     fd0:	77 1f       	adc	r23, r23
     fd2:	88 1f       	adc	r24, r24
     fd4:	bb 1f       	adc	r27, r27
     fd6:	62 17       	cp	r22, r18
     fd8:	73 07       	cpc	r23, r19
     fda:	84 07       	cpc	r24, r20
     fdc:	ba 07       	cpc	r27, r26
     fde:	20 f0       	brcs	.+8      	; 0xfe8 <__divsf3_pse+0xae>
     fe0:	62 1b       	sub	r22, r18
     fe2:	73 0b       	sbc	r23, r19
     fe4:	84 0b       	sbc	r24, r20
     fe6:	ba 0b       	sbc	r27, r26
     fe8:	ee 1f       	adc	r30, r30
     fea:	88 f7       	brcc	.-30     	; 0xfce <__divsf3_pse+0x94>
     fec:	e0 95       	com	r30
     fee:	08 95       	ret

00000ff0 <__fixunssfsi>:
     ff0:	0e 94 b8 08 	call	0x1170	; 0x1170 <__fp_splitA>
     ff4:	88 f0       	brcs	.+34     	; 0x1018 <__fixunssfsi+0x28>
     ff6:	9f 57       	subi	r25, 0x7F	; 127
     ff8:	98 f0       	brcs	.+38     	; 0x1020 <__fixunssfsi+0x30>
     ffa:	b9 2f       	mov	r27, r25
     ffc:	99 27       	eor	r25, r25
     ffe:	b7 51       	subi	r27, 0x17	; 23
    1000:	b0 f0       	brcs	.+44     	; 0x102e <__fixunssfsi+0x3e>
    1002:	e1 f0       	breq	.+56     	; 0x103c <__fixunssfsi+0x4c>
    1004:	66 0f       	add	r22, r22
    1006:	77 1f       	adc	r23, r23
    1008:	88 1f       	adc	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	1a f0       	brmi	.+6      	; 0x1014 <__fixunssfsi+0x24>
    100e:	ba 95       	dec	r27
    1010:	c9 f7       	brne	.-14     	; 0x1004 <__fixunssfsi+0x14>
    1012:	14 c0       	rjmp	.+40     	; 0x103c <__fixunssfsi+0x4c>
    1014:	b1 30       	cpi	r27, 0x01	; 1
    1016:	91 f0       	breq	.+36     	; 0x103c <__fixunssfsi+0x4c>
    1018:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__fp_zero>
    101c:	b1 e0       	ldi	r27, 0x01	; 1
    101e:	08 95       	ret
    1020:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__fp_zero>
    1024:	67 2f       	mov	r22, r23
    1026:	78 2f       	mov	r23, r24
    1028:	88 27       	eor	r24, r24
    102a:	b8 5f       	subi	r27, 0xF8	; 248
    102c:	39 f0       	breq	.+14     	; 0x103c <__fixunssfsi+0x4c>
    102e:	b9 3f       	cpi	r27, 0xF9	; 249
    1030:	cc f3       	brlt	.-14     	; 0x1024 <__fixunssfsi+0x34>
    1032:	86 95       	lsr	r24
    1034:	77 95       	ror	r23
    1036:	67 95       	ror	r22
    1038:	b3 95       	inc	r27
    103a:	d9 f7       	brne	.-10     	; 0x1032 <__fixunssfsi+0x42>
    103c:	3e f4       	brtc	.+14     	; 0x104c <__fixunssfsi+0x5c>
    103e:	90 95       	com	r25
    1040:	80 95       	com	r24
    1042:	70 95       	com	r23
    1044:	61 95       	neg	r22
    1046:	7f 4f       	sbci	r23, 0xFF	; 255
    1048:	8f 4f       	sbci	r24, 0xFF	; 255
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	08 95       	ret

0000104e <__floatunsisf>:
    104e:	e8 94       	clt
    1050:	09 c0       	rjmp	.+18     	; 0x1064 <__floatsisf+0x12>

00001052 <__floatsisf>:
    1052:	97 fb       	bst	r25, 7
    1054:	3e f4       	brtc	.+14     	; 0x1064 <__floatsisf+0x12>
    1056:	90 95       	com	r25
    1058:	80 95       	com	r24
    105a:	70 95       	com	r23
    105c:	61 95       	neg	r22
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
    1060:	8f 4f       	sbci	r24, 0xFF	; 255
    1062:	9f 4f       	sbci	r25, 0xFF	; 255
    1064:	99 23       	and	r25, r25
    1066:	a9 f0       	breq	.+42     	; 0x1092 <__floatsisf+0x40>
    1068:	f9 2f       	mov	r31, r25
    106a:	96 e9       	ldi	r25, 0x96	; 150
    106c:	bb 27       	eor	r27, r27
    106e:	93 95       	inc	r25
    1070:	f6 95       	lsr	r31
    1072:	87 95       	ror	r24
    1074:	77 95       	ror	r23
    1076:	67 95       	ror	r22
    1078:	b7 95       	ror	r27
    107a:	f1 11       	cpse	r31, r1
    107c:	f8 cf       	rjmp	.-16     	; 0x106e <__floatsisf+0x1c>
    107e:	fa f4       	brpl	.+62     	; 0x10be <__floatsisf+0x6c>
    1080:	bb 0f       	add	r27, r27
    1082:	11 f4       	brne	.+4      	; 0x1088 <__floatsisf+0x36>
    1084:	60 ff       	sbrs	r22, 0
    1086:	1b c0       	rjmp	.+54     	; 0x10be <__floatsisf+0x6c>
    1088:	6f 5f       	subi	r22, 0xFF	; 255
    108a:	7f 4f       	sbci	r23, 0xFF	; 255
    108c:	8f 4f       	sbci	r24, 0xFF	; 255
    108e:	9f 4f       	sbci	r25, 0xFF	; 255
    1090:	16 c0       	rjmp	.+44     	; 0x10be <__floatsisf+0x6c>
    1092:	88 23       	and	r24, r24
    1094:	11 f0       	breq	.+4      	; 0x109a <__floatsisf+0x48>
    1096:	96 e9       	ldi	r25, 0x96	; 150
    1098:	11 c0       	rjmp	.+34     	; 0x10bc <__floatsisf+0x6a>
    109a:	77 23       	and	r23, r23
    109c:	21 f0       	breq	.+8      	; 0x10a6 <__floatsisf+0x54>
    109e:	9e e8       	ldi	r25, 0x8E	; 142
    10a0:	87 2f       	mov	r24, r23
    10a2:	76 2f       	mov	r23, r22
    10a4:	05 c0       	rjmp	.+10     	; 0x10b0 <__floatsisf+0x5e>
    10a6:	66 23       	and	r22, r22
    10a8:	71 f0       	breq	.+28     	; 0x10c6 <__floatsisf+0x74>
    10aa:	96 e8       	ldi	r25, 0x86	; 134
    10ac:	86 2f       	mov	r24, r22
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	2a f0       	brmi	.+10     	; 0x10be <__floatsisf+0x6c>
    10b4:	9a 95       	dec	r25
    10b6:	66 0f       	add	r22, r22
    10b8:	77 1f       	adc	r23, r23
    10ba:	88 1f       	adc	r24, r24
    10bc:	da f7       	brpl	.-10     	; 0x10b4 <__floatsisf+0x62>
    10be:	88 0f       	add	r24, r24
    10c0:	96 95       	lsr	r25
    10c2:	87 95       	ror	r24
    10c4:	97 f9       	bld	r25, 7
    10c6:	08 95       	ret

000010c8 <__fp_cmp>:
    10c8:	99 0f       	add	r25, r25
    10ca:	00 08       	sbc	r0, r0
    10cc:	55 0f       	add	r21, r21
    10ce:	aa 0b       	sbc	r26, r26
    10d0:	e0 e8       	ldi	r30, 0x80	; 128
    10d2:	fe ef       	ldi	r31, 0xFE	; 254
    10d4:	16 16       	cp	r1, r22
    10d6:	17 06       	cpc	r1, r23
    10d8:	e8 07       	cpc	r30, r24
    10da:	f9 07       	cpc	r31, r25
    10dc:	c0 f0       	brcs	.+48     	; 0x110e <__fp_cmp+0x46>
    10de:	12 16       	cp	r1, r18
    10e0:	13 06       	cpc	r1, r19
    10e2:	e4 07       	cpc	r30, r20
    10e4:	f5 07       	cpc	r31, r21
    10e6:	98 f0       	brcs	.+38     	; 0x110e <__fp_cmp+0x46>
    10e8:	62 1b       	sub	r22, r18
    10ea:	73 0b       	sbc	r23, r19
    10ec:	84 0b       	sbc	r24, r20
    10ee:	95 0b       	sbc	r25, r21
    10f0:	39 f4       	brne	.+14     	; 0x1100 <__fp_cmp+0x38>
    10f2:	0a 26       	eor	r0, r26
    10f4:	61 f0       	breq	.+24     	; 0x110e <__fp_cmp+0x46>
    10f6:	23 2b       	or	r18, r19
    10f8:	24 2b       	or	r18, r20
    10fa:	25 2b       	or	r18, r21
    10fc:	21 f4       	brne	.+8      	; 0x1106 <__fp_cmp+0x3e>
    10fe:	08 95       	ret
    1100:	0a 26       	eor	r0, r26
    1102:	09 f4       	brne	.+2      	; 0x1106 <__fp_cmp+0x3e>
    1104:	a1 40       	sbci	r26, 0x01	; 1
    1106:	a6 95       	lsr	r26
    1108:	8f ef       	ldi	r24, 0xFF	; 255
    110a:	81 1d       	adc	r24, r1
    110c:	81 1d       	adc	r24, r1
    110e:	08 95       	ret

00001110 <__fp_inf>:
    1110:	97 f9       	bld	r25, 7
    1112:	9f 67       	ori	r25, 0x7F	; 127
    1114:	80 e8       	ldi	r24, 0x80	; 128
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	08 95       	ret

0000111c <__fp_nan>:
    111c:	9f ef       	ldi	r25, 0xFF	; 255
    111e:	80 ec       	ldi	r24, 0xC0	; 192
    1120:	08 95       	ret

00001122 <__fp_pscA>:
    1122:	00 24       	eor	r0, r0
    1124:	0a 94       	dec	r0
    1126:	16 16       	cp	r1, r22
    1128:	17 06       	cpc	r1, r23
    112a:	18 06       	cpc	r1, r24
    112c:	09 06       	cpc	r0, r25
    112e:	08 95       	ret

00001130 <__fp_pscB>:
    1130:	00 24       	eor	r0, r0
    1132:	0a 94       	dec	r0
    1134:	12 16       	cp	r1, r18
    1136:	13 06       	cpc	r1, r19
    1138:	14 06       	cpc	r1, r20
    113a:	05 06       	cpc	r0, r21
    113c:	08 95       	ret

0000113e <__fp_round>:
    113e:	09 2e       	mov	r0, r25
    1140:	03 94       	inc	r0
    1142:	00 0c       	add	r0, r0
    1144:	11 f4       	brne	.+4      	; 0x114a <__fp_round+0xc>
    1146:	88 23       	and	r24, r24
    1148:	52 f0       	brmi	.+20     	; 0x115e <__fp_round+0x20>
    114a:	bb 0f       	add	r27, r27
    114c:	40 f4       	brcc	.+16     	; 0x115e <__fp_round+0x20>
    114e:	bf 2b       	or	r27, r31
    1150:	11 f4       	brne	.+4      	; 0x1156 <__fp_round+0x18>
    1152:	60 ff       	sbrs	r22, 0
    1154:	04 c0       	rjmp	.+8      	; 0x115e <__fp_round+0x20>
    1156:	6f 5f       	subi	r22, 0xFF	; 255
    1158:	7f 4f       	sbci	r23, 0xFF	; 255
    115a:	8f 4f       	sbci	r24, 0xFF	; 255
    115c:	9f 4f       	sbci	r25, 0xFF	; 255
    115e:	08 95       	ret

00001160 <__fp_split3>:
    1160:	57 fd       	sbrc	r21, 7
    1162:	90 58       	subi	r25, 0x80	; 128
    1164:	44 0f       	add	r20, r20
    1166:	55 1f       	adc	r21, r21
    1168:	59 f0       	breq	.+22     	; 0x1180 <__fp_splitA+0x10>
    116a:	5f 3f       	cpi	r21, 0xFF	; 255
    116c:	71 f0       	breq	.+28     	; 0x118a <__fp_splitA+0x1a>
    116e:	47 95       	ror	r20

00001170 <__fp_splitA>:
    1170:	88 0f       	add	r24, r24
    1172:	97 fb       	bst	r25, 7
    1174:	99 1f       	adc	r25, r25
    1176:	61 f0       	breq	.+24     	; 0x1190 <__fp_splitA+0x20>
    1178:	9f 3f       	cpi	r25, 0xFF	; 255
    117a:	79 f0       	breq	.+30     	; 0x119a <__fp_splitA+0x2a>
    117c:	87 95       	ror	r24
    117e:	08 95       	ret
    1180:	12 16       	cp	r1, r18
    1182:	13 06       	cpc	r1, r19
    1184:	14 06       	cpc	r1, r20
    1186:	55 1f       	adc	r21, r21
    1188:	f2 cf       	rjmp	.-28     	; 0x116e <__fp_split3+0xe>
    118a:	46 95       	lsr	r20
    118c:	f1 df       	rcall	.-30     	; 0x1170 <__fp_splitA>
    118e:	08 c0       	rjmp	.+16     	; 0x11a0 <__fp_splitA+0x30>
    1190:	16 16       	cp	r1, r22
    1192:	17 06       	cpc	r1, r23
    1194:	18 06       	cpc	r1, r24
    1196:	99 1f       	adc	r25, r25
    1198:	f1 cf       	rjmp	.-30     	; 0x117c <__fp_splitA+0xc>
    119a:	86 95       	lsr	r24
    119c:	71 05       	cpc	r23, r1
    119e:	61 05       	cpc	r22, r1
    11a0:	08 94       	sec
    11a2:	08 95       	ret

000011a4 <__fp_zero>:
    11a4:	e8 94       	clt

000011a6 <__fp_szero>:
    11a6:	bb 27       	eor	r27, r27
    11a8:	66 27       	eor	r22, r22
    11aa:	77 27       	eor	r23, r23
    11ac:	cb 01       	movw	r24, r22
    11ae:	97 f9       	bld	r25, 7
    11b0:	08 95       	ret

000011b2 <__gesf2>:
    11b2:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fp_cmp>
    11b6:	08 f4       	brcc	.+2      	; 0x11ba <__gesf2+0x8>
    11b8:	8f ef       	ldi	r24, 0xFF	; 255
    11ba:	08 95       	ret

000011bc <__mulsf3>:
    11bc:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__mulsf3x>
    11c0:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_round>
    11c4:	0e 94 91 08 	call	0x1122	; 0x1122 <__fp_pscA>
    11c8:	38 f0       	brcs	.+14     	; 0x11d8 <__mulsf3+0x1c>
    11ca:	0e 94 98 08 	call	0x1130	; 0x1130 <__fp_pscB>
    11ce:	20 f0       	brcs	.+8      	; 0x11d8 <__mulsf3+0x1c>
    11d0:	95 23       	and	r25, r21
    11d2:	11 f0       	breq	.+4      	; 0x11d8 <__mulsf3+0x1c>
    11d4:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_inf>
    11d8:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_nan>
    11dc:	11 24       	eor	r1, r1
    11de:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_szero>

000011e2 <__mulsf3x>:
    11e2:	0e 94 b0 08 	call	0x1160	; 0x1160 <__fp_split3>
    11e6:	70 f3       	brcs	.-36     	; 0x11c4 <__mulsf3+0x8>

000011e8 <__mulsf3_pse>:
    11e8:	95 9f       	mul	r25, r21
    11ea:	c1 f3       	breq	.-16     	; 0x11dc <__mulsf3+0x20>
    11ec:	95 0f       	add	r25, r21
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	55 1f       	adc	r21, r21
    11f2:	62 9f       	mul	r22, r18
    11f4:	f0 01       	movw	r30, r0
    11f6:	72 9f       	mul	r23, r18
    11f8:	bb 27       	eor	r27, r27
    11fa:	f0 0d       	add	r31, r0
    11fc:	b1 1d       	adc	r27, r1
    11fe:	63 9f       	mul	r22, r19
    1200:	aa 27       	eor	r26, r26
    1202:	f0 0d       	add	r31, r0
    1204:	b1 1d       	adc	r27, r1
    1206:	aa 1f       	adc	r26, r26
    1208:	64 9f       	mul	r22, r20
    120a:	66 27       	eor	r22, r22
    120c:	b0 0d       	add	r27, r0
    120e:	a1 1d       	adc	r26, r1
    1210:	66 1f       	adc	r22, r22
    1212:	82 9f       	mul	r24, r18
    1214:	22 27       	eor	r18, r18
    1216:	b0 0d       	add	r27, r0
    1218:	a1 1d       	adc	r26, r1
    121a:	62 1f       	adc	r22, r18
    121c:	73 9f       	mul	r23, r19
    121e:	b0 0d       	add	r27, r0
    1220:	a1 1d       	adc	r26, r1
    1222:	62 1f       	adc	r22, r18
    1224:	83 9f       	mul	r24, r19
    1226:	a0 0d       	add	r26, r0
    1228:	61 1d       	adc	r22, r1
    122a:	22 1f       	adc	r18, r18
    122c:	74 9f       	mul	r23, r20
    122e:	33 27       	eor	r19, r19
    1230:	a0 0d       	add	r26, r0
    1232:	61 1d       	adc	r22, r1
    1234:	23 1f       	adc	r18, r19
    1236:	84 9f       	mul	r24, r20
    1238:	60 0d       	add	r22, r0
    123a:	21 1d       	adc	r18, r1
    123c:	82 2f       	mov	r24, r18
    123e:	76 2f       	mov	r23, r22
    1240:	6a 2f       	mov	r22, r26
    1242:	11 24       	eor	r1, r1
    1244:	9f 57       	subi	r25, 0x7F	; 127
    1246:	50 40       	sbci	r21, 0x00	; 0
    1248:	9a f0       	brmi	.+38     	; 0x1270 <__mulsf3_pse+0x88>
    124a:	f1 f0       	breq	.+60     	; 0x1288 <__mulsf3_pse+0xa0>
    124c:	88 23       	and	r24, r24
    124e:	4a f0       	brmi	.+18     	; 0x1262 <__mulsf3_pse+0x7a>
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	bb 1f       	adc	r27, r27
    1256:	66 1f       	adc	r22, r22
    1258:	77 1f       	adc	r23, r23
    125a:	88 1f       	adc	r24, r24
    125c:	91 50       	subi	r25, 0x01	; 1
    125e:	50 40       	sbci	r21, 0x00	; 0
    1260:	a9 f7       	brne	.-22     	; 0x124c <__mulsf3_pse+0x64>
    1262:	9e 3f       	cpi	r25, 0xFE	; 254
    1264:	51 05       	cpc	r21, r1
    1266:	80 f0       	brcs	.+32     	; 0x1288 <__mulsf3_pse+0xa0>
    1268:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_inf>
    126c:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_szero>
    1270:	5f 3f       	cpi	r21, 0xFF	; 255
    1272:	e4 f3       	brlt	.-8      	; 0x126c <__mulsf3_pse+0x84>
    1274:	98 3e       	cpi	r25, 0xE8	; 232
    1276:	d4 f3       	brlt	.-12     	; 0x126c <__mulsf3_pse+0x84>
    1278:	86 95       	lsr	r24
    127a:	77 95       	ror	r23
    127c:	67 95       	ror	r22
    127e:	b7 95       	ror	r27
    1280:	f7 95       	ror	r31
    1282:	e7 95       	ror	r30
    1284:	9f 5f       	subi	r25, 0xFF	; 255
    1286:	c1 f7       	brne	.-16     	; 0x1278 <__mulsf3_pse+0x90>
    1288:	fe 2b       	or	r31, r30
    128a:	88 0f       	add	r24, r24
    128c:	91 1d       	adc	r25, r1
    128e:	96 95       	lsr	r25
    1290:	87 95       	ror	r24
    1292:	97 f9       	bld	r25, 7
    1294:	08 95       	ret

00001296 <puts>:
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <__iob+0x2>
    12a2:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <__iob+0x3>
    12a6:	23 81       	ldd	r18, Z+3	; 0x03
    12a8:	21 ff       	sbrs	r18, 1
    12aa:	1b c0       	rjmp	.+54     	; 0x12e2 <puts+0x4c>
    12ac:	8c 01       	movw	r16, r24
    12ae:	d0 e0       	ldi	r29, 0x00	; 0
    12b0:	c0 e0       	ldi	r28, 0x00	; 0
    12b2:	f8 01       	movw	r30, r16
    12b4:	81 91       	ld	r24, Z+
    12b6:	8f 01       	movw	r16, r30
    12b8:	60 91 96 01 	lds	r22, 0x0196	; 0x800196 <__iob+0x2>
    12bc:	70 91 97 01 	lds	r23, 0x0197	; 0x800197 <__iob+0x3>
    12c0:	db 01       	movw	r26, r22
    12c2:	18 96       	adiw	r26, 0x08	; 8
    12c4:	ed 91       	ld	r30, X+
    12c6:	fc 91       	ld	r31, X
    12c8:	19 97       	sbiw	r26, 0x09	; 9
    12ca:	88 23       	and	r24, r24
    12cc:	31 f0       	breq	.+12     	; 0x12da <puts+0x44>
    12ce:	09 95       	icall
    12d0:	89 2b       	or	r24, r25
    12d2:	79 f3       	breq	.-34     	; 0x12b2 <puts+0x1c>
    12d4:	df ef       	ldi	r29, 0xFF	; 255
    12d6:	cf ef       	ldi	r28, 0xFF	; 255
    12d8:	ec cf       	rjmp	.-40     	; 0x12b2 <puts+0x1c>
    12da:	8a e0       	ldi	r24, 0x0A	; 10
    12dc:	09 95       	icall
    12de:	89 2b       	or	r24, r25
    12e0:	19 f0       	breq	.+6      	; 0x12e8 <puts+0x52>
    12e2:	8f ef       	ldi	r24, 0xFF	; 255
    12e4:	9f ef       	ldi	r25, 0xFF	; 255
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <puts+0x56>
    12e8:	8d 2f       	mov	r24, r29
    12ea:	9c 2f       	mov	r25, r28
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	08 95       	ret

000012f6 <_exit>:
    12f6:	f8 94       	cli

000012f8 <__stop_program>:
    12f8:	ff cf       	rjmp	.-2      	; 0x12f8 <__stop_program>
