
PongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000786  0000081a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000786  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010e  0080010e  00000828  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000148c  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c8a  00000000  00000000  00001df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000851  00000000  00000000  00002a82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  000032d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053b  00000000  00000000  00003504  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d8  00000000  00000000  00003a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003f17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_15>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 e8       	ldi	r30, 0x86	; 134
  84:	f7 e0       	ldi	r31, 0x07	; 7
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ae 30       	cpi	r26, 0x0E	; 14
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	ae e0       	ldi	r26, 0x0E	; 14
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ac 31       	cpi	r26, 0x1C	; 28
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 80 01 	call	0x300	; 0x300 <main>
  a6:	0c 94 c1 03 	jmp	0x782	; 0x782 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <PWM_Init>:
#include "ADC_driver.h"

void PWM_Init()
{
  ae:	cf 92       	push	r12
  b0:	df 92       	push	r13
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
	set_bit(DDRD, DDD5);
  b6:	81 b3       	in	r24, 0x11	; 17
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	81 bb       	out	0x11, r24	; 17
	
	/* Fast PWM, TOP value = ICR1 */
	set_bit(TCCR1B, WGM13);
  bc:	8e b5       	in	r24, 0x2e	; 46
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	8e bd       	out	0x2e, r24	; 46
	set_bit(TCCR1B, WGM12);
  c2:	8e b5       	in	r24, 0x2e	; 46
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	8e bd       	out	0x2e, r24	; 46
	set_bit(TCCR1A, WGM11);
  c8:	8f b5       	in	r24, 0x2f	; 47
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	8f bd       	out	0x2f, r24	; 47
	clear_bit(TCCR1A, WGM10);
  ce:	8f b5       	in	r24, 0x2f	; 47
  d0:	8e 7f       	andi	r24, 0xFE	; 254
  d2:	8f bd       	out	0x2f, r24	; 47
	
	set_bit(TCCR1A, COM1A1);
  d4:	8f b5       	in	r24, 0x2f	; 47
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	8f bd       	out	0x2f, r24	; 47
	clear_bit(TCCR1A, COM1A0);
  da:	8f b5       	in	r24, 0x2f	; 47
  dc:	8f 7b       	andi	r24, 0xBF	; 191
  de:	8f bd       	out	0x2f, r24	; 47
	
	set_bit(TIMSK, TOIE1);
  e0:	89 b7       	in	r24, 0x39	; 57
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	89 bf       	out	0x39, r24	; 57
	
	/* Configuration of the width of the PWM */
	
	ICR1 = 1;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	95 bd       	out	0x25, r25	; 37
  ec:	84 bd       	out	0x24, r24	; 36
		
	OCR1A = (dutyCircle/100.0)*ICR1;
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	48 ec       	ldi	r20, 0xC8	; 200
  f4:	52 e4       	ldi	r21, 0x42	; 66
  f6:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <__data_end>
  fa:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <__data_end+0x1>
  fe:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end+0x2>
 102:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x3>
 106:	0e 94 25 02 	call	0x44a	; 0x44a <__divsf3>
 10a:	6b 01       	movw	r12, r22
 10c:	7c 01       	movw	r14, r24
 10e:	64 b5       	in	r22, 0x24	; 36
 110:	75 b5       	in	r23, 0x25	; 37
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 c6 02 	call	0x58c	; 0x58c <__floatunsisf>
 11a:	a7 01       	movw	r20, r14
 11c:	96 01       	movw	r18, r12
 11e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__mulsf3>
 122:	0e 94 97 02 	call	0x52e	; 0x52e <__fixunssfsi>
 126:	7b bd       	out	0x2b, r23	; 43
 128:	6a bd       	out	0x2a, r22	; 42
	
	/*  */
	
	clear_bit(TCCR1B, CS12);
 12a:	8e b5       	in	r24, 0x2e	; 46
 12c:	8b 7f       	andi	r24, 0xFB	; 251
 12e:	8e bd       	out	0x2e, r24	; 46
	clear_bit(TCCR1B, CS11);
 130:	8e b5       	in	r24, 0x2e	; 46
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	8e bd       	out	0x2e, r24	; 46
	set_bit(TCCR1B, CS10);
 136:	8e b5       	in	r24, 0x2e	; 46
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	8e bd       	out	0x2e, r24	; 46
}
 13c:	ff 90       	pop	r15
 13e:	ef 90       	pop	r14
 140:	df 90       	pop	r13
 142:	cf 90       	pop	r12
 144:	08 95       	ret

00000146 <ADC_init>:


void ADC_init(void)
{
	//set clock out on MC
	set_bit(DDRD, DDD5);
 146:	81 b3       	in	r24, 0x11	; 17
 148:	80 62       	ori	r24, 0x20	; 32
 14a:	81 bb       	out	0x11, r24	; 17
	set_bit(DDRD, DDD6); /* Enable WR output signal */
 14c:	81 b3       	in	r24, 0x11	; 17
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	81 bb       	out	0x11, r24	; 17
	set_bit(DDRD, DDD7); /* Enable RD output signal */
 152:	81 b3       	in	r24, 0x11	; 17
 154:	80 68       	ori	r24, 0x80	; 128
 156:	81 bb       	out	0x11, r24	; 17
	
	clear_bit(DDRE, DDE0); /* Set pin PE0 as INPUT to use the INT2 Interrupt for BUSY signal from ADC */
 158:	86 b1       	in	r24, 0x06	; 6
 15a:	8e 7f       	andi	r24, 0xFE	; 254
 15c:	86 b9       	out	0x06, r24	; 6
	
	set_bit(EMCUCR, ISC2); /* Trigger interrupt on rising edge */
 15e:	86 b7       	in	r24, 0x36	; 54
 160:	81 60       	ori	r24, 0x01	; 1
 162:	86 bf       	out	0x36, r24	; 54
	set_bit(GICR, INT2); /* Enable INT2 interrupt */ 
 164:	8b b7       	in	r24, 0x3b	; 59
 166:	80 62       	ori	r24, 0x20	; 32
 168:	8b bf       	out	0x3b, r24	; 59
 16a:	08 95       	ret

0000016c <ADC_read>:
}

void ADC_read(uint8_t* ADC_data)
{
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	7c 01       	movw	r14, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	00 00       	nop
	
	// uint8_t ADC_data [4]= {0,0,0,0};

	_delay_ms(t_BRD);
	
	for(int i = 0; i<channels;++i)
 17c:	c0 e0       	ldi	r28, 0x00	; 0
 17e:	d0 e0       	ldi	r29, 0x00	; 0
 180:	0d c0       	rjmp	.+26     	; 0x19c <ADC_read+0x30>
	{
		ADC_data[i] = xmem_read(0x1700);
 182:	87 01       	movw	r16, r14
 184:	0c 0f       	add	r16, r28
 186:	1d 1f       	adc	r17, r29
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	97 e1       	ldi	r25, 0x17	; 23
 18c:	0e 94 01 01 	call	0x202	; 0x202 <xmem_read>
 190:	f8 01       	movw	r30, r16
 192:	80 83       	st	Z, r24
 194:	f2 e0       	ldi	r31, 0x02	; 2
 196:	fa 95       	dec	r31
 198:	f1 f7       	brne	.-4      	; 0x196 <ADC_read+0x2a>
	
	// uint8_t ADC_data [4]= {0,0,0,0};

	_delay_ms(t_BRD);
	
	for(int i = 0; i<channels;++i)
 19a:	21 96       	adiw	r28, 0x01	; 1
 19c:	c4 30       	cpi	r28, 0x04	; 4
 19e:	d1 05       	cpc	r29, r1
 1a0:	84 f3       	brlt	.-32     	; 0x182 <ADC_read+0x16>
	
	}
	
	//printf( "ADC_data[%d] = %d, ADC_data[%d] = %d\n", 0, (int)ADC_data [0],3, (int)ADC_data [3]);

}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	ff 90       	pop	r15
 1ac:	ef 90       	pop	r14
 1ae:	08 95       	ret

000001b0 <uart_putchar>:

unsigned char USART_RX(){
	while ( !( UCSR0A & (1 << RXC0) ));
	
	return UDR0;	
}
 1b0:	cf 93       	push	r28
 1b2:	c8 2f       	mov	r28, r24
 1b4:	8a 30       	cpi	r24, 0x0A	; 10
 1b6:	19 f4       	brne	.+6      	; 0x1be <uart_putchar+0xe>
 1b8:	8d e0       	ldi	r24, 0x0D	; 13
 1ba:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <uart_putchar>
 1be:	5d 9b       	sbis	0x0b, 5	; 11
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <uart_putchar+0xe>
 1c2:	cc b9       	out	0x0c, r28	; 12
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <USART_Init>:
 1cc:	90 bd       	out	0x20, r25	; 32
 1ce:	89 b9       	out	0x09, r24	; 9
 1d0:	88 e1       	ldi	r24, 0x18	; 24
 1d2:	8a b9       	out	0x0a, r24	; 10
 1d4:	8a b1       	in	r24, 0x0a	; 10
 1d6:	80 68       	ori	r24, 0x80	; 128
 1d8:	8a b9       	out	0x0a, r24	; 10
 1da:	8e e8       	ldi	r24, 0x8E	; 142
 1dc:	80 bd       	out	0x20, r24	; 32
 1de:	08 95       	ret

000001e0 <xmem_init>:
{
	//set_bit(SFIOR, XMM2);
	//clear_bit(SFIOR, XMM1);
	//clear_bit(SFIOR, XMM0);
	//set_bit(MCUCR, SRE);
	MCUCR |= (1<< SRE); //THIS MFER
 1e0:	85 b7       	in	r24, 0x35	; 53
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<< XMM2);
 1e6:	80 b7       	in	r24, 0x30	; 48
 1e8:	80 62       	ori	r24, 0x20	; 32
 1ea:	80 bf       	out	0x30, r24	; 48
 1ec:	08 95       	ret

000001ee <xmem_write>:
}

void xmem_write (uint8_t data , uint16_t addr)
{

	stdout = &mystdout;
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	31 e0       	ldi	r19, 0x01	; 1
 1f2:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <__iob+0x3>
 1f6:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <__iob+0x2>
	volatile char * ext_mem = (char *) BASE_ADDRESS;
	ext_mem [addr]= data ;
 1fa:	fb 01       	movw	r30, r22
 1fc:	80 83       	st	Z, r24
	uint8_t retreived_value = ext_mem[addr];
 1fe:	80 81       	ld	r24, Z
 200:	08 95       	ret

00000202 <xmem_read>:
}

uint8_t xmem_read (uint16_t addr)
{
	volatile char * ext_mem = (char *) BASE_ADDRESS;
	uint8_t ret_val = ext_mem [addr];
 202:	fc 01       	movw	r30, r24
 204:	80 81       	ld	r24, Z
	return ret_val ;
 206:	08 95       	ret

00000208 <__vector_19>:
#include "OLED_driver.h"

uint8_t ADC_data [4];

ISR(USART0_RXC_vect)
{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
	char ReceivedByte;
	ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
 214:	8c b1       	in	r24, 0x0c	; 12
	UDR0 = ReceivedByte; // Echo back the received byte back to the computer
 216:	8c b9       	out	0x0c, r24	; 12
}
 218:	8f 91       	pop	r24
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <__vector_15>:

ISR(TIMER1_OVF_vect)
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	cf 92       	push	r12
 230:	df 92       	push	r13
 232:	ef 92       	push	r14
 234:	ff 92       	push	r15
 236:	2f 93       	push	r18
 238:	3f 93       	push	r19
 23a:	4f 93       	push	r20
 23c:	5f 93       	push	r21
 23e:	6f 93       	push	r22
 240:	7f 93       	push	r23
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
 246:	af 93       	push	r26
 248:	bf 93       	push	r27
 24a:	ef 93       	push	r30
 24c:	ff 93       	push	r31
	OCR1A = (dutyCircle/100.0)*ICR1;
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	48 ec       	ldi	r20, 0xC8	; 200
 254:	52 e4       	ldi	r21, 0x42	; 66
 256:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <__data_end>
 25a:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <__data_end+0x1>
 25e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end+0x2>
 262:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x3>
 266:	0e 94 25 02 	call	0x44a	; 0x44a <__divsf3>
 26a:	6b 01       	movw	r12, r22
 26c:	7c 01       	movw	r14, r24
 26e:	64 b5       	in	r22, 0x24	; 36
 270:	75 b5       	in	r23, 0x25	; 37
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 c6 02 	call	0x58c	; 0x58c <__floatunsisf>
 27a:	a7 01       	movw	r20, r14
 27c:	96 01       	movw	r18, r12
 27e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__mulsf3>
 282:	0e 94 97 02 	call	0x52e	; 0x52e <__fixunssfsi>
 286:	7b bd       	out	0x2b, r23	; 43
 288:	6a bd       	out	0x2a, r22	; 42
}
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	bf 91       	pop	r27
 290:	af 91       	pop	r26
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	7f 91       	pop	r23
 298:	6f 91       	pop	r22
 29a:	5f 91       	pop	r21
 29c:	4f 91       	pop	r20
 29e:	3f 91       	pop	r19
 2a0:	2f 91       	pop	r18
 2a2:	ff 90       	pop	r15
 2a4:	ef 90       	pop	r14
 2a6:	df 90       	pop	r13
 2a8:	cf 90       	pop	r12
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <__vector_3>:

ISR(INT2_vect)
{
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	2f 93       	push	r18
 2c0:	3f 93       	push	r19
 2c2:	4f 93       	push	r20
 2c4:	5f 93       	push	r21
 2c6:	6f 93       	push	r22
 2c8:	7f 93       	push	r23
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	af 93       	push	r26
 2d0:	bf 93       	push	r27
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
	ADC_read(ADC_data);
 2d6:	82 e1       	ldi	r24, 0x12	; 18
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 b6 00 	call	0x16c	; 0x16c <ADC_read>
	// xmem_write(0x52, 0x1400);

}
 2de:	ff 91       	pop	r31
 2e0:	ef 91       	pop	r30
 2e2:	bf 91       	pop	r27
 2e4:	af 91       	pop	r26
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	7f 91       	pop	r23
 2ec:	6f 91       	pop	r22
 2ee:	5f 91       	pop	r21
 2f0:	4f 91       	pop	r20
 2f2:	3f 91       	pop	r19
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <main>:
{
				float x_per;
				float y_per;
				pos_t position;
				int calibrated = 0;
				dutyCircle = 50;
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	a8 e4       	ldi	r26, 0x48	; 72
 306:	b2 e4       	ldi	r27, 0x42	; 66
 308:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 30c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
 310:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <__data_end+0x2>
 314:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <__data_end+0x3>
				(y_per) = 0;

	dutyCircle = 50;
	// ADC_data = {0,0,0,0};

	stdout = &mystdout;
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__iob+0x3>
 320:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__iob+0x2>

	USART_Init(UBRR);
 324:	8f e1       	ldi	r24, 0x1F	; 31
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 e6 00 	call	0x1cc	; 0x1cc <USART_Init>
		
	xmem_init();
 32c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <xmem_init>
		
	PWM_Init();
 330:	0e 94 57 00 	call	0xae	; 0xae <PWM_Init>
	ADC_init();
 334:	0e 94 a3 00 	call	0x146	; 0x146 <ADC_init>
		
	sei(); // Enable all interrupt
 338:	78 94       	sei
	int delay = 1;
	
	oled_init();
 33a:	0e 94 b6 01 	call	0x36c	; 0x36c <oled_init>
 33e:	8c ec       	ldi	r24, 0xCC	; 204
 340:	94 e0       	ldi	r25, 0x04	; 4
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <main+0x42>
 346:	00 c0       	rjmp	.+0      	; 0x348 <main+0x48>
 348:	00 00       	nop
	while(1)
	{
		//xmem_write(0xae, 0x1000); // display off
		// xmem_write(0xff, 0x1000);
		
		xmem_write(0xff, 0x1200);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	72 e1       	ldi	r23, 0x12	; 18
 34e:	8f ef       	ldi	r24, 0xFF	; 255
 350:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 354:	8c ec       	ldi	r24, 0xCC	; 204
 356:	94 e0       	ldi	r25, 0x04	; 4
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <main+0x58>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0x5e>
 35e:	00 00       	nop
		_delay_ms(delay);
		xmem_write(0x00, 0x1200); // display on
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	72 e1       	ldi	r23, 0x12	; 18
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 36a:	ef cf       	rjmp	.-34     	; 0x34a <main+0x4a>

0000036c <oled_init>:
#include "OLED_driver.h"

void oled_init()
{

	xmem_write(0xae, 0x1000); // display off
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	70 e1       	ldi	r23, 0x10	; 16
 370:	8e ea       	ldi	r24, 0xAE	; 174
 372:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0xa1, 0x1000); //segment remap
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	70 e1       	ldi	r23, 0x10	; 16
 37a:	81 ea       	ldi	r24, 0xA1	; 161
 37c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0xda, 0x1000); //common pads hardware: alternative
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	70 e1       	ldi	r23, 0x10	; 16
 384:	8a ed       	ldi	r24, 0xDA	; 218
 386:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0x12, 0x1000);
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	70 e1       	ldi	r23, 0x10	; 16
 38e:	82 e1       	ldi	r24, 0x12	; 18
 390:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0xc8, 0x1000); //common output scan direction:com63~com0
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	70 e1       	ldi	r23, 0x10	; 16
 398:	88 ec       	ldi	r24, 0xC8	; 200
 39a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0xa8, 0x1000); //multiplex ration mode:63
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	70 e1       	ldi	r23, 0x10	; 16
 3a2:	88 ea       	ldi	r24, 0xA8	; 168
 3a4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0x3f, 0x1000);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	70 e1       	ldi	r23, 0x10	; 16
 3ac:	8f e3       	ldi	r24, 0x3F	; 63
 3ae:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0xd5, 0x1000); //display divide ratio/osc. freq. mode
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	70 e1       	ldi	r23, 0x10	; 16
 3b6:	85 ed       	ldi	r24, 0xD5	; 213
 3b8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0x80, 0x1000);
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	70 e1       	ldi	r23, 0x10	; 16
 3c0:	80 e8       	ldi	r24, 0x80	; 128
 3c2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0x81, 0x1000); //contrast control
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	70 e1       	ldi	r23, 0x10	; 16
 3ca:	81 e8       	ldi	r24, 0x81	; 129
 3cc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0x50, 0x1000);
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	70 e1       	ldi	r23, 0x10	; 16
 3d4:	80 e5       	ldi	r24, 0x50	; 80
 3d6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0xd9, 0x1000); //set pre-charge period
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	70 e1       	ldi	r23, 0x10	; 16
 3de:	89 ed       	ldi	r24, 0xD9	; 217
 3e0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0x21, 0x1000);
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	70 e1       	ldi	r23, 0x10	; 16
 3e8:	81 e2       	ldi	r24, 0x21	; 33
 3ea:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0x20, 0x1000); //Set Memory Addressing Mode
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	70 e1       	ldi	r23, 0x10	; 16
 3f2:	80 e2       	ldi	r24, 0x20	; 32
 3f4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0x02, 0x1000);
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	70 e1       	ldi	r23, 0x10	; 16
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0xdb, 0x1000); //VCOM deselect level mode
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	70 e1       	ldi	r23, 0x10	; 16
 406:	8b ed       	ldi	r24, 0xDB	; 219
 408:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0x30, 0x1000);
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	70 e1       	ldi	r23, 0x10	; 16
 410:	80 e3       	ldi	r24, 0x30	; 48
 412:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0xad, 0x1000); //master configuration
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	70 e1       	ldi	r23, 0x10	; 16
 41a:	8d ea       	ldi	r24, 0xAD	; 173
 41c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0x00, 0x1000);
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	70 e1       	ldi	r23, 0x10	; 16
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0xa4, 0x1000); //out follows RAM content
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	70 e1       	ldi	r23, 0x10	; 16
 42e:	84 ea       	ldi	r24, 0xA4	; 164
 430:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	xmem_write(0xa6, 0x1000); //set normal display
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	70 e1       	ldi	r23, 0x10	; 16
 438:	86 ea       	ldi	r24, 0xA6	; 166
 43a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	//xmem_write(0xb0, 0x1000);
	//xmem_write(0x00, 0x1000);

	//xmem_write(0xa5, 0x1000);
	
	xmem_write(0xaf, 0x1000); // display on
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	70 e1       	ldi	r23, 0x10	; 16
 442:	8f ea       	ldi	r24, 0xAF	; 175
 444:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 448:	08 95       	ret

0000044a <__divsf3>:
 44a:	0e 94 39 02 	call	0x472	; 0x472 <__divsf3x>
 44e:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_round>
 452:	0e 94 13 03 	call	0x626	; 0x626 <__fp_pscB>
 456:	58 f0       	brcs	.+22     	; 0x46e <__divsf3+0x24>
 458:	0e 94 0c 03 	call	0x618	; 0x618 <__fp_pscA>
 45c:	40 f0       	brcs	.+16     	; 0x46e <__divsf3+0x24>
 45e:	29 f4       	brne	.+10     	; 0x46a <__divsf3+0x20>
 460:	5f 3f       	cpi	r21, 0xFF	; 255
 462:	29 f0       	breq	.+10     	; 0x46e <__divsf3+0x24>
 464:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_inf>
 468:	51 11       	cpse	r21, r1
 46a:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__fp_szero>
 46e:	0c 94 09 03 	jmp	0x612	; 0x612 <__fp_nan>

00000472 <__divsf3x>:
 472:	0e 94 2b 03 	call	0x656	; 0x656 <__fp_split3>
 476:	68 f3       	brcs	.-38     	; 0x452 <__divsf3+0x8>

00000478 <__divsf3_pse>:
 478:	99 23       	and	r25, r25
 47a:	b1 f3       	breq	.-20     	; 0x468 <__divsf3+0x1e>
 47c:	55 23       	and	r21, r21
 47e:	91 f3       	breq	.-28     	; 0x464 <__divsf3+0x1a>
 480:	95 1b       	sub	r25, r21
 482:	55 0b       	sbc	r21, r21
 484:	bb 27       	eor	r27, r27
 486:	aa 27       	eor	r26, r26
 488:	62 17       	cp	r22, r18
 48a:	73 07       	cpc	r23, r19
 48c:	84 07       	cpc	r24, r20
 48e:	38 f0       	brcs	.+14     	; 0x49e <__divsf3_pse+0x26>
 490:	9f 5f       	subi	r25, 0xFF	; 255
 492:	5f 4f       	sbci	r21, 0xFF	; 255
 494:	22 0f       	add	r18, r18
 496:	33 1f       	adc	r19, r19
 498:	44 1f       	adc	r20, r20
 49a:	aa 1f       	adc	r26, r26
 49c:	a9 f3       	breq	.-22     	; 0x488 <__divsf3_pse+0x10>
 49e:	35 d0       	rcall	.+106    	; 0x50a <__stack+0xb>
 4a0:	0e 2e       	mov	r0, r30
 4a2:	3a f0       	brmi	.+14     	; 0x4b2 <__divsf3_pse+0x3a>
 4a4:	e0 e8       	ldi	r30, 0x80	; 128
 4a6:	32 d0       	rcall	.+100    	; 0x50c <__stack+0xd>
 4a8:	91 50       	subi	r25, 0x01	; 1
 4aa:	50 40       	sbci	r21, 0x00	; 0
 4ac:	e6 95       	lsr	r30
 4ae:	00 1c       	adc	r0, r0
 4b0:	ca f7       	brpl	.-14     	; 0x4a4 <__divsf3_pse+0x2c>
 4b2:	2b d0       	rcall	.+86     	; 0x50a <__stack+0xb>
 4b4:	fe 2f       	mov	r31, r30
 4b6:	29 d0       	rcall	.+82     	; 0x50a <__stack+0xb>
 4b8:	66 0f       	add	r22, r22
 4ba:	77 1f       	adc	r23, r23
 4bc:	88 1f       	adc	r24, r24
 4be:	bb 1f       	adc	r27, r27
 4c0:	26 17       	cp	r18, r22
 4c2:	37 07       	cpc	r19, r23
 4c4:	48 07       	cpc	r20, r24
 4c6:	ab 07       	cpc	r26, r27
 4c8:	b0 e8       	ldi	r27, 0x80	; 128
 4ca:	09 f0       	breq	.+2      	; 0x4ce <__divsf3_pse+0x56>
 4cc:	bb 0b       	sbc	r27, r27
 4ce:	80 2d       	mov	r24, r0
 4d0:	bf 01       	movw	r22, r30
 4d2:	ff 27       	eor	r31, r31
 4d4:	93 58       	subi	r25, 0x83	; 131
 4d6:	5f 4f       	sbci	r21, 0xFF	; 255
 4d8:	3a f0       	brmi	.+14     	; 0x4e8 <__divsf3_pse+0x70>
 4da:	9e 3f       	cpi	r25, 0xFE	; 254
 4dc:	51 05       	cpc	r21, r1
 4de:	78 f0       	brcs	.+30     	; 0x4fe <__divsf3_pse+0x86>
 4e0:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_inf>
 4e4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__fp_szero>
 4e8:	5f 3f       	cpi	r21, 0xFF	; 255
 4ea:	e4 f3       	brlt	.-8      	; 0x4e4 <__divsf3_pse+0x6c>
 4ec:	98 3e       	cpi	r25, 0xE8	; 232
 4ee:	d4 f3       	brlt	.-12     	; 0x4e4 <__divsf3_pse+0x6c>
 4f0:	86 95       	lsr	r24
 4f2:	77 95       	ror	r23
 4f4:	67 95       	ror	r22
 4f6:	b7 95       	ror	r27
 4f8:	f7 95       	ror	r31
 4fa:	9f 5f       	subi	r25, 0xFF	; 255
 4fc:	c9 f7       	brne	.-14     	; 0x4f0 <__divsf3_pse+0x78>
 4fe:	88 0f       	add	r24, r24
 500:	91 1d       	adc	r25, r1
 502:	96 95       	lsr	r25
 504:	87 95       	ror	r24
 506:	97 f9       	bld	r25, 7
 508:	08 95       	ret
 50a:	e1 e0       	ldi	r30, 0x01	; 1
 50c:	66 0f       	add	r22, r22
 50e:	77 1f       	adc	r23, r23
 510:	88 1f       	adc	r24, r24
 512:	bb 1f       	adc	r27, r27
 514:	62 17       	cp	r22, r18
 516:	73 07       	cpc	r23, r19
 518:	84 07       	cpc	r24, r20
 51a:	ba 07       	cpc	r27, r26
 51c:	20 f0       	brcs	.+8      	; 0x526 <__stack+0x27>
 51e:	62 1b       	sub	r22, r18
 520:	73 0b       	sbc	r23, r19
 522:	84 0b       	sbc	r24, r20
 524:	ba 0b       	sbc	r27, r26
 526:	ee 1f       	adc	r30, r30
 528:	88 f7       	brcc	.-30     	; 0x50c <__stack+0xd>
 52a:	e0 95       	com	r30
 52c:	08 95       	ret

0000052e <__fixunssfsi>:
 52e:	0e 94 33 03 	call	0x666	; 0x666 <__fp_splitA>
 532:	88 f0       	brcs	.+34     	; 0x556 <__fixunssfsi+0x28>
 534:	9f 57       	subi	r25, 0x7F	; 127
 536:	98 f0       	brcs	.+38     	; 0x55e <__fixunssfsi+0x30>
 538:	b9 2f       	mov	r27, r25
 53a:	99 27       	eor	r25, r25
 53c:	b7 51       	subi	r27, 0x17	; 23
 53e:	b0 f0       	brcs	.+44     	; 0x56c <__fixunssfsi+0x3e>
 540:	e1 f0       	breq	.+56     	; 0x57a <__fixunssfsi+0x4c>
 542:	66 0f       	add	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	88 1f       	adc	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	1a f0       	brmi	.+6      	; 0x552 <__fixunssfsi+0x24>
 54c:	ba 95       	dec	r27
 54e:	c9 f7       	brne	.-14     	; 0x542 <__fixunssfsi+0x14>
 550:	14 c0       	rjmp	.+40     	; 0x57a <__fixunssfsi+0x4c>
 552:	b1 30       	cpi	r27, 0x01	; 1
 554:	91 f0       	breq	.+36     	; 0x57a <__fixunssfsi+0x4c>
 556:	0e 94 4d 03 	call	0x69a	; 0x69a <__fp_zero>
 55a:	b1 e0       	ldi	r27, 0x01	; 1
 55c:	08 95       	ret
 55e:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_zero>
 562:	67 2f       	mov	r22, r23
 564:	78 2f       	mov	r23, r24
 566:	88 27       	eor	r24, r24
 568:	b8 5f       	subi	r27, 0xF8	; 248
 56a:	39 f0       	breq	.+14     	; 0x57a <__fixunssfsi+0x4c>
 56c:	b9 3f       	cpi	r27, 0xF9	; 249
 56e:	cc f3       	brlt	.-14     	; 0x562 <__fixunssfsi+0x34>
 570:	86 95       	lsr	r24
 572:	77 95       	ror	r23
 574:	67 95       	ror	r22
 576:	b3 95       	inc	r27
 578:	d9 f7       	brne	.-10     	; 0x570 <__fixunssfsi+0x42>
 57a:	3e f4       	brtc	.+14     	; 0x58a <__fixunssfsi+0x5c>
 57c:	90 95       	com	r25
 57e:	80 95       	com	r24
 580:	70 95       	com	r23
 582:	61 95       	neg	r22
 584:	7f 4f       	sbci	r23, 0xFF	; 255
 586:	8f 4f       	sbci	r24, 0xFF	; 255
 588:	9f 4f       	sbci	r25, 0xFF	; 255
 58a:	08 95       	ret

0000058c <__floatunsisf>:
 58c:	e8 94       	clt
 58e:	09 c0       	rjmp	.+18     	; 0x5a2 <__floatsisf+0x12>

00000590 <__floatsisf>:
 590:	97 fb       	bst	r25, 7
 592:	3e f4       	brtc	.+14     	; 0x5a2 <__floatsisf+0x12>
 594:	90 95       	com	r25
 596:	80 95       	com	r24
 598:	70 95       	com	r23
 59a:	61 95       	neg	r22
 59c:	7f 4f       	sbci	r23, 0xFF	; 255
 59e:	8f 4f       	sbci	r24, 0xFF	; 255
 5a0:	9f 4f       	sbci	r25, 0xFF	; 255
 5a2:	99 23       	and	r25, r25
 5a4:	a9 f0       	breq	.+42     	; 0x5d0 <__floatsisf+0x40>
 5a6:	f9 2f       	mov	r31, r25
 5a8:	96 e9       	ldi	r25, 0x96	; 150
 5aa:	bb 27       	eor	r27, r27
 5ac:	93 95       	inc	r25
 5ae:	f6 95       	lsr	r31
 5b0:	87 95       	ror	r24
 5b2:	77 95       	ror	r23
 5b4:	67 95       	ror	r22
 5b6:	b7 95       	ror	r27
 5b8:	f1 11       	cpse	r31, r1
 5ba:	f8 cf       	rjmp	.-16     	; 0x5ac <__floatsisf+0x1c>
 5bc:	fa f4       	brpl	.+62     	; 0x5fc <__floatsisf+0x6c>
 5be:	bb 0f       	add	r27, r27
 5c0:	11 f4       	brne	.+4      	; 0x5c6 <__floatsisf+0x36>
 5c2:	60 ff       	sbrs	r22, 0
 5c4:	1b c0       	rjmp	.+54     	; 0x5fc <__floatsisf+0x6c>
 5c6:	6f 5f       	subi	r22, 0xFF	; 255
 5c8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ca:	8f 4f       	sbci	r24, 0xFF	; 255
 5cc:	9f 4f       	sbci	r25, 0xFF	; 255
 5ce:	16 c0       	rjmp	.+44     	; 0x5fc <__floatsisf+0x6c>
 5d0:	88 23       	and	r24, r24
 5d2:	11 f0       	breq	.+4      	; 0x5d8 <__floatsisf+0x48>
 5d4:	96 e9       	ldi	r25, 0x96	; 150
 5d6:	11 c0       	rjmp	.+34     	; 0x5fa <__floatsisf+0x6a>
 5d8:	77 23       	and	r23, r23
 5da:	21 f0       	breq	.+8      	; 0x5e4 <__floatsisf+0x54>
 5dc:	9e e8       	ldi	r25, 0x8E	; 142
 5de:	87 2f       	mov	r24, r23
 5e0:	76 2f       	mov	r23, r22
 5e2:	05 c0       	rjmp	.+10     	; 0x5ee <__floatsisf+0x5e>
 5e4:	66 23       	and	r22, r22
 5e6:	71 f0       	breq	.+28     	; 0x604 <__floatsisf+0x74>
 5e8:	96 e8       	ldi	r25, 0x86	; 134
 5ea:	86 2f       	mov	r24, r22
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	2a f0       	brmi	.+10     	; 0x5fc <__floatsisf+0x6c>
 5f2:	9a 95       	dec	r25
 5f4:	66 0f       	add	r22, r22
 5f6:	77 1f       	adc	r23, r23
 5f8:	88 1f       	adc	r24, r24
 5fa:	da f7       	brpl	.-10     	; 0x5f2 <__floatsisf+0x62>
 5fc:	88 0f       	add	r24, r24
 5fe:	96 95       	lsr	r25
 600:	87 95       	ror	r24
 602:	97 f9       	bld	r25, 7
 604:	08 95       	ret

00000606 <__fp_inf>:
 606:	97 f9       	bld	r25, 7
 608:	9f 67       	ori	r25, 0x7F	; 127
 60a:	80 e8       	ldi	r24, 0x80	; 128
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	08 95       	ret

00000612 <__fp_nan>:
 612:	9f ef       	ldi	r25, 0xFF	; 255
 614:	80 ec       	ldi	r24, 0xC0	; 192
 616:	08 95       	ret

00000618 <__fp_pscA>:
 618:	00 24       	eor	r0, r0
 61a:	0a 94       	dec	r0
 61c:	16 16       	cp	r1, r22
 61e:	17 06       	cpc	r1, r23
 620:	18 06       	cpc	r1, r24
 622:	09 06       	cpc	r0, r25
 624:	08 95       	ret

00000626 <__fp_pscB>:
 626:	00 24       	eor	r0, r0
 628:	0a 94       	dec	r0
 62a:	12 16       	cp	r1, r18
 62c:	13 06       	cpc	r1, r19
 62e:	14 06       	cpc	r1, r20
 630:	05 06       	cpc	r0, r21
 632:	08 95       	ret

00000634 <__fp_round>:
 634:	09 2e       	mov	r0, r25
 636:	03 94       	inc	r0
 638:	00 0c       	add	r0, r0
 63a:	11 f4       	brne	.+4      	; 0x640 <__fp_round+0xc>
 63c:	88 23       	and	r24, r24
 63e:	52 f0       	brmi	.+20     	; 0x654 <__fp_round+0x20>
 640:	bb 0f       	add	r27, r27
 642:	40 f4       	brcc	.+16     	; 0x654 <__fp_round+0x20>
 644:	bf 2b       	or	r27, r31
 646:	11 f4       	brne	.+4      	; 0x64c <__fp_round+0x18>
 648:	60 ff       	sbrs	r22, 0
 64a:	04 c0       	rjmp	.+8      	; 0x654 <__fp_round+0x20>
 64c:	6f 5f       	subi	r22, 0xFF	; 255
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	8f 4f       	sbci	r24, 0xFF	; 255
 652:	9f 4f       	sbci	r25, 0xFF	; 255
 654:	08 95       	ret

00000656 <__fp_split3>:
 656:	57 fd       	sbrc	r21, 7
 658:	90 58       	subi	r25, 0x80	; 128
 65a:	44 0f       	add	r20, r20
 65c:	55 1f       	adc	r21, r21
 65e:	59 f0       	breq	.+22     	; 0x676 <__fp_splitA+0x10>
 660:	5f 3f       	cpi	r21, 0xFF	; 255
 662:	71 f0       	breq	.+28     	; 0x680 <__fp_splitA+0x1a>
 664:	47 95       	ror	r20

00000666 <__fp_splitA>:
 666:	88 0f       	add	r24, r24
 668:	97 fb       	bst	r25, 7
 66a:	99 1f       	adc	r25, r25
 66c:	61 f0       	breq	.+24     	; 0x686 <__fp_splitA+0x20>
 66e:	9f 3f       	cpi	r25, 0xFF	; 255
 670:	79 f0       	breq	.+30     	; 0x690 <__fp_splitA+0x2a>
 672:	87 95       	ror	r24
 674:	08 95       	ret
 676:	12 16       	cp	r1, r18
 678:	13 06       	cpc	r1, r19
 67a:	14 06       	cpc	r1, r20
 67c:	55 1f       	adc	r21, r21
 67e:	f2 cf       	rjmp	.-28     	; 0x664 <__fp_split3+0xe>
 680:	46 95       	lsr	r20
 682:	f1 df       	rcall	.-30     	; 0x666 <__fp_splitA>
 684:	08 c0       	rjmp	.+16     	; 0x696 <__fp_splitA+0x30>
 686:	16 16       	cp	r1, r22
 688:	17 06       	cpc	r1, r23
 68a:	18 06       	cpc	r1, r24
 68c:	99 1f       	adc	r25, r25
 68e:	f1 cf       	rjmp	.-30     	; 0x672 <__fp_splitA+0xc>
 690:	86 95       	lsr	r24
 692:	71 05       	cpc	r23, r1
 694:	61 05       	cpc	r22, r1
 696:	08 94       	sec
 698:	08 95       	ret

0000069a <__fp_zero>:
 69a:	e8 94       	clt

0000069c <__fp_szero>:
 69c:	bb 27       	eor	r27, r27
 69e:	66 27       	eor	r22, r22
 6a0:	77 27       	eor	r23, r23
 6a2:	cb 01       	movw	r24, r22
 6a4:	97 f9       	bld	r25, 7
 6a6:	08 95       	ret

000006a8 <__mulsf3>:
 6a8:	0e 94 67 03 	call	0x6ce	; 0x6ce <__mulsf3x>
 6ac:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_round>
 6b0:	0e 94 0c 03 	call	0x618	; 0x618 <__fp_pscA>
 6b4:	38 f0       	brcs	.+14     	; 0x6c4 <__mulsf3+0x1c>
 6b6:	0e 94 13 03 	call	0x626	; 0x626 <__fp_pscB>
 6ba:	20 f0       	brcs	.+8      	; 0x6c4 <__mulsf3+0x1c>
 6bc:	95 23       	and	r25, r21
 6be:	11 f0       	breq	.+4      	; 0x6c4 <__mulsf3+0x1c>
 6c0:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_inf>
 6c4:	0c 94 09 03 	jmp	0x612	; 0x612 <__fp_nan>
 6c8:	11 24       	eor	r1, r1
 6ca:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__fp_szero>

000006ce <__mulsf3x>:
 6ce:	0e 94 2b 03 	call	0x656	; 0x656 <__fp_split3>
 6d2:	70 f3       	brcs	.-36     	; 0x6b0 <__mulsf3+0x8>

000006d4 <__mulsf3_pse>:
 6d4:	95 9f       	mul	r25, r21
 6d6:	c1 f3       	breq	.-16     	; 0x6c8 <__mulsf3+0x20>
 6d8:	95 0f       	add	r25, r21
 6da:	50 e0       	ldi	r21, 0x00	; 0
 6dc:	55 1f       	adc	r21, r21
 6de:	62 9f       	mul	r22, r18
 6e0:	f0 01       	movw	r30, r0
 6e2:	72 9f       	mul	r23, r18
 6e4:	bb 27       	eor	r27, r27
 6e6:	f0 0d       	add	r31, r0
 6e8:	b1 1d       	adc	r27, r1
 6ea:	63 9f       	mul	r22, r19
 6ec:	aa 27       	eor	r26, r26
 6ee:	f0 0d       	add	r31, r0
 6f0:	b1 1d       	adc	r27, r1
 6f2:	aa 1f       	adc	r26, r26
 6f4:	64 9f       	mul	r22, r20
 6f6:	66 27       	eor	r22, r22
 6f8:	b0 0d       	add	r27, r0
 6fa:	a1 1d       	adc	r26, r1
 6fc:	66 1f       	adc	r22, r22
 6fe:	82 9f       	mul	r24, r18
 700:	22 27       	eor	r18, r18
 702:	b0 0d       	add	r27, r0
 704:	a1 1d       	adc	r26, r1
 706:	62 1f       	adc	r22, r18
 708:	73 9f       	mul	r23, r19
 70a:	b0 0d       	add	r27, r0
 70c:	a1 1d       	adc	r26, r1
 70e:	62 1f       	adc	r22, r18
 710:	83 9f       	mul	r24, r19
 712:	a0 0d       	add	r26, r0
 714:	61 1d       	adc	r22, r1
 716:	22 1f       	adc	r18, r18
 718:	74 9f       	mul	r23, r20
 71a:	33 27       	eor	r19, r19
 71c:	a0 0d       	add	r26, r0
 71e:	61 1d       	adc	r22, r1
 720:	23 1f       	adc	r18, r19
 722:	84 9f       	mul	r24, r20
 724:	60 0d       	add	r22, r0
 726:	21 1d       	adc	r18, r1
 728:	82 2f       	mov	r24, r18
 72a:	76 2f       	mov	r23, r22
 72c:	6a 2f       	mov	r22, r26
 72e:	11 24       	eor	r1, r1
 730:	9f 57       	subi	r25, 0x7F	; 127
 732:	50 40       	sbci	r21, 0x00	; 0
 734:	9a f0       	brmi	.+38     	; 0x75c <__mulsf3_pse+0x88>
 736:	f1 f0       	breq	.+60     	; 0x774 <__mulsf3_pse+0xa0>
 738:	88 23       	and	r24, r24
 73a:	4a f0       	brmi	.+18     	; 0x74e <__mulsf3_pse+0x7a>
 73c:	ee 0f       	add	r30, r30
 73e:	ff 1f       	adc	r31, r31
 740:	bb 1f       	adc	r27, r27
 742:	66 1f       	adc	r22, r22
 744:	77 1f       	adc	r23, r23
 746:	88 1f       	adc	r24, r24
 748:	91 50       	subi	r25, 0x01	; 1
 74a:	50 40       	sbci	r21, 0x00	; 0
 74c:	a9 f7       	brne	.-22     	; 0x738 <__mulsf3_pse+0x64>
 74e:	9e 3f       	cpi	r25, 0xFE	; 254
 750:	51 05       	cpc	r21, r1
 752:	80 f0       	brcs	.+32     	; 0x774 <__mulsf3_pse+0xa0>
 754:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_inf>
 758:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__fp_szero>
 75c:	5f 3f       	cpi	r21, 0xFF	; 255
 75e:	e4 f3       	brlt	.-8      	; 0x758 <__mulsf3_pse+0x84>
 760:	98 3e       	cpi	r25, 0xE8	; 232
 762:	d4 f3       	brlt	.-12     	; 0x758 <__mulsf3_pse+0x84>
 764:	86 95       	lsr	r24
 766:	77 95       	ror	r23
 768:	67 95       	ror	r22
 76a:	b7 95       	ror	r27
 76c:	f7 95       	ror	r31
 76e:	e7 95       	ror	r30
 770:	9f 5f       	subi	r25, 0xFF	; 255
 772:	c1 f7       	brne	.-16     	; 0x764 <__mulsf3_pse+0x90>
 774:	fe 2b       	or	r31, r30
 776:	88 0f       	add	r24, r24
 778:	91 1d       	adc	r25, r1
 77a:	96 95       	lsr	r25
 77c:	87 95       	ror	r24
 77e:	97 f9       	bld	r25, 7
 780:	08 95       	ret

00000782 <_exit>:
 782:	f8 94       	cli

00000784 <__stop_program>:
 784:	ff cf       	rjmp	.-2      	; 0x784 <__stop_program>
