
PongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000bba  00000c4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800142  00800142  00000c90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b43  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001375  00000000  00000000  00003a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001440  00000000  00000000  00004dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000580  00000000  00000000  0000620c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ba  00000000  00000000  0000678c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fdd  00000000  00000000  00007046  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00008023  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 b3 01 	jmp	0x366	; 0x366 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_15>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea eb       	ldi	r30, 0xBA	; 186
  84:	fb e0       	ldi	r31, 0x0B	; 11
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 34       	cpi	r26, 0x42	; 66
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a2 e4       	ldi	r26, 0x42	; 66
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 35       	cpi	r26, 0x54	; 84
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 c7 01 	call	0x38e	; 0x38e <main>
  a6:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <PWM_Init>:
#include "ADC_driver.h"

void PWM_Init()
{
  ae:	cf 92       	push	r12
  b0:	df 92       	push	r13
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
	set_bit(DDRD, DDD5);
  b6:	81 b3       	in	r24, 0x11	; 17
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	81 bb       	out	0x11, r24	; 17
	
	/* Fast PWM, TOP value = ICR1 */
	set_bit(TCCR1B, WGM13);
  bc:	8e b5       	in	r24, 0x2e	; 46
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	8e bd       	out	0x2e, r24	; 46
	set_bit(TCCR1B, WGM12);
  c2:	8e b5       	in	r24, 0x2e	; 46
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	8e bd       	out	0x2e, r24	; 46
	set_bit(TCCR1A, WGM11);
  c8:	8f b5       	in	r24, 0x2f	; 47
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	8f bd       	out	0x2f, r24	; 47
	clear_bit(TCCR1A, WGM10);
  ce:	8f b5       	in	r24, 0x2f	; 47
  d0:	8e 7f       	andi	r24, 0xFE	; 254
  d2:	8f bd       	out	0x2f, r24	; 47
	
	set_bit(TCCR1A, COM1A1);
  d4:	8f b5       	in	r24, 0x2f	; 47
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	8f bd       	out	0x2f, r24	; 47
	clear_bit(TCCR1A, COM1A0);
  da:	8f b5       	in	r24, 0x2f	; 47
  dc:	8f 7b       	andi	r24, 0xBF	; 191
  de:	8f bd       	out	0x2f, r24	; 47
	
	set_bit(TIMSK, TOIE1);
  e0:	89 b7       	in	r24, 0x39	; 57
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	89 bf       	out	0x39, r24	; 57
	
	/* Configuration of the width of the PWM */
	
	ICR1 = 1;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	95 bd       	out	0x25, r25	; 37
  ec:	84 bd       	out	0x24, r24	; 36
		
	OCR1A = (dutyCircle/100.0)*ICR1;
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	48 ec       	ldi	r20, 0xC8	; 200
  f4:	52 e4       	ldi	r21, 0x42	; 66
  f6:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <dutyCircle>
  fa:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <dutyCircle+0x1>
  fe:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <dutyCircle+0x2>
 102:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <dutyCircle+0x3>
 106:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__divsf3>
 10a:	6b 01       	movw	r12, r22
 10c:	7c 01       	movw	r14, r24
 10e:	64 b5       	in	r22, 0x24	; 36
 110:	75 b5       	in	r23, 0x25	; 37
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 87 04 	call	0x90e	; 0x90e <__floatunsisf>
 11a:	a7 01       	movw	r20, r14
 11c:	96 01       	movw	r18, r12
 11e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__mulsf3>
 122:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fixunssfsi>
 126:	7b bd       	out	0x2b, r23	; 43
 128:	6a bd       	out	0x2a, r22	; 42
	
	/*  */
	
	clear_bit(TCCR1B, CS12);
 12a:	8e b5       	in	r24, 0x2e	; 46
 12c:	8b 7f       	andi	r24, 0xFB	; 251
 12e:	8e bd       	out	0x2e, r24	; 46
	clear_bit(TCCR1B, CS11);
 130:	8e b5       	in	r24, 0x2e	; 46
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	8e bd       	out	0x2e, r24	; 46
	set_bit(TCCR1B, CS10);
 136:	8e b5       	in	r24, 0x2e	; 46
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	8e bd       	out	0x2e, r24	; 46
}
 13c:	ff 90       	pop	r15
 13e:	ef 90       	pop	r14
 140:	df 90       	pop	r13
 142:	cf 90       	pop	r12
 144:	08 95       	ret

00000146 <ADC_init>:


void ADC_init(void)
{
	//set clock out on MC
	set_bit(DDRD, DDD5);
 146:	81 b3       	in	r24, 0x11	; 17
 148:	80 62       	ori	r24, 0x20	; 32
 14a:	81 bb       	out	0x11, r24	; 17
	set_bit(DDRD, DDD6); /* Enable WR output signal */
 14c:	81 b3       	in	r24, 0x11	; 17
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	81 bb       	out	0x11, r24	; 17
	set_bit(DDRD, DDD7); /* Enable RD output signal */
 152:	81 b3       	in	r24, 0x11	; 17
 154:	80 68       	ori	r24, 0x80	; 128
 156:	81 bb       	out	0x11, r24	; 17
	
	clear_bit(DDRE, DDE0); /* Set pin PE0 as INPUT to use the INT2 Interrupt for BUSY signal from ADC */
 158:	86 b1       	in	r24, 0x06	; 6
 15a:	8e 7f       	andi	r24, 0xFE	; 254
 15c:	86 b9       	out	0x06, r24	; 6
	
	set_bit(EMCUCR, ISC2); /* Trigger interrupt on rising edge */
 15e:	86 b7       	in	r24, 0x36	; 54
 160:	81 60       	ori	r24, 0x01	; 1
 162:	86 bf       	out	0x36, r24	; 54
	set_bit(GICR, INT2); /* Enable INT2 interrupt */ 
 164:	8b b7       	in	r24, 0x3b	; 59
 166:	80 62       	ori	r24, 0x20	; 32
 168:	8b bf       	out	0x3b, r24	; 59
 16a:	08 95       	ret

0000016c <ADC_read>:
}

void ADC_read(uint8_t* ADC_data)
{
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	7c 01       	movw	r14, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	00 00       	nop
	
	// uint8_t ADC_data [4]= {0,0,0,0};

	_delay_ms(t_BRD);
	
	for(int i = 0; i<channels;++i)
 17c:	c0 e0       	ldi	r28, 0x00	; 0
 17e:	d0 e0       	ldi	r29, 0x00	; 0
 180:	0d c0       	rjmp	.+26     	; 0x19c <ADC_read+0x30>
	{
		ADC_data[i] = xmem_read(0x1700);
 182:	87 01       	movw	r16, r14
 184:	0c 0f       	add	r16, r28
 186:	1d 1f       	adc	r17, r29
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	97 e1       	ldi	r25, 0x17	; 23
 18c:	0e 94 01 01 	call	0x202	; 0x202 <xmem_read>
 190:	f8 01       	movw	r30, r16
 192:	80 83       	st	Z, r24
 194:	f2 e0       	ldi	r31, 0x02	; 2
 196:	fa 95       	dec	r31
 198:	f1 f7       	brne	.-4      	; 0x196 <ADC_read+0x2a>
	
	// uint8_t ADC_data [4]= {0,0,0,0};

	_delay_ms(t_BRD);
	
	for(int i = 0; i<channels;++i)
 19a:	21 96       	adiw	r28, 0x01	; 1
 19c:	c4 30       	cpi	r28, 0x04	; 4
 19e:	d1 05       	cpc	r29, r1
 1a0:	84 f3       	brlt	.-32     	; 0x182 <ADC_read+0x16>
	
	}
	
	//printf( "ADC_data[%d] = %d, ADC_data[%d] = %d\n", 0, (int)ADC_data [0],3, (int)ADC_data [3]);

}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	ff 90       	pop	r15
 1ac:	ef 90       	pop	r14
 1ae:	08 95       	ret

000001b0 <uart_putchar>:

unsigned char USART_RX(){
	while ( !( UCSR0A & (1 << RXC0) ));
	
	return UDR0;	
}
 1b0:	cf 93       	push	r28
 1b2:	c8 2f       	mov	r28, r24
 1b4:	8a 30       	cpi	r24, 0x0A	; 10
 1b6:	19 f4       	brne	.+6      	; 0x1be <uart_putchar+0xe>
 1b8:	8d e0       	ldi	r24, 0x0D	; 13
 1ba:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <uart_putchar>
 1be:	5d 9b       	sbis	0x0b, 5	; 11
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <uart_putchar+0xe>
 1c2:	cc b9       	out	0x0c, r28	; 12
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <USART_Init>:
 1cc:	90 bd       	out	0x20, r25	; 32
 1ce:	89 b9       	out	0x09, r24	; 9
 1d0:	88 e1       	ldi	r24, 0x18	; 24
 1d2:	8a b9       	out	0x0a, r24	; 10
 1d4:	8a b1       	in	r24, 0x0a	; 10
 1d6:	80 68       	ori	r24, 0x80	; 128
 1d8:	8a b9       	out	0x0a, r24	; 10
 1da:	8e e8       	ldi	r24, 0x8E	; 142
 1dc:	80 bd       	out	0x20, r24	; 32
 1de:	08 95       	ret

000001e0 <xmem_init>:
{
	//set_bit(SFIOR, XMM2);
	//clear_bit(SFIOR, XMM1);
	//clear_bit(SFIOR, XMM0);
	//set_bit(MCUCR, SRE);
	MCUCR |= (1<< SRE); //THIS MFER
 1e0:	85 b7       	in	r24, 0x35	; 53
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<< XMM2);
 1e6:	80 b7       	in	r24, 0x30	; 48
 1e8:	80 62       	ori	r24, 0x20	; 32
 1ea:	80 bf       	out	0x30, r24	; 48
 1ec:	08 95       	ret

000001ee <xmem_write>:
}

void xmem_write (uint8_t data , uint16_t addr)
{

	stdout = &mystdout;
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	31 e0       	ldi	r19, 0x01	; 1
 1f2:	30 93 51 01 	sts	0x0151, r19	; 0x800151 <__iob+0x3>
 1f6:	20 93 50 01 	sts	0x0150, r18	; 0x800150 <__iob+0x2>
	volatile char * ext_mem = (char *) BASE_ADDRESS;
	ext_mem [addr]= data ;
 1fa:	fb 01       	movw	r30, r22
 1fc:	80 83       	st	Z, r24
	uint8_t retreived_value = ext_mem[addr];
 1fe:	80 81       	ld	r24, Z
 200:	08 95       	ret

00000202 <xmem_read>:
}

uint8_t xmem_read (uint16_t addr)
{
	volatile char * ext_mem = (char *) BASE_ADDRESS;
	uint8_t ret_val = ext_mem [addr];
 202:	fc 01       	movw	r30, r24
 204:	80 81       	ld	r24, Z
	return ret_val ;
}
 206:	08 95       	ret

00000208 <pushButton_init>:

void pushButton_init()
{
	clear_bit(DDRD, DDD2); // set PD2 as Input to use the INT0 Interrupt for Joystick button
 208:	81 b3       	in	r24, 0x11	; 17
 20a:	8b 7f       	andi	r24, 0xFB	; 251
 20c:	81 bb       	out	0x11, r24	; 17
	
	set_bit(PORTD, DDD2);  // Set pull-up resistor ON -> high level on input
 20e:	82 b3       	in	r24, 0x12	; 18
 210:	84 60       	ori	r24, 0x04	; 4
 212:	82 bb       	out	0x12, r24	; 18
	
	clear_bit(MCUCR, ISC00); /* Trigger interrupt on falling edge */
 214:	85 b7       	in	r24, 0x35	; 53
 216:	8e 7f       	andi	r24, 0xFE	; 254
 218:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC01);
 21a:	85 b7       	in	r24, 0x35	; 53
 21c:	8d 7f       	andi	r24, 0xFD	; 253
 21e:	85 bf       	out	0x35, r24	; 53
	
	set_bit(GICR, INT0); /* Enable INT0 interrupt */
 220:	8b b7       	in	r24, 0x3b	; 59
 222:	80 64       	ori	r24, 0x40	; 64
 224:	8b bf       	out	0x3b, r24	; 59
 226:	08 95       	ret

00000228 <can_message_send>:
#include "CAN.h"

void can_message_send(can_message *message)
{
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	8c 01       	movw	r16, r24
	/*
	mcp2515_write(TXB0SIDL, (message->id<<5);
	mcp2515_write(TXB0SIDH, (message->id & 0x0F));
	*/
	mcp2515_write(TXB0DLC, message->data_length);
 230:	fc 01       	movw	r30, r24
 232:	62 81       	ldd	r22, Z+2	; 0x02
 234:	85 e3       	ldi	r24, 0x35	; 53
 236:	0e 94 4b 02 	call	0x496	; 0x496 <mcp2515_write>
	
	mcp2515_bit_modify(TXB0SIDL, 0xE0, message->id<<5);
 23a:	f8 01       	movw	r30, r16
 23c:	40 81       	ld	r20, Z
 23e:	42 95       	swap	r20
 240:	44 0f       	add	r20, r20
 242:	40 7e       	andi	r20, 0xE0	; 224
 244:	60 ee       	ldi	r22, 0xE0	; 224
 246:	82 e3       	ldi	r24, 0x32	; 50
 248:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <mcp2515_bit_modify>
	mcp2515_bit_modify(TXB0SIDH, 0xFF, message->id>>3);
 24c:	f8 01       	movw	r30, r16
 24e:	40 81       	ld	r20, Z
 250:	51 81       	ldd	r21, Z+1	; 0x01
 252:	56 95       	lsr	r21
 254:	47 95       	ror	r20
 256:	56 95       	lsr	r21
 258:	47 95       	ror	r20
 25a:	56 95       	lsr	r21
 25c:	47 95       	ror	r20
 25e:	6f ef       	ldi	r22, 0xFF	; 255
 260:	81 e3       	ldi	r24, 0x31	; 49
 262:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <mcp2515_bit_modify>
	uint8_t i;
	for (i = 0; i < message->data_length ; i ++)
 266:	c0 e0       	ldi	r28, 0x00	; 0
 268:	09 c0       	rjmp	.+18     	; 0x27c <can_message_send+0x54>
	{
		mcp2515_write(TXB0D0+i, message->data[i]); 
 26a:	f8 01       	movw	r30, r16
 26c:	ec 0f       	add	r30, r28
 26e:	f1 1d       	adc	r31, r1
 270:	63 81       	ldd	r22, Z+3	; 0x03
 272:	86 e3       	ldi	r24, 0x36	; 54
 274:	8c 0f       	add	r24, r28
 276:	0e 94 4b 02 	call	0x496	; 0x496 <mcp2515_write>
	mcp2515_write(TXB0DLC, message->data_length);
	
	mcp2515_bit_modify(TXB0SIDL, 0xE0, message->id<<5);
	mcp2515_bit_modify(TXB0SIDH, 0xFF, message->id>>3);
	uint8_t i;
	for (i = 0; i < message->data_length ; i ++)
 27a:	cf 5f       	subi	r28, 0xFF	; 255
 27c:	f8 01       	movw	r30, r16
 27e:	82 81       	ldd	r24, Z+2	; 0x02
 280:	c8 17       	cp	r28, r24
 282:	98 f3       	brcs	.-26     	; 0x26a <can_message_send+0x42>
	{
		mcp2515_write(TXB0D0+i, message->data[i]); 
	}
	
	mcp2515_request_to_send(MCP_RTS_TX0);
 284:	81 e8       	ldi	r24, 0x81	; 129
 286:	0e 94 61 02 	call	0x4c2	; 0x4c2 <mcp2515_request_to_send>

	//printf("end of main");
	//message transmitted when TXBnCTRL.TXREQ cleared and CANINTF.TXnIF set

}
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	08 95       	ret

00000292 <__vector_19>:

/************************************************************************/
/* Interrupt catching byte reception for UART communication             */
/************************************************************************/
ISR(USART0_RXC_vect)
{
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	8f 93       	push	r24
	char ReceivedByte;
	ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
 29e:	8c b1       	in	r24, 0x0c	; 12
	UDR0 = ReceivedByte; // Echo back the received byte back to the computer
 2a0:	8c b9       	out	0x0c, r24	; 12
}
 2a2:	8f 91       	pop	r24
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <__vector_15>:
/************************************************************************/
/* Interrupt catching the timer counter for PWM clock                   */
/************************************************************************/
ISR(TIMER1_OVF_vect)
{
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	cf 92       	push	r12
 2ba:	df 92       	push	r13
 2bc:	ef 92       	push	r14
 2be:	ff 92       	push	r15
 2c0:	2f 93       	push	r18
 2c2:	3f 93       	push	r19
 2c4:	4f 93       	push	r20
 2c6:	5f 93       	push	r21
 2c8:	6f 93       	push	r22
 2ca:	7f 93       	push	r23
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
 2d0:	af 93       	push	r26
 2d2:	bf 93       	push	r27
 2d4:	ef 93       	push	r30
 2d6:	ff 93       	push	r31
	OCR1A = (dutyCircle/100.0)*ICR1;
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	48 ec       	ldi	r20, 0xC8	; 200
 2de:	52 e4       	ldi	r21, 0x42	; 66
 2e0:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <dutyCircle>
 2e4:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <dutyCircle+0x1>
 2e8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <dutyCircle+0x2>
 2ec:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <dutyCircle+0x3>
 2f0:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__divsf3>
 2f4:	6b 01       	movw	r12, r22
 2f6:	7c 01       	movw	r14, r24
 2f8:	64 b5       	in	r22, 0x24	; 36
 2fa:	75 b5       	in	r23, 0x25	; 37
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 87 04 	call	0x90e	; 0x90e <__floatunsisf>
 304:	a7 01       	movw	r20, r14
 306:	96 01       	movw	r18, r12
 308:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__mulsf3>
 30c:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fixunssfsi>
 310:	7b bd       	out	0x2b, r23	; 43
 312:	6a bd       	out	0x2a, r22	; 42
}
 314:	ff 91       	pop	r31
 316:	ef 91       	pop	r30
 318:	bf 91       	pop	r27
 31a:	af 91       	pop	r26
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	7f 91       	pop	r23
 322:	6f 91       	pop	r22
 324:	5f 91       	pop	r21
 326:	4f 91       	pop	r20
 328:	3f 91       	pop	r19
 32a:	2f 91       	pop	r18
 32c:	ff 90       	pop	r15
 32e:	ef 90       	pop	r14
 330:	df 90       	pop	r13
 332:	cf 90       	pop	r12
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <__vector_3>:
/************************************************************************/
/* Interrupt catching BUSY signal for ADC data read                     */
/************************************************************************/
int adc_read_flag = 0;
ISR(INT2_vect)
{
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
	adc_read_flag = 1;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <adc_read_flag+0x1>
 354:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <adc_read_flag>
	// xmem_write(0x52, 0x1400);

}
 358:	9f 91       	pop	r25
 35a:	8f 91       	pop	r24
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

00000366 <__vector_1>:
int joystick_button_flag = 0;
/************************************************************************/
/* Interrupt catching joystick button falling edge                      */
/************************************************************************/
ISR(INT0_vect)
{
 366:	1f 92       	push	r1
 368:	0f 92       	push	r0
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	0f 92       	push	r0
 36e:	11 24       	eor	r1, r1
 370:	8f 93       	push	r24
 372:	9f 93       	push	r25
	//printf("BUTTON pressed Column: %d, Page: %d\n", 0, 0);
	joystick_button_flag = 1;
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__data_end+0x1>
 37c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
}
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <main>:
// {
// 	printf("CAN controller interrupt caught /!\\\n");
// }

int main(void)
{
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	cd b7       	in	r28, 0x3d	; 61
 394:	de b7       	in	r29, 0x3e	; 62
 396:	69 97       	sbiw	r28, 0x19	; 25
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	f8 94       	cli
 39c:	de bf       	out	0x3e, r29	; 62
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	cd bf       	out	0x3d, r28	; 61

	stdout = &mystdout;
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <__iob+0x3>
 3aa:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__iob+0x2>

	USART_Init(UBRR);
 3ae:	8f e1       	ldi	r24, 0x1F	; 31
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <USART_Init>
	xmem_init();
 3b6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <xmem_init>
	PWM_Init();
 3ba:	0e 94 57 00 	call	0xae	; 0xae <PWM_Init>
	ADC_init();
 3be:	0e 94 a3 00 	call	0x146	; 0x146 <ADC_init>
	mcp2515_init();
 3c2:	0e 94 90 02 	call	0x520	; 0x520 <mcp2515_init>
	pushButton_init();
 3c6:	0e 94 04 01 	call	0x208	; 0x208 <pushButton_init>
	
	sei();
 3ca:	78 94       	sei
	
	float x_per;
	float y_per;
	pos_t position;
	position = 0;
	(x_per) = 0;
 3cc:	19 82       	std	Y+1, r1	; 0x01
 3ce:	1a 82       	std	Y+2, r1	; 0x02
 3d0:	1b 82       	std	Y+3, r1	; 0x03
 3d2:	1c 82       	std	Y+4, r1	; 0x04
	(y_per) = 0;
 3d4:	1d 82       	std	Y+5, r1	; 0x05
 3d6:	1e 82       	std	Y+6, r1	; 0x06
 3d8:	1f 82       	std	Y+7, r1	; 0x07
 3da:	18 86       	std	Y+8, r1	; 0x08
	int calibrated = 0;
 3dc:	1a 86       	std	Y+10, r1	; 0x0a
 3de:	19 86       	std	Y+9, r1	; 0x09
	can_message P1000_msg;
	
	int left_pos;
	int right_pos;
	(left_pos) = 0;
 3e0:	1f 8a       	std	Y+23, r1	; 0x17
 3e2:	1e 8a       	std	Y+22, r1	; 0x16
	(right_pos) = 0;
 3e4:	19 8e       	std	Y+25, r1	; 0x19
 3e6:	18 8e       	std	Y+24, r1	; 0x18
	
	
	while (1)
	{	
		joystick_analog_position(&x_per, &y_per, ADC_data, &calibrated);
 3e8:	9e 01       	movw	r18, r28
 3ea:	27 5f       	subi	r18, 0xF7	; 247
 3ec:	3f 4f       	sbci	r19, 0xFF	; 255
 3ee:	4a e4       	ldi	r20, 0x4A	; 74
 3f0:	51 e0       	ldi	r21, 0x01	; 1
 3f2:	be 01       	movw	r22, r28
 3f4:	6b 5f       	subi	r22, 0xFB	; 251
 3f6:	7f 4f       	sbci	r23, 0xFF	; 255
 3f8:	ce 01       	movw	r24, r28
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	0e 94 b6 02 	call	0x56c	; 0x56c <joystick_analog_position>
		position = pos_read(&x_per, &y_per);
 400:	be 01       	movw	r22, r28
 402:	6b 5f       	subi	r22, 0xFB	; 251
 404:	7f 4f       	sbci	r23, 0xFF	; 255
 406:	ce 01       	movw	r24, r28
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	0e 94 1e 03 	call	0x63c	; 0x63c <pos_read>
 40e:	18 2f       	mov	r17, r24
		
		slider_position(&left_pos, &right_pos, ADC_data);
 410:	4a e4       	ldi	r20, 0x4A	; 74
 412:	51 e0       	ldi	r21, 0x01	; 1
 414:	be 01       	movw	r22, r28
 416:	68 5e       	subi	r22, 0xE8	; 232
 418:	7f 4f       	sbci	r23, 0xFF	; 255
 41a:	ce 01       	movw	r24, r28
 41c:	46 96       	adiw	r24, 0x16	; 22
 41e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <slider_position>

		P1000_msg.id = 1;
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	9c 87       	std	Y+12, r25	; 0x0c
 428:	8b 87       	std	Y+11, r24	; 0x0b
		P1000_msg.data_length = 4;
 42a:	84 e0       	ldi	r24, 0x04	; 4
 42c:	8d 87       	std	Y+13, r24	; 0x0d
		P1000_msg.data[0] = position;
 42e:	1e 87       	std	Y+14, r17	; 0x0e
		P1000_msg.data[1] = left_pos;
 430:	8e 89       	ldd	r24, Y+22	; 0x16
 432:	8f 87       	std	Y+15, r24	; 0x0f
		P1000_msg.data[2] = right_pos;
 434:	88 8d       	ldd	r24, Y+24	; 0x18
 436:	88 8b       	std	Y+16, r24	; 0x10
		P1000_msg.data[3] = joystick_button_flag;
 438:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
 43c:	89 8b       	std	Y+17, r24	; 0x11
		joystick_button_flag = 0;
 43e:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__data_end+0x1>
 442:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end>
		
		
		
		
		can_message_send(&P1000_msg);
 446:	ce 01       	movw	r24, r28
 448:	0b 96       	adiw	r24, 0x0b	; 11
 44a:	0e 94 14 01 	call	0x228	; 0x228 <can_message_send>
		if(adc_read_flag)
 44e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <adc_read_flag>
 452:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <adc_read_flag+0x1>
 456:	89 2b       	or	r24, r25
 458:	39 f2       	breq	.-114    	; 0x3e8 <main+0x5a>
		{
			ADC_read(ADC_data);
 45a:	8a e4       	ldi	r24, 0x4A	; 74
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	0e 94 b6 00 	call	0x16c	; 0x16c <ADC_read>
			adc_read_flag = 0;
 462:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <adc_read_flag+0x1>
 466:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <adc_read_flag>
 46a:	be cf       	rjmp	.-132    	; 0x3e8 <main+0x5a>

0000046c <mcp2515_read>:
	char data;
	data = spi_slave_receive();
	
	return data;
	
}
 46c:	cf 93       	push	r28
 46e:	c8 2f       	mov	r28, r24
 470:	88 b3       	in	r24, 0x18	; 24
 472:	8f 7e       	andi	r24, 0xEF	; 239
 474:	88 bb       	out	0x18, r24	; 24
 476:	83 e0       	ldi	r24, 0x03	; 3
 478:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <spi_transmit>
 47c:	8c 2f       	mov	r24, r28
 47e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <spi_transmit>
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <spi_transmit>
 488:	0e 94 70 03 	call	0x6e0	; 0x6e0 <spi_slave_receive>
 48c:	98 b3       	in	r25, 0x18	; 24
 48e:	90 61       	ori	r25, 0x10	; 16
 490:	98 bb       	out	0x18, r25	; 24
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <mcp2515_write>:
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	d8 2f       	mov	r29, r24
 49c:	c6 2f       	mov	r28, r22
 49e:	88 b3       	in	r24, 0x18	; 24
 4a0:	8f 7e       	andi	r24, 0xEF	; 239
 4a2:	88 bb       	out	0x18, r24	; 24
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <spi_transmit>
 4aa:	8d 2f       	mov	r24, r29
 4ac:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <spi_transmit>
 4b0:	8c 2f       	mov	r24, r28
 4b2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <spi_transmit>
 4b6:	88 b3       	in	r24, 0x18	; 24
 4b8:	80 61       	ori	r24, 0x10	; 16
 4ba:	88 bb       	out	0x18, r24	; 24
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	08 95       	ret

000004c2 <mcp2515_request_to_send>:
 4c2:	98 b3       	in	r25, 0x18	; 24
 4c4:	9f 7e       	andi	r25, 0xEF	; 239
 4c6:	98 bb       	out	0x18, r25	; 24
 4c8:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <spi_transmit>
 4cc:	88 b3       	in	r24, 0x18	; 24
 4ce:	80 61       	ori	r24, 0x10	; 16
 4d0:	88 bb       	out	0x18, r24	; 24
 4d2:	08 95       	ret

000004d4 <mcp2515_bit_modify>:

void mcp2515_bit_modify(unsigned char addr, unsigned char mask, unsigned char data)
{
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	18 2f       	mov	r17, r24
 4dc:	d6 2f       	mov	r29, r22
 4de:	c4 2f       	mov	r28, r20
	clear_bit(PORTB, PB4);
 4e0:	88 b3       	in	r24, 0x18	; 24
 4e2:	8f 7e       	andi	r24, 0xEF	; 239
 4e4:	88 bb       	out	0x18, r24	; 24
	
	spi_transmit(MCP_BITMOD);
 4e6:	85 e0       	ldi	r24, 0x05	; 5
 4e8:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <spi_transmit>
	spi_transmit(addr);
 4ec:	81 2f       	mov	r24, r17
 4ee:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <spi_transmit>
	spi_transmit(mask);
 4f2:	8d 2f       	mov	r24, r29
 4f4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <spi_transmit>
	spi_transmit(data);
 4f8:	8c 2f       	mov	r24, r28
 4fa:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <spi_transmit>
	
	set_bit(PORTB, PB4);
 4fe:	88 b3       	in	r24, 0x18	; 24
 500:	80 61       	ori	r24, 0x10	; 16
 502:	88 bb       	out	0x18, r24	; 24
}
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	1f 91       	pop	r17
 50a:	08 95       	ret

0000050c <mcp2515_reset>:

void mcp2515_reset()
{
	clear_bit(PORTB, PB4);
 50c:	88 b3       	in	r24, 0x18	; 24
 50e:	8f 7e       	andi	r24, 0xEF	; 239
 510:	88 bb       	out	0x18, r24	; 24
	
	spi_transmit(MCP_RESET);
 512:	80 ec       	ldi	r24, 0xC0	; 192
 514:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <spi_transmit>
	
	set_bit(PORTB, PB4);
 518:	88 b3       	in	r24, 0x18	; 24
 51a:	80 61       	ori	r24, 0x10	; 16
 51c:	88 bb       	out	0x18, r24	; 24
 51e:	08 95       	ret

00000520 <mcp2515_init>:

uint8_t mcp2515_init ()
{
	//stdout = &mystdout;
	char value;
	spi_init () ; // Initialize SPI
 520:	0e 94 66 03 	call	0x6cc	; 0x6cc <spi_init>
	mcp2515_reset () ; // Send reset - command
 524:	0e 94 86 02 	call	0x50c	; 0x50c <mcp2515_reset>
	
	// Self - test for Config mode (set during reset)
	value = mcp2515_read ( MCP_CANSTAT);
 528:	8e e0       	ldi	r24, 0x0E	; 14
 52a:	0e 94 36 02 	call	0x46c	; 0x46c <mcp2515_read>
	if (( value & MODE_MASK ) != MODE_CONFIG ) {
 52e:	80 7e       	andi	r24, 0xE0	; 224
 530:	80 38       	cpi	r24, 0x80	; 128
 532:	31 f0       	breq	.+12     	; 0x540 <mcp2515_init+0x20>
		printf (" MCP2515 is NOT in configuration mode after reset !\n");
 534:	8e e0       	ldi	r24, 0x0E	; 14
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	0e 94 ab 05 	call	0xb56	; 0xb56 <puts>
		return 1;
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	08 95       	ret
	
	//Set baudrate, PropSeg, PS1, PS2, SJW, 
	//F_osc= 16MHz
	//Use set in register CNF1, CNF2, CNF3 From page 43 in MCP2515

	mcp2515_bit_modify(MCP_CNF1,0xFF, 0x03);
 540:	43 e0       	ldi	r20, 0x03	; 3
 542:	6f ef       	ldi	r22, 0xFF	; 255
 544:	8a e2       	ldi	r24, 0x2A	; 42
 546:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CNF2,0xFF, 0xB1);
 54a:	41 eb       	ldi	r20, 0xB1	; 177
 54c:	6f ef       	ldi	r22, 0xFF	; 255
 54e:	89 e2       	ldi	r24, 0x29	; 41
 550:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CNF3,0xC7, 0x05);
 554:	45 e0       	ldi	r20, 0x05	; 5
 556:	67 ec       	ldi	r22, 0xC7	; 199
 558:	88 e2       	ldi	r24, 0x28	; 40
 55a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <mcp2515_bit_modify>
	//
	//set to Loopback mode
	//mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
	
	//set to Normal mode
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
 55e:	40 e0       	ldi	r20, 0x00	; 0
 560:	60 ee       	ldi	r22, 0xE0	; 224
 562:	8f e0       	ldi	r24, 0x0F	; 15
 564:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <mcp2515_bit_modify>
	
	return 0;
 568:	80 e0       	ldi	r24, 0x00	; 0
}
 56a:	08 95       	ret

0000056c <joystick_analog_position>:

float x_joystick_calibrate=128; 
float y_joystick_calibrate=128; 

void joystick_analog_position(float* x_per, float* y_per, uint8_t* ADC_data, int* calibrated)
{
 56c:	ef 92       	push	r14
 56e:	ff 92       	push	r15
 570:	0f 93       	push	r16
 572:	1f 93       	push	r17
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	7c 01       	movw	r14, r24
 57a:	8b 01       	movw	r16, r22
 57c:	ea 01       	movw	r28, r20
	ADC_read(ADC_data);
 57e:	ca 01       	movw	r24, r20
 580:	0e 94 b6 00 	call	0x16c	; 0x16c <ADC_read>
	xmem_write(0x52, 0x1400);
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	74 e1       	ldi	r23, 0x14	; 20
 588:	82 e5       	ldi	r24, 0x52	; 82
 58a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
		
		*calibrated = 1;
	}
	*/

	*x_per = ((float)ADC_data[3]*(float)(200.0/255.0)-100);
 58e:	6b 81       	ldd	r22, Y+3	; 0x03
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 87 04 	call	0x90e	; 0x90e <__floatunsisf>
 59a:	29 ec       	ldi	r18, 0xC9	; 201
 59c:	38 ec       	ldi	r19, 0xC8	; 200
 59e:	48 e4       	ldi	r20, 0x48	; 72
 5a0:	5f e3       	ldi	r21, 0x3F	; 63
 5a2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__mulsf3>
 5a6:	20 e0       	ldi	r18, 0x00	; 0
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	48 ec       	ldi	r20, 0xC8	; 200
 5ac:	52 e4       	ldi	r21, 0x42	; 66
 5ae:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__subsf3>
 5b2:	f7 01       	movw	r30, r14
 5b4:	60 83       	st	Z, r22
 5b6:	71 83       	std	Z+1, r23	; 0x01
 5b8:	82 83       	std	Z+2, r24	; 0x02
 5ba:	93 83       	std	Z+3, r25	; 0x03
	*y_per = ((float)ADC_data[0]*(float)(200.0/255.0)-100);
 5bc:	68 81       	ld	r22, Y
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 87 04 	call	0x90e	; 0x90e <__floatunsisf>
 5c8:	29 ec       	ldi	r18, 0xC9	; 201
 5ca:	38 ec       	ldi	r19, 0xC8	; 200
 5cc:	48 e4       	ldi	r20, 0x48	; 72
 5ce:	5f e3       	ldi	r21, 0x3F	; 63
 5d0:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__mulsf3>
 5d4:	20 e0       	ldi	r18, 0x00	; 0
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	48 ec       	ldi	r20, 0xC8	; 200
 5da:	52 e4       	ldi	r21, 0x42	; 66
 5dc:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__subsf3>
 5e0:	f8 01       	movw	r30, r16
 5e2:	60 83       	st	Z, r22
 5e4:	71 83       	std	Z+1, r23	; 0x01
 5e6:	82 83       	std	Z+2, r24	; 0x02
 5e8:	93 83       	std	Z+3, r25	; 0x03

}
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	1f 91       	pop	r17
 5f0:	0f 91       	pop	r16
 5f2:	ff 90       	pop	r15
 5f4:	ef 90       	pop	r14
 5f6:	08 95       	ret

000005f8 <slider_position>:

void slider_position(int *left_per, int *right_per, uint8_t* ADC_data)
{
 5f8:	ef 92       	push	r14
 5fa:	ff 92       	push	r15
 5fc:	0f 93       	push	r16
 5fe:	1f 93       	push	r17
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	7c 01       	movw	r14, r24
 606:	8b 01       	movw	r16, r22
 608:	ea 01       	movw	r28, r20
	ADC_read(ADC_data);
 60a:	ca 01       	movw	r24, r20
 60c:	0e 94 b6 00 	call	0x16c	; 0x16c <ADC_read>
	xmem_write(0x52, 0x1400);
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	74 e1       	ldi	r23, 0x14	; 20
 614:	82 e5       	ldi	r24, 0x52	; 82
 616:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	//printf( "ADC_data[%d] = %d, ADC_data[%d] = %d\n", 1, (int)ADC_data [1],2, (int)ADC_data [2]);
	*left_per = ADC_data[1];
 61a:	89 81       	ldd	r24, Y+1	; 0x01
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	f7 01       	movw	r30, r14
 620:	91 83       	std	Z+1, r25	; 0x01
 622:	80 83       	st	Z, r24
	*right_per = ADC_data[2];
 624:	8a 81       	ldd	r24, Y+2	; 0x02
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	f8 01       	movw	r30, r16
 62a:	91 83       	std	Z+1, r25	; 0x01
 62c:	80 83       	st	Z, r24
}
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	1f 91       	pop	r17
 634:	0f 91       	pop	r16
 636:	ff 90       	pop	r15
 638:	ef 90       	pop	r14
 63a:	08 95       	ret

0000063c <pos_read>:



pos_t pos_read(float* x_per, float* y_per)
{
 63c:	cf 92       	push	r12
 63e:	df 92       	push	r13
 640:	ef 92       	push	r14
 642:	ff 92       	push	r15
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	eb 01       	movw	r28, r22
	if((*x_per) >= 70)
 64a:	fc 01       	movw	r30, r24
 64c:	c0 80       	ld	r12, Z
 64e:	d1 80       	ldd	r13, Z+1	; 0x01
 650:	e2 80       	ldd	r14, Z+2	; 0x02
 652:	f3 80       	ldd	r15, Z+3	; 0x03
 654:	20 e0       	ldi	r18, 0x00	; 0
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	4c e8       	ldi	r20, 0x8C	; 140
 65a:	52 e4       	ldi	r21, 0x42	; 66
 65c:	c7 01       	movw	r24, r14
 65e:	b6 01       	movw	r22, r12
 660:	0e 94 39 05 	call	0xa72	; 0xa72 <__gesf2>
 664:	88 23       	and	r24, r24
 666:	24 f5       	brge	.+72     	; 0x6b0 <pos_read+0x74>
	{
		return RIGHT; 	
	}
	else if((*x_per) <= -70)
 668:	20 e0       	ldi	r18, 0x00	; 0
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	4c e8       	ldi	r20, 0x8C	; 140
 66e:	52 ec       	ldi	r21, 0xC2	; 194
 670:	c7 01       	movw	r24, r14
 672:	b6 01       	movw	r22, r12
 674:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__cmpsf2>
 678:	18 16       	cp	r1, r24
 67a:	e4 f4       	brge	.+56     	; 0x6b4 <pos_read+0x78>
	{
		return LEFT;
	}
	else if((*y_per) >= 70)
 67c:	c8 80       	ld	r12, Y
 67e:	d9 80       	ldd	r13, Y+1	; 0x01
 680:	ea 80       	ldd	r14, Y+2	; 0x02
 682:	fb 80       	ldd	r15, Y+3	; 0x03
 684:	20 e0       	ldi	r18, 0x00	; 0
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	4c e8       	ldi	r20, 0x8C	; 140
 68a:	52 e4       	ldi	r21, 0x42	; 66
 68c:	c7 01       	movw	r24, r14
 68e:	b6 01       	movw	r22, r12
 690:	0e 94 39 05 	call	0xa72	; 0xa72 <__gesf2>
 694:	88 23       	and	r24, r24
 696:	84 f4       	brge	.+32     	; 0x6b8 <pos_read+0x7c>
	{
		return UP;
	}
	else if((*y_per) <= -70)
 698:	20 e0       	ldi	r18, 0x00	; 0
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	4c e8       	ldi	r20, 0x8C	; 140
 69e:	52 ec       	ldi	r21, 0xC2	; 194
 6a0:	c7 01       	movw	r24, r14
 6a2:	b6 01       	movw	r22, r12
 6a4:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__cmpsf2>
 6a8:	18 16       	cp	r1, r24
 6aa:	44 f0       	brlt	.+16     	; 0x6bc <pos_read+0x80>
	{
		return DOWN;
 6ac:	83 e0       	ldi	r24, 0x03	; 3
 6ae:	07 c0       	rjmp	.+14     	; 0x6be <pos_read+0x82>

pos_t pos_read(float* x_per, float* y_per)
{
	if((*x_per) >= 70)
	{
		return RIGHT; 	
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	05 c0       	rjmp	.+10     	; 0x6be <pos_read+0x82>
	}
	else if((*x_per) <= -70)
	{
		return LEFT;
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	03 c0       	rjmp	.+6      	; 0x6be <pos_read+0x82>
	}
	else if((*y_per) >= 70)
	{
		return UP;
 6b8:	82 e0       	ldi	r24, 0x02	; 2
 6ba:	01 c0       	rjmp	.+2      	; 0x6be <pos_read+0x82>
	else if((*y_per) <= -70)
	{
		return DOWN;
	}
	
	return NEUTRAL;
 6bc:	84 e0       	ldi	r24, 0x04	; 4
	
}
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	ff 90       	pop	r15
 6c4:	ef 90       	pop	r14
 6c6:	df 90       	pop	r13
 6c8:	cf 90       	pop	r12
 6ca:	08 95       	ret

000006cc <spi_init>:
void spi_slave_init(void)
{
	/* Set MISO output, all others input */
	DDRB |= (1<<DDB6);
	/* Enable SPI */
	SPCR = (1<<SPE);
 6cc:	87 b3       	in	r24, 0x17	; 23
 6ce:	80 6b       	ori	r24, 0xB0	; 176
 6d0:	87 bb       	out	0x17, r24	; 23
 6d2:	81 e5       	ldi	r24, 0x51	; 81
 6d4:	8d b9       	out	0x0d, r24	; 13
 6d6:	08 95       	ret

000006d8 <spi_transmit>:
 6d8:	8f b9       	out	0x0f, r24	; 15
 6da:	77 9b       	sbis	0x0e, 7	; 14
 6dc:	fe cf       	rjmp	.-4      	; 0x6da <spi_transmit+0x2>
 6de:	08 95       	ret

000006e0 <spi_slave_receive>:
}

char spi_slave_receive(void)
{
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
 6e0:	77 9b       	sbis	0x0e, 7	; 14
 6e2:	fe cf       	rjmp	.-4      	; 0x6e0 <spi_slave_receive>
	;
	/* Return data register */
	return SPDR;
 6e4:	8f b1       	in	r24, 0x0f	; 15
 6e6:	08 95       	ret

000006e8 <__subsf3>:
 6e8:	50 58       	subi	r21, 0x80	; 128

000006ea <__addsf3>:
 6ea:	bb 27       	eor	r27, r27
 6ec:	aa 27       	eor	r26, r26
 6ee:	0e 94 8c 03 	call	0x718	; 0x718 <__addsf3x>
 6f2:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_round>
 6f6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__fp_pscA>
 6fa:	38 f0       	brcs	.+14     	; 0x70a <__addsf3+0x20>
 6fc:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__fp_pscB>
 700:	20 f0       	brcs	.+8      	; 0x70a <__addsf3+0x20>
 702:	39 f4       	brne	.+14     	; 0x712 <__addsf3+0x28>
 704:	9f 3f       	cpi	r25, 0xFF	; 255
 706:	19 f4       	brne	.+6      	; 0x70e <__addsf3+0x24>
 708:	26 f4       	brtc	.+8      	; 0x712 <__addsf3+0x28>
 70a:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__fp_nan>
 70e:	0e f4       	brtc	.+2      	; 0x712 <__addsf3+0x28>
 710:	e0 95       	com	r30
 712:	e7 fb       	bst	r30, 7
 714:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__fp_inf>

00000718 <__addsf3x>:
 718:	e9 2f       	mov	r30, r25
 71a:	0e 94 10 05 	call	0xa20	; 0xa20 <__fp_split3>
 71e:	58 f3       	brcs	.-42     	; 0x6f6 <__addsf3+0xc>
 720:	ba 17       	cp	r27, r26
 722:	62 07       	cpc	r22, r18
 724:	73 07       	cpc	r23, r19
 726:	84 07       	cpc	r24, r20
 728:	95 07       	cpc	r25, r21
 72a:	20 f0       	brcs	.+8      	; 0x734 <__addsf3x+0x1c>
 72c:	79 f4       	brne	.+30     	; 0x74c <__addsf3x+0x34>
 72e:	a6 f5       	brtc	.+104    	; 0x798 <__addsf3x+0x80>
 730:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__fp_zero>
 734:	0e f4       	brtc	.+2      	; 0x738 <__addsf3x+0x20>
 736:	e0 95       	com	r30
 738:	0b 2e       	mov	r0, r27
 73a:	ba 2f       	mov	r27, r26
 73c:	a0 2d       	mov	r26, r0
 73e:	0b 01       	movw	r0, r22
 740:	b9 01       	movw	r22, r18
 742:	90 01       	movw	r18, r0
 744:	0c 01       	movw	r0, r24
 746:	ca 01       	movw	r24, r20
 748:	a0 01       	movw	r20, r0
 74a:	11 24       	eor	r1, r1
 74c:	ff 27       	eor	r31, r31
 74e:	59 1b       	sub	r21, r25
 750:	99 f0       	breq	.+38     	; 0x778 <__addsf3x+0x60>
 752:	59 3f       	cpi	r21, 0xF9	; 249
 754:	50 f4       	brcc	.+20     	; 0x76a <__addsf3x+0x52>
 756:	50 3e       	cpi	r21, 0xE0	; 224
 758:	68 f1       	brcs	.+90     	; 0x7b4 <__addsf3x+0x9c>
 75a:	1a 16       	cp	r1, r26
 75c:	f0 40       	sbci	r31, 0x00	; 0
 75e:	a2 2f       	mov	r26, r18
 760:	23 2f       	mov	r18, r19
 762:	34 2f       	mov	r19, r20
 764:	44 27       	eor	r20, r20
 766:	58 5f       	subi	r21, 0xF8	; 248
 768:	f3 cf       	rjmp	.-26     	; 0x750 <__addsf3x+0x38>
 76a:	46 95       	lsr	r20
 76c:	37 95       	ror	r19
 76e:	27 95       	ror	r18
 770:	a7 95       	ror	r26
 772:	f0 40       	sbci	r31, 0x00	; 0
 774:	53 95       	inc	r21
 776:	c9 f7       	brne	.-14     	; 0x76a <__addsf3x+0x52>
 778:	7e f4       	brtc	.+30     	; 0x798 <__addsf3x+0x80>
 77a:	1f 16       	cp	r1, r31
 77c:	ba 0b       	sbc	r27, r26
 77e:	62 0b       	sbc	r22, r18
 780:	73 0b       	sbc	r23, r19
 782:	84 0b       	sbc	r24, r20
 784:	ba f0       	brmi	.+46     	; 0x7b4 <__addsf3x+0x9c>
 786:	91 50       	subi	r25, 0x01	; 1
 788:	a1 f0       	breq	.+40     	; 0x7b2 <__addsf3x+0x9a>
 78a:	ff 0f       	add	r31, r31
 78c:	bb 1f       	adc	r27, r27
 78e:	66 1f       	adc	r22, r22
 790:	77 1f       	adc	r23, r23
 792:	88 1f       	adc	r24, r24
 794:	c2 f7       	brpl	.-16     	; 0x786 <__addsf3x+0x6e>
 796:	0e c0       	rjmp	.+28     	; 0x7b4 <__addsf3x+0x9c>
 798:	ba 0f       	add	r27, r26
 79a:	62 1f       	adc	r22, r18
 79c:	73 1f       	adc	r23, r19
 79e:	84 1f       	adc	r24, r20
 7a0:	48 f4       	brcc	.+18     	; 0x7b4 <__addsf3x+0x9c>
 7a2:	87 95       	ror	r24
 7a4:	77 95       	ror	r23
 7a6:	67 95       	ror	r22
 7a8:	b7 95       	ror	r27
 7aa:	f7 95       	ror	r31
 7ac:	9e 3f       	cpi	r25, 0xFE	; 254
 7ae:	08 f0       	brcs	.+2      	; 0x7b2 <__addsf3x+0x9a>
 7b0:	b0 cf       	rjmp	.-160    	; 0x712 <__addsf3+0x28>
 7b2:	93 95       	inc	r25
 7b4:	88 0f       	add	r24, r24
 7b6:	08 f0       	brcs	.+2      	; 0x7ba <__addsf3x+0xa2>
 7b8:	99 27       	eor	r25, r25
 7ba:	ee 0f       	add	r30, r30
 7bc:	97 95       	ror	r25
 7be:	87 95       	ror	r24
 7c0:	08 95       	ret

000007c2 <__cmpsf2>:
 7c2:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_cmp>
 7c6:	08 f4       	brcc	.+2      	; 0x7ca <__cmpsf2+0x8>
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	08 95       	ret

000007cc <__divsf3>:
 7cc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__divsf3x>
 7d0:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_round>
 7d4:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__fp_pscB>
 7d8:	58 f0       	brcs	.+22     	; 0x7f0 <__divsf3+0x24>
 7da:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__fp_pscA>
 7de:	40 f0       	brcs	.+16     	; 0x7f0 <__divsf3+0x24>
 7e0:	29 f4       	brne	.+10     	; 0x7ec <__divsf3+0x20>
 7e2:	5f 3f       	cpi	r21, 0xFF	; 255
 7e4:	29 f0       	breq	.+10     	; 0x7f0 <__divsf3+0x24>
 7e6:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__fp_inf>
 7ea:	51 11       	cpse	r21, r1
 7ec:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_szero>
 7f0:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__fp_nan>

000007f4 <__divsf3x>:
 7f4:	0e 94 10 05 	call	0xa20	; 0xa20 <__fp_split3>
 7f8:	68 f3       	brcs	.-38     	; 0x7d4 <__divsf3+0x8>

000007fa <__divsf3_pse>:
 7fa:	99 23       	and	r25, r25
 7fc:	b1 f3       	breq	.-20     	; 0x7ea <__divsf3+0x1e>
 7fe:	55 23       	and	r21, r21
 800:	91 f3       	breq	.-28     	; 0x7e6 <__divsf3+0x1a>
 802:	95 1b       	sub	r25, r21
 804:	55 0b       	sbc	r21, r21
 806:	bb 27       	eor	r27, r27
 808:	aa 27       	eor	r26, r26
 80a:	62 17       	cp	r22, r18
 80c:	73 07       	cpc	r23, r19
 80e:	84 07       	cpc	r24, r20
 810:	38 f0       	brcs	.+14     	; 0x820 <__divsf3_pse+0x26>
 812:	9f 5f       	subi	r25, 0xFF	; 255
 814:	5f 4f       	sbci	r21, 0xFF	; 255
 816:	22 0f       	add	r18, r18
 818:	33 1f       	adc	r19, r19
 81a:	44 1f       	adc	r20, r20
 81c:	aa 1f       	adc	r26, r26
 81e:	a9 f3       	breq	.-22     	; 0x80a <__divsf3_pse+0x10>
 820:	35 d0       	rcall	.+106    	; 0x88c <__divsf3_pse+0x92>
 822:	0e 2e       	mov	r0, r30
 824:	3a f0       	brmi	.+14     	; 0x834 <__divsf3_pse+0x3a>
 826:	e0 e8       	ldi	r30, 0x80	; 128
 828:	32 d0       	rcall	.+100    	; 0x88e <__divsf3_pse+0x94>
 82a:	91 50       	subi	r25, 0x01	; 1
 82c:	50 40       	sbci	r21, 0x00	; 0
 82e:	e6 95       	lsr	r30
 830:	00 1c       	adc	r0, r0
 832:	ca f7       	brpl	.-14     	; 0x826 <__divsf3_pse+0x2c>
 834:	2b d0       	rcall	.+86     	; 0x88c <__divsf3_pse+0x92>
 836:	fe 2f       	mov	r31, r30
 838:	29 d0       	rcall	.+82     	; 0x88c <__divsf3_pse+0x92>
 83a:	66 0f       	add	r22, r22
 83c:	77 1f       	adc	r23, r23
 83e:	88 1f       	adc	r24, r24
 840:	bb 1f       	adc	r27, r27
 842:	26 17       	cp	r18, r22
 844:	37 07       	cpc	r19, r23
 846:	48 07       	cpc	r20, r24
 848:	ab 07       	cpc	r26, r27
 84a:	b0 e8       	ldi	r27, 0x80	; 128
 84c:	09 f0       	breq	.+2      	; 0x850 <__divsf3_pse+0x56>
 84e:	bb 0b       	sbc	r27, r27
 850:	80 2d       	mov	r24, r0
 852:	bf 01       	movw	r22, r30
 854:	ff 27       	eor	r31, r31
 856:	93 58       	subi	r25, 0x83	; 131
 858:	5f 4f       	sbci	r21, 0xFF	; 255
 85a:	3a f0       	brmi	.+14     	; 0x86a <__divsf3_pse+0x70>
 85c:	9e 3f       	cpi	r25, 0xFE	; 254
 85e:	51 05       	cpc	r21, r1
 860:	78 f0       	brcs	.+30     	; 0x880 <__divsf3_pse+0x86>
 862:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__fp_inf>
 866:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_szero>
 86a:	5f 3f       	cpi	r21, 0xFF	; 255
 86c:	e4 f3       	brlt	.-8      	; 0x866 <__divsf3_pse+0x6c>
 86e:	98 3e       	cpi	r25, 0xE8	; 232
 870:	d4 f3       	brlt	.-12     	; 0x866 <__divsf3_pse+0x6c>
 872:	86 95       	lsr	r24
 874:	77 95       	ror	r23
 876:	67 95       	ror	r22
 878:	b7 95       	ror	r27
 87a:	f7 95       	ror	r31
 87c:	9f 5f       	subi	r25, 0xFF	; 255
 87e:	c9 f7       	brne	.-14     	; 0x872 <__divsf3_pse+0x78>
 880:	88 0f       	add	r24, r24
 882:	91 1d       	adc	r25, r1
 884:	96 95       	lsr	r25
 886:	87 95       	ror	r24
 888:	97 f9       	bld	r25, 7
 88a:	08 95       	ret
 88c:	e1 e0       	ldi	r30, 0x01	; 1
 88e:	66 0f       	add	r22, r22
 890:	77 1f       	adc	r23, r23
 892:	88 1f       	adc	r24, r24
 894:	bb 1f       	adc	r27, r27
 896:	62 17       	cp	r22, r18
 898:	73 07       	cpc	r23, r19
 89a:	84 07       	cpc	r24, r20
 89c:	ba 07       	cpc	r27, r26
 89e:	20 f0       	brcs	.+8      	; 0x8a8 <__divsf3_pse+0xae>
 8a0:	62 1b       	sub	r22, r18
 8a2:	73 0b       	sbc	r23, r19
 8a4:	84 0b       	sbc	r24, r20
 8a6:	ba 0b       	sbc	r27, r26
 8a8:	ee 1f       	adc	r30, r30
 8aa:	88 f7       	brcc	.-30     	; 0x88e <__divsf3_pse+0x94>
 8ac:	e0 95       	com	r30
 8ae:	08 95       	ret

000008b0 <__fixunssfsi>:
 8b0:	0e 94 18 05 	call	0xa30	; 0xa30 <__fp_splitA>
 8b4:	88 f0       	brcs	.+34     	; 0x8d8 <__fixunssfsi+0x28>
 8b6:	9f 57       	subi	r25, 0x7F	; 127
 8b8:	98 f0       	brcs	.+38     	; 0x8e0 <__fixunssfsi+0x30>
 8ba:	b9 2f       	mov	r27, r25
 8bc:	99 27       	eor	r25, r25
 8be:	b7 51       	subi	r27, 0x17	; 23
 8c0:	b0 f0       	brcs	.+44     	; 0x8ee <__fixunssfsi+0x3e>
 8c2:	e1 f0       	breq	.+56     	; 0x8fc <__fixunssfsi+0x4c>
 8c4:	66 0f       	add	r22, r22
 8c6:	77 1f       	adc	r23, r23
 8c8:	88 1f       	adc	r24, r24
 8ca:	99 1f       	adc	r25, r25
 8cc:	1a f0       	brmi	.+6      	; 0x8d4 <__fixunssfsi+0x24>
 8ce:	ba 95       	dec	r27
 8d0:	c9 f7       	brne	.-14     	; 0x8c4 <__fixunssfsi+0x14>
 8d2:	14 c0       	rjmp	.+40     	; 0x8fc <__fixunssfsi+0x4c>
 8d4:	b1 30       	cpi	r27, 0x01	; 1
 8d6:	91 f0       	breq	.+36     	; 0x8fc <__fixunssfsi+0x4c>
 8d8:	0e 94 32 05 	call	0xa64	; 0xa64 <__fp_zero>
 8dc:	b1 e0       	ldi	r27, 0x01	; 1
 8de:	08 95       	ret
 8e0:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__fp_zero>
 8e4:	67 2f       	mov	r22, r23
 8e6:	78 2f       	mov	r23, r24
 8e8:	88 27       	eor	r24, r24
 8ea:	b8 5f       	subi	r27, 0xF8	; 248
 8ec:	39 f0       	breq	.+14     	; 0x8fc <__fixunssfsi+0x4c>
 8ee:	b9 3f       	cpi	r27, 0xF9	; 249
 8f0:	cc f3       	brlt	.-14     	; 0x8e4 <__fixunssfsi+0x34>
 8f2:	86 95       	lsr	r24
 8f4:	77 95       	ror	r23
 8f6:	67 95       	ror	r22
 8f8:	b3 95       	inc	r27
 8fa:	d9 f7       	brne	.-10     	; 0x8f2 <__fixunssfsi+0x42>
 8fc:	3e f4       	brtc	.+14     	; 0x90c <__fixunssfsi+0x5c>
 8fe:	90 95       	com	r25
 900:	80 95       	com	r24
 902:	70 95       	com	r23
 904:	61 95       	neg	r22
 906:	7f 4f       	sbci	r23, 0xFF	; 255
 908:	8f 4f       	sbci	r24, 0xFF	; 255
 90a:	9f 4f       	sbci	r25, 0xFF	; 255
 90c:	08 95       	ret

0000090e <__floatunsisf>:
 90e:	e8 94       	clt
 910:	09 c0       	rjmp	.+18     	; 0x924 <__floatsisf+0x12>

00000912 <__floatsisf>:
 912:	97 fb       	bst	r25, 7
 914:	3e f4       	brtc	.+14     	; 0x924 <__floatsisf+0x12>
 916:	90 95       	com	r25
 918:	80 95       	com	r24
 91a:	70 95       	com	r23
 91c:	61 95       	neg	r22
 91e:	7f 4f       	sbci	r23, 0xFF	; 255
 920:	8f 4f       	sbci	r24, 0xFF	; 255
 922:	9f 4f       	sbci	r25, 0xFF	; 255
 924:	99 23       	and	r25, r25
 926:	a9 f0       	breq	.+42     	; 0x952 <__floatsisf+0x40>
 928:	f9 2f       	mov	r31, r25
 92a:	96 e9       	ldi	r25, 0x96	; 150
 92c:	bb 27       	eor	r27, r27
 92e:	93 95       	inc	r25
 930:	f6 95       	lsr	r31
 932:	87 95       	ror	r24
 934:	77 95       	ror	r23
 936:	67 95       	ror	r22
 938:	b7 95       	ror	r27
 93a:	f1 11       	cpse	r31, r1
 93c:	f8 cf       	rjmp	.-16     	; 0x92e <__floatsisf+0x1c>
 93e:	fa f4       	brpl	.+62     	; 0x97e <__floatsisf+0x6c>
 940:	bb 0f       	add	r27, r27
 942:	11 f4       	brne	.+4      	; 0x948 <__floatsisf+0x36>
 944:	60 ff       	sbrs	r22, 0
 946:	1b c0       	rjmp	.+54     	; 0x97e <__floatsisf+0x6c>
 948:	6f 5f       	subi	r22, 0xFF	; 255
 94a:	7f 4f       	sbci	r23, 0xFF	; 255
 94c:	8f 4f       	sbci	r24, 0xFF	; 255
 94e:	9f 4f       	sbci	r25, 0xFF	; 255
 950:	16 c0       	rjmp	.+44     	; 0x97e <__floatsisf+0x6c>
 952:	88 23       	and	r24, r24
 954:	11 f0       	breq	.+4      	; 0x95a <__floatsisf+0x48>
 956:	96 e9       	ldi	r25, 0x96	; 150
 958:	11 c0       	rjmp	.+34     	; 0x97c <__floatsisf+0x6a>
 95a:	77 23       	and	r23, r23
 95c:	21 f0       	breq	.+8      	; 0x966 <__floatsisf+0x54>
 95e:	9e e8       	ldi	r25, 0x8E	; 142
 960:	87 2f       	mov	r24, r23
 962:	76 2f       	mov	r23, r22
 964:	05 c0       	rjmp	.+10     	; 0x970 <__floatsisf+0x5e>
 966:	66 23       	and	r22, r22
 968:	71 f0       	breq	.+28     	; 0x986 <__floatsisf+0x74>
 96a:	96 e8       	ldi	r25, 0x86	; 134
 96c:	86 2f       	mov	r24, r22
 96e:	70 e0       	ldi	r23, 0x00	; 0
 970:	60 e0       	ldi	r22, 0x00	; 0
 972:	2a f0       	brmi	.+10     	; 0x97e <__floatsisf+0x6c>
 974:	9a 95       	dec	r25
 976:	66 0f       	add	r22, r22
 978:	77 1f       	adc	r23, r23
 97a:	88 1f       	adc	r24, r24
 97c:	da f7       	brpl	.-10     	; 0x974 <__floatsisf+0x62>
 97e:	88 0f       	add	r24, r24
 980:	96 95       	lsr	r25
 982:	87 95       	ror	r24
 984:	97 f9       	bld	r25, 7
 986:	08 95       	ret

00000988 <__fp_cmp>:
 988:	99 0f       	add	r25, r25
 98a:	00 08       	sbc	r0, r0
 98c:	55 0f       	add	r21, r21
 98e:	aa 0b       	sbc	r26, r26
 990:	e0 e8       	ldi	r30, 0x80	; 128
 992:	fe ef       	ldi	r31, 0xFE	; 254
 994:	16 16       	cp	r1, r22
 996:	17 06       	cpc	r1, r23
 998:	e8 07       	cpc	r30, r24
 99a:	f9 07       	cpc	r31, r25
 99c:	c0 f0       	brcs	.+48     	; 0x9ce <__fp_cmp+0x46>
 99e:	12 16       	cp	r1, r18
 9a0:	13 06       	cpc	r1, r19
 9a2:	e4 07       	cpc	r30, r20
 9a4:	f5 07       	cpc	r31, r21
 9a6:	98 f0       	brcs	.+38     	; 0x9ce <__fp_cmp+0x46>
 9a8:	62 1b       	sub	r22, r18
 9aa:	73 0b       	sbc	r23, r19
 9ac:	84 0b       	sbc	r24, r20
 9ae:	95 0b       	sbc	r25, r21
 9b0:	39 f4       	brne	.+14     	; 0x9c0 <__fp_cmp+0x38>
 9b2:	0a 26       	eor	r0, r26
 9b4:	61 f0       	breq	.+24     	; 0x9ce <__fp_cmp+0x46>
 9b6:	23 2b       	or	r18, r19
 9b8:	24 2b       	or	r18, r20
 9ba:	25 2b       	or	r18, r21
 9bc:	21 f4       	brne	.+8      	; 0x9c6 <__fp_cmp+0x3e>
 9be:	08 95       	ret
 9c0:	0a 26       	eor	r0, r26
 9c2:	09 f4       	brne	.+2      	; 0x9c6 <__fp_cmp+0x3e>
 9c4:	a1 40       	sbci	r26, 0x01	; 1
 9c6:	a6 95       	lsr	r26
 9c8:	8f ef       	ldi	r24, 0xFF	; 255
 9ca:	81 1d       	adc	r24, r1
 9cc:	81 1d       	adc	r24, r1
 9ce:	08 95       	ret

000009d0 <__fp_inf>:
 9d0:	97 f9       	bld	r25, 7
 9d2:	9f 67       	ori	r25, 0x7F	; 127
 9d4:	80 e8       	ldi	r24, 0x80	; 128
 9d6:	70 e0       	ldi	r23, 0x00	; 0
 9d8:	60 e0       	ldi	r22, 0x00	; 0
 9da:	08 95       	ret

000009dc <__fp_nan>:
 9dc:	9f ef       	ldi	r25, 0xFF	; 255
 9de:	80 ec       	ldi	r24, 0xC0	; 192
 9e0:	08 95       	ret

000009e2 <__fp_pscA>:
 9e2:	00 24       	eor	r0, r0
 9e4:	0a 94       	dec	r0
 9e6:	16 16       	cp	r1, r22
 9e8:	17 06       	cpc	r1, r23
 9ea:	18 06       	cpc	r1, r24
 9ec:	09 06       	cpc	r0, r25
 9ee:	08 95       	ret

000009f0 <__fp_pscB>:
 9f0:	00 24       	eor	r0, r0
 9f2:	0a 94       	dec	r0
 9f4:	12 16       	cp	r1, r18
 9f6:	13 06       	cpc	r1, r19
 9f8:	14 06       	cpc	r1, r20
 9fa:	05 06       	cpc	r0, r21
 9fc:	08 95       	ret

000009fe <__fp_round>:
 9fe:	09 2e       	mov	r0, r25
 a00:	03 94       	inc	r0
 a02:	00 0c       	add	r0, r0
 a04:	11 f4       	brne	.+4      	; 0xa0a <__fp_round+0xc>
 a06:	88 23       	and	r24, r24
 a08:	52 f0       	brmi	.+20     	; 0xa1e <__fp_round+0x20>
 a0a:	bb 0f       	add	r27, r27
 a0c:	40 f4       	brcc	.+16     	; 0xa1e <__fp_round+0x20>
 a0e:	bf 2b       	or	r27, r31
 a10:	11 f4       	brne	.+4      	; 0xa16 <__fp_round+0x18>
 a12:	60 ff       	sbrs	r22, 0
 a14:	04 c0       	rjmp	.+8      	; 0xa1e <__fp_round+0x20>
 a16:	6f 5f       	subi	r22, 0xFF	; 255
 a18:	7f 4f       	sbci	r23, 0xFF	; 255
 a1a:	8f 4f       	sbci	r24, 0xFF	; 255
 a1c:	9f 4f       	sbci	r25, 0xFF	; 255
 a1e:	08 95       	ret

00000a20 <__fp_split3>:
 a20:	57 fd       	sbrc	r21, 7
 a22:	90 58       	subi	r25, 0x80	; 128
 a24:	44 0f       	add	r20, r20
 a26:	55 1f       	adc	r21, r21
 a28:	59 f0       	breq	.+22     	; 0xa40 <__fp_splitA+0x10>
 a2a:	5f 3f       	cpi	r21, 0xFF	; 255
 a2c:	71 f0       	breq	.+28     	; 0xa4a <__fp_splitA+0x1a>
 a2e:	47 95       	ror	r20

00000a30 <__fp_splitA>:
 a30:	88 0f       	add	r24, r24
 a32:	97 fb       	bst	r25, 7
 a34:	99 1f       	adc	r25, r25
 a36:	61 f0       	breq	.+24     	; 0xa50 <__fp_splitA+0x20>
 a38:	9f 3f       	cpi	r25, 0xFF	; 255
 a3a:	79 f0       	breq	.+30     	; 0xa5a <__fp_splitA+0x2a>
 a3c:	87 95       	ror	r24
 a3e:	08 95       	ret
 a40:	12 16       	cp	r1, r18
 a42:	13 06       	cpc	r1, r19
 a44:	14 06       	cpc	r1, r20
 a46:	55 1f       	adc	r21, r21
 a48:	f2 cf       	rjmp	.-28     	; 0xa2e <__fp_split3+0xe>
 a4a:	46 95       	lsr	r20
 a4c:	f1 df       	rcall	.-30     	; 0xa30 <__fp_splitA>
 a4e:	08 c0       	rjmp	.+16     	; 0xa60 <__fp_splitA+0x30>
 a50:	16 16       	cp	r1, r22
 a52:	17 06       	cpc	r1, r23
 a54:	18 06       	cpc	r1, r24
 a56:	99 1f       	adc	r25, r25
 a58:	f1 cf       	rjmp	.-30     	; 0xa3c <__fp_splitA+0xc>
 a5a:	86 95       	lsr	r24
 a5c:	71 05       	cpc	r23, r1
 a5e:	61 05       	cpc	r22, r1
 a60:	08 94       	sec
 a62:	08 95       	ret

00000a64 <__fp_zero>:
 a64:	e8 94       	clt

00000a66 <__fp_szero>:
 a66:	bb 27       	eor	r27, r27
 a68:	66 27       	eor	r22, r22
 a6a:	77 27       	eor	r23, r23
 a6c:	cb 01       	movw	r24, r22
 a6e:	97 f9       	bld	r25, 7
 a70:	08 95       	ret

00000a72 <__gesf2>:
 a72:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_cmp>
 a76:	08 f4       	brcc	.+2      	; 0xa7a <__gesf2+0x8>
 a78:	8f ef       	ldi	r24, 0xFF	; 255
 a7a:	08 95       	ret

00000a7c <__mulsf3>:
 a7c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__mulsf3x>
 a80:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_round>
 a84:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__fp_pscA>
 a88:	38 f0       	brcs	.+14     	; 0xa98 <__mulsf3+0x1c>
 a8a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__fp_pscB>
 a8e:	20 f0       	brcs	.+8      	; 0xa98 <__mulsf3+0x1c>
 a90:	95 23       	and	r25, r21
 a92:	11 f0       	breq	.+4      	; 0xa98 <__mulsf3+0x1c>
 a94:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__fp_inf>
 a98:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__fp_nan>
 a9c:	11 24       	eor	r1, r1
 a9e:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_szero>

00000aa2 <__mulsf3x>:
 aa2:	0e 94 10 05 	call	0xa20	; 0xa20 <__fp_split3>
 aa6:	70 f3       	brcs	.-36     	; 0xa84 <__mulsf3+0x8>

00000aa8 <__mulsf3_pse>:
 aa8:	95 9f       	mul	r25, r21
 aaa:	c1 f3       	breq	.-16     	; 0xa9c <__mulsf3+0x20>
 aac:	95 0f       	add	r25, r21
 aae:	50 e0       	ldi	r21, 0x00	; 0
 ab0:	55 1f       	adc	r21, r21
 ab2:	62 9f       	mul	r22, r18
 ab4:	f0 01       	movw	r30, r0
 ab6:	72 9f       	mul	r23, r18
 ab8:	bb 27       	eor	r27, r27
 aba:	f0 0d       	add	r31, r0
 abc:	b1 1d       	adc	r27, r1
 abe:	63 9f       	mul	r22, r19
 ac0:	aa 27       	eor	r26, r26
 ac2:	f0 0d       	add	r31, r0
 ac4:	b1 1d       	adc	r27, r1
 ac6:	aa 1f       	adc	r26, r26
 ac8:	64 9f       	mul	r22, r20
 aca:	66 27       	eor	r22, r22
 acc:	b0 0d       	add	r27, r0
 ace:	a1 1d       	adc	r26, r1
 ad0:	66 1f       	adc	r22, r22
 ad2:	82 9f       	mul	r24, r18
 ad4:	22 27       	eor	r18, r18
 ad6:	b0 0d       	add	r27, r0
 ad8:	a1 1d       	adc	r26, r1
 ada:	62 1f       	adc	r22, r18
 adc:	73 9f       	mul	r23, r19
 ade:	b0 0d       	add	r27, r0
 ae0:	a1 1d       	adc	r26, r1
 ae2:	62 1f       	adc	r22, r18
 ae4:	83 9f       	mul	r24, r19
 ae6:	a0 0d       	add	r26, r0
 ae8:	61 1d       	adc	r22, r1
 aea:	22 1f       	adc	r18, r18
 aec:	74 9f       	mul	r23, r20
 aee:	33 27       	eor	r19, r19
 af0:	a0 0d       	add	r26, r0
 af2:	61 1d       	adc	r22, r1
 af4:	23 1f       	adc	r18, r19
 af6:	84 9f       	mul	r24, r20
 af8:	60 0d       	add	r22, r0
 afa:	21 1d       	adc	r18, r1
 afc:	82 2f       	mov	r24, r18
 afe:	76 2f       	mov	r23, r22
 b00:	6a 2f       	mov	r22, r26
 b02:	11 24       	eor	r1, r1
 b04:	9f 57       	subi	r25, 0x7F	; 127
 b06:	50 40       	sbci	r21, 0x00	; 0
 b08:	9a f0       	brmi	.+38     	; 0xb30 <__mulsf3_pse+0x88>
 b0a:	f1 f0       	breq	.+60     	; 0xb48 <__mulsf3_pse+0xa0>
 b0c:	88 23       	and	r24, r24
 b0e:	4a f0       	brmi	.+18     	; 0xb22 <__mulsf3_pse+0x7a>
 b10:	ee 0f       	add	r30, r30
 b12:	ff 1f       	adc	r31, r31
 b14:	bb 1f       	adc	r27, r27
 b16:	66 1f       	adc	r22, r22
 b18:	77 1f       	adc	r23, r23
 b1a:	88 1f       	adc	r24, r24
 b1c:	91 50       	subi	r25, 0x01	; 1
 b1e:	50 40       	sbci	r21, 0x00	; 0
 b20:	a9 f7       	brne	.-22     	; 0xb0c <__mulsf3_pse+0x64>
 b22:	9e 3f       	cpi	r25, 0xFE	; 254
 b24:	51 05       	cpc	r21, r1
 b26:	80 f0       	brcs	.+32     	; 0xb48 <__mulsf3_pse+0xa0>
 b28:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__fp_inf>
 b2c:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_szero>
 b30:	5f 3f       	cpi	r21, 0xFF	; 255
 b32:	e4 f3       	brlt	.-8      	; 0xb2c <__mulsf3_pse+0x84>
 b34:	98 3e       	cpi	r25, 0xE8	; 232
 b36:	d4 f3       	brlt	.-12     	; 0xb2c <__mulsf3_pse+0x84>
 b38:	86 95       	lsr	r24
 b3a:	77 95       	ror	r23
 b3c:	67 95       	ror	r22
 b3e:	b7 95       	ror	r27
 b40:	f7 95       	ror	r31
 b42:	e7 95       	ror	r30
 b44:	9f 5f       	subi	r25, 0xFF	; 255
 b46:	c1 f7       	brne	.-16     	; 0xb38 <__mulsf3_pse+0x90>
 b48:	fe 2b       	or	r31, r30
 b4a:	88 0f       	add	r24, r24
 b4c:	91 1d       	adc	r25, r1
 b4e:	96 95       	lsr	r25
 b50:	87 95       	ror	r24
 b52:	97 f9       	bld	r25, 7
 b54:	08 95       	ret

00000b56 <puts>:
 b56:	0f 93       	push	r16
 b58:	1f 93       	push	r17
 b5a:	cf 93       	push	r28
 b5c:	df 93       	push	r29
 b5e:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <__iob+0x2>
 b62:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <__iob+0x3>
 b66:	23 81       	ldd	r18, Z+3	; 0x03
 b68:	21 ff       	sbrs	r18, 1
 b6a:	1b c0       	rjmp	.+54     	; 0xba2 <puts+0x4c>
 b6c:	8c 01       	movw	r16, r24
 b6e:	d0 e0       	ldi	r29, 0x00	; 0
 b70:	c0 e0       	ldi	r28, 0x00	; 0
 b72:	f8 01       	movw	r30, r16
 b74:	81 91       	ld	r24, Z+
 b76:	8f 01       	movw	r16, r30
 b78:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <__iob+0x2>
 b7c:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <__iob+0x3>
 b80:	db 01       	movw	r26, r22
 b82:	18 96       	adiw	r26, 0x08	; 8
 b84:	ed 91       	ld	r30, X+
 b86:	fc 91       	ld	r31, X
 b88:	19 97       	sbiw	r26, 0x09	; 9
 b8a:	88 23       	and	r24, r24
 b8c:	31 f0       	breq	.+12     	; 0xb9a <puts+0x44>
 b8e:	09 95       	icall
 b90:	89 2b       	or	r24, r25
 b92:	79 f3       	breq	.-34     	; 0xb72 <puts+0x1c>
 b94:	df ef       	ldi	r29, 0xFF	; 255
 b96:	cf ef       	ldi	r28, 0xFF	; 255
 b98:	ec cf       	rjmp	.-40     	; 0xb72 <puts+0x1c>
 b9a:	8a e0       	ldi	r24, 0x0A	; 10
 b9c:	09 95       	icall
 b9e:	89 2b       	or	r24, r25
 ba0:	19 f0       	breq	.+6      	; 0xba8 <puts+0x52>
 ba2:	8f ef       	ldi	r24, 0xFF	; 255
 ba4:	9f ef       	ldi	r25, 0xFF	; 255
 ba6:	02 c0       	rjmp	.+4      	; 0xbac <puts+0x56>
 ba8:	8d 2f       	mov	r24, r29
 baa:	9c 2f       	mov	r25, r28
 bac:	df 91       	pop	r29
 bae:	cf 91       	pop	r28
 bb0:	1f 91       	pop	r17
 bb2:	0f 91       	pop	r16
 bb4:	08 95       	ret

00000bb6 <_exit>:
 bb6:	f8 94       	cli

00000bb8 <__stop_program>:
 bb8:	ff cf       	rjmp	.-2      	; 0xbb8 <__stop_program>
