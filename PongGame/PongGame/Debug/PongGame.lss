
PongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080e  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070e  00000000  00000000  000009e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000384  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001474  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b6  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000081  00000000  00000000  00001892  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001913  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <USART_Init>:
#include "ATmega162_driver.h"

void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char) (ubrr >> 8);
  88:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) (ubrr);
  8a:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);  
  90:	8e e8       	ldi	r24, 0x8E	; 142
  92:	80 bd       	out	0x20, r24	; 32
  94:	08 95       	ret

00000096 <USART_TX>:
	
}

void USART_TX(unsigned char data){
	while ( !( UCSR0A & (1 << UDRE0)) );
  96:	5d 9b       	sbis	0x0b, 5	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <USART_TX>
		
	UDR0 = data;
  9a:	8c b9       	out	0x0c, r24	; 12
  9c:	08 95       	ret

0000009e <USART_RX>:
}

unsigned char USART_RX(){
	while ( !( UCSR0A & (1 << RXC0) ));
  9e:	5f 9b       	sbis	0x0b, 7	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <USART_RX>
	
	return UDR0;	
  a2:	8c b1       	in	r24, 0x0c	; 12
  a4:	08 95       	ret

000000a6 <main>:
#include "ATmega162_driver.h"

int main(void)
{
	unsigned char test;
	USART_Init(UBRR);
  a6:	8f e1       	ldi	r24, 0x1F	; 31
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 44 00 	call	0x88	; 0x88 <USART_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 ef       	ldi	r25, 0xF0	; 240
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0xc>
	while(1)
	{
		
		_delay_ms(50);
		
		test = USART_RX();
  b6:	0e 94 4f 00 	call	0x9e	; 0x9e <USART_RX>
		USART_TX(test);
  ba:	0e 94 4b 00 	call	0x96	; 0x96 <USART_TX>
  be:	f7 cf       	rjmp	.-18     	; 0xae <main+0x8>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
