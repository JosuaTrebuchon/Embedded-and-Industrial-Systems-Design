
PongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000008a6  0000093a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010e  0080010e  00000948  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000978  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022f9  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000101c  00000000  00000000  00002e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e89  00000000  00000000  00003e39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000042c  00000000  00000000  00004cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fe  00000000  00000000  000050f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ca0  00000000  00000000  000057ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000648e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_15>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 ea       	ldi	r30, 0xA6	; 166
  84:	f8 e0       	ldi	r31, 0x08	; 8
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ae 30       	cpi	r26, 0x0E	; 14
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	ae e0       	ldi	r26, 0x0E	; 14
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ac 31       	cpi	r26, 0x1C	; 28
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 80 01 	call	0x300	; 0x300 <main>
  a6:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <PWM_Init>:
#include "ADC_driver.h"

void PWM_Init()
{
  ae:	cf 92       	push	r12
  b0:	df 92       	push	r13
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
	set_bit(DDRD, DDD5);
  b6:	81 b3       	in	r24, 0x11	; 17
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	81 bb       	out	0x11, r24	; 17
	
	/* Fast PWM, TOP value = ICR1 */
	set_bit(TCCR1B, WGM13);
  bc:	8e b5       	in	r24, 0x2e	; 46
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	8e bd       	out	0x2e, r24	; 46
	set_bit(TCCR1B, WGM12);
  c2:	8e b5       	in	r24, 0x2e	; 46
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	8e bd       	out	0x2e, r24	; 46
	set_bit(TCCR1A, WGM11);
  c8:	8f b5       	in	r24, 0x2f	; 47
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	8f bd       	out	0x2f, r24	; 47
	clear_bit(TCCR1A, WGM10);
  ce:	8f b5       	in	r24, 0x2f	; 47
  d0:	8e 7f       	andi	r24, 0xFE	; 254
  d2:	8f bd       	out	0x2f, r24	; 47
	
	set_bit(TCCR1A, COM1A1);
  d4:	8f b5       	in	r24, 0x2f	; 47
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	8f bd       	out	0x2f, r24	; 47
	clear_bit(TCCR1A, COM1A0);
  da:	8f b5       	in	r24, 0x2f	; 47
  dc:	8f 7b       	andi	r24, 0xBF	; 191
  de:	8f bd       	out	0x2f, r24	; 47
	
	set_bit(TIMSK, TOIE1);
  e0:	89 b7       	in	r24, 0x39	; 57
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	89 bf       	out	0x39, r24	; 57
	
	/* Configuration of the width of the PWM */
	
	ICR1 = 1;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	95 bd       	out	0x25, r25	; 37
  ec:	84 bd       	out	0x24, r24	; 36
		
	OCR1A = (dutyCircle/100.0)*ICR1;
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	48 ec       	ldi	r20, 0xC8	; 200
  f4:	52 e4       	ldi	r21, 0x42	; 66
  f6:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <__data_end>
  fa:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <__data_end+0x1>
  fe:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end+0x2>
 102:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x3>
 106:	0e 94 b5 02 	call	0x56a	; 0x56a <__divsf3>
 10a:	6b 01       	movw	r12, r22
 10c:	7c 01       	movw	r14, r24
 10e:	64 b5       	in	r22, 0x24	; 36
 110:	75 b5       	in	r23, 0x25	; 37
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 56 03 	call	0x6ac	; 0x6ac <__floatunsisf>
 11a:	a7 01       	movw	r20, r14
 11c:	96 01       	movw	r18, r12
 11e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__mulsf3>
 122:	0e 94 27 03 	call	0x64e	; 0x64e <__fixunssfsi>
 126:	7b bd       	out	0x2b, r23	; 43
 128:	6a bd       	out	0x2a, r22	; 42
	
	/*  */
	
	clear_bit(TCCR1B, CS12);
 12a:	8e b5       	in	r24, 0x2e	; 46
 12c:	8b 7f       	andi	r24, 0xFB	; 251
 12e:	8e bd       	out	0x2e, r24	; 46
	clear_bit(TCCR1B, CS11);
 130:	8e b5       	in	r24, 0x2e	; 46
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	8e bd       	out	0x2e, r24	; 46
	set_bit(TCCR1B, CS10);
 136:	8e b5       	in	r24, 0x2e	; 46
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	8e bd       	out	0x2e, r24	; 46
}
 13c:	ff 90       	pop	r15
 13e:	ef 90       	pop	r14
 140:	df 90       	pop	r13
 142:	cf 90       	pop	r12
 144:	08 95       	ret

00000146 <ADC_init>:


void ADC_init(void)
{
	//set clock out on MC
	set_bit(DDRD, DDD5);
 146:	81 b3       	in	r24, 0x11	; 17
 148:	80 62       	ori	r24, 0x20	; 32
 14a:	81 bb       	out	0x11, r24	; 17
	set_bit(DDRD, DDD6); /* Enable WR output signal */
 14c:	81 b3       	in	r24, 0x11	; 17
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	81 bb       	out	0x11, r24	; 17
	set_bit(DDRD, DDD7); /* Enable RD output signal */
 152:	81 b3       	in	r24, 0x11	; 17
 154:	80 68       	ori	r24, 0x80	; 128
 156:	81 bb       	out	0x11, r24	; 17
	
	clear_bit(DDRE, DDE0); /* Set pin PE0 as INPUT to use the INT2 Interrupt for BUSY signal from ADC */
 158:	86 b1       	in	r24, 0x06	; 6
 15a:	8e 7f       	andi	r24, 0xFE	; 254
 15c:	86 b9       	out	0x06, r24	; 6
	
	set_bit(EMCUCR, ISC2); /* Trigger interrupt on rising edge */
 15e:	86 b7       	in	r24, 0x36	; 54
 160:	81 60       	ori	r24, 0x01	; 1
 162:	86 bf       	out	0x36, r24	; 54
	set_bit(GICR, INT2); /* Enable INT2 interrupt */ 
 164:	8b b7       	in	r24, 0x3b	; 59
 166:	80 62       	ori	r24, 0x20	; 32
 168:	8b bf       	out	0x3b, r24	; 59
 16a:	08 95       	ret

0000016c <ADC_read>:
}

void ADC_read(uint8_t* ADC_data)
{
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	7c 01       	movw	r14, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	00 00       	nop
	
	// uint8_t ADC_data [4]= {0,0,0,0};

	_delay_ms(t_BRD);
	
	for(int i = 0; i<channels;++i)
 17c:	c0 e0       	ldi	r28, 0x00	; 0
 17e:	d0 e0       	ldi	r29, 0x00	; 0
 180:	0d c0       	rjmp	.+26     	; 0x19c <ADC_read+0x30>
	{
		ADC_data[i] = xmem_read(0x1700);
 182:	87 01       	movw	r16, r14
 184:	0c 0f       	add	r16, r28
 186:	1d 1f       	adc	r17, r29
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	97 e1       	ldi	r25, 0x17	; 23
 18c:	0e 94 01 01 	call	0x202	; 0x202 <xmem_read>
 190:	f8 01       	movw	r30, r16
 192:	80 83       	st	Z, r24
 194:	f2 e0       	ldi	r31, 0x02	; 2
 196:	fa 95       	dec	r31
 198:	f1 f7       	brne	.-4      	; 0x196 <ADC_read+0x2a>
	
	// uint8_t ADC_data [4]= {0,0,0,0};

	_delay_ms(t_BRD);
	
	for(int i = 0; i<channels;++i)
 19a:	21 96       	adiw	r28, 0x01	; 1
 19c:	c4 30       	cpi	r28, 0x04	; 4
 19e:	d1 05       	cpc	r29, r1
 1a0:	84 f3       	brlt	.-32     	; 0x182 <ADC_read+0x16>
	
	}
	
	//printf( "ADC_data[%d] = %d, ADC_data[%d] = %d\n", 0, (int)ADC_data [0],3, (int)ADC_data [3]);

}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	ff 90       	pop	r15
 1ac:	ef 90       	pop	r14
 1ae:	08 95       	ret

000001b0 <uart_putchar>:

unsigned char USART_RX(){
	while ( !( UCSR0A & (1 << RXC0) ));
	
	return UDR0;	
}
 1b0:	cf 93       	push	r28
 1b2:	c8 2f       	mov	r28, r24
 1b4:	8a 30       	cpi	r24, 0x0A	; 10
 1b6:	19 f4       	brne	.+6      	; 0x1be <uart_putchar+0xe>
 1b8:	8d e0       	ldi	r24, 0x0D	; 13
 1ba:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <uart_putchar>
 1be:	5d 9b       	sbis	0x0b, 5	; 11
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <uart_putchar+0xe>
 1c2:	cc b9       	out	0x0c, r28	; 12
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <USART_Init>:
 1cc:	90 bd       	out	0x20, r25	; 32
 1ce:	89 b9       	out	0x09, r24	; 9
 1d0:	88 e1       	ldi	r24, 0x18	; 24
 1d2:	8a b9       	out	0x0a, r24	; 10
 1d4:	8a b1       	in	r24, 0x0a	; 10
 1d6:	80 68       	ori	r24, 0x80	; 128
 1d8:	8a b9       	out	0x0a, r24	; 10
 1da:	8e e8       	ldi	r24, 0x8E	; 142
 1dc:	80 bd       	out	0x20, r24	; 32
 1de:	08 95       	ret

000001e0 <xmem_init>:
{
	//set_bit(SFIOR, XMM2);
	//clear_bit(SFIOR, XMM1);
	//clear_bit(SFIOR, XMM0);
	//set_bit(MCUCR, SRE);
	MCUCR |= (1<< SRE); //THIS MFER
 1e0:	85 b7       	in	r24, 0x35	; 53
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<< XMM2);
 1e6:	80 b7       	in	r24, 0x30	; 48
 1e8:	80 62       	ori	r24, 0x20	; 32
 1ea:	80 bf       	out	0x30, r24	; 48
 1ec:	08 95       	ret

000001ee <xmem_write>:
}

void xmem_write (uint8_t data , uint16_t addr)
{

	stdout = &mystdout;
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	31 e0       	ldi	r19, 0x01	; 1
 1f2:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <__iob+0x3>
 1f6:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <__iob+0x2>
	volatile char * ext_mem = (char *) BASE_ADDRESS;
	ext_mem [addr]= data ;
 1fa:	fb 01       	movw	r30, r22
 1fc:	80 83       	st	Z, r24
	uint8_t retreived_value = ext_mem[addr];
 1fe:	80 81       	ld	r24, Z
 200:	08 95       	ret

00000202 <xmem_read>:
}

uint8_t xmem_read (uint16_t addr)
{
	volatile char * ext_mem = (char *) BASE_ADDRESS;
	uint8_t ret_val = ext_mem [addr];
 202:	fc 01       	movw	r30, r24
 204:	80 81       	ld	r24, Z
	return ret_val ;
 206:	08 95       	ret

00000208 <__vector_19>:
#include "p1000_driver.h" 

extern uint8_t ADC_data [4];

ISR(USART0_RXC_vect)
{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
	char ReceivedByte;
	ReceivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
 214:	8c b1       	in	r24, 0x0c	; 12
	UDR0 = ReceivedByte; // Echo back the received byte back to the computer
 216:	8c b9       	out	0x0c, r24	; 12
}
 218:	8f 91       	pop	r24
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <__vector_15>:

ISR(TIMER1_OVF_vect)
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	cf 92       	push	r12
 230:	df 92       	push	r13
 232:	ef 92       	push	r14
 234:	ff 92       	push	r15
 236:	2f 93       	push	r18
 238:	3f 93       	push	r19
 23a:	4f 93       	push	r20
 23c:	5f 93       	push	r21
 23e:	6f 93       	push	r22
 240:	7f 93       	push	r23
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
 246:	af 93       	push	r26
 248:	bf 93       	push	r27
 24a:	ef 93       	push	r30
 24c:	ff 93       	push	r31
	OCR1A = (dutyCircle/100.0)*ICR1;
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	48 ec       	ldi	r20, 0xC8	; 200
 254:	52 e4       	ldi	r21, 0x42	; 66
 256:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <__data_end>
 25a:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <__data_end+0x1>
 25e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end+0x2>
 262:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x3>
 266:	0e 94 b5 02 	call	0x56a	; 0x56a <__divsf3>
 26a:	6b 01       	movw	r12, r22
 26c:	7c 01       	movw	r14, r24
 26e:	64 b5       	in	r22, 0x24	; 36
 270:	75 b5       	in	r23, 0x25	; 37
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 56 03 	call	0x6ac	; 0x6ac <__floatunsisf>
 27a:	a7 01       	movw	r20, r14
 27c:	96 01       	movw	r18, r12
 27e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__mulsf3>
 282:	0e 94 27 03 	call	0x64e	; 0x64e <__fixunssfsi>
 286:	7b bd       	out	0x2b, r23	; 43
 288:	6a bd       	out	0x2a, r22	; 42
}
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	bf 91       	pop	r27
 290:	af 91       	pop	r26
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	7f 91       	pop	r23
 298:	6f 91       	pop	r22
 29a:	5f 91       	pop	r21
 29c:	4f 91       	pop	r20
 29e:	3f 91       	pop	r19
 2a0:	2f 91       	pop	r18
 2a2:	ff 90       	pop	r15
 2a4:	ef 90       	pop	r14
 2a6:	df 90       	pop	r13
 2a8:	cf 90       	pop	r12
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <__vector_3>:

ISR(INT2_vect)
{
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	2f 93       	push	r18
 2c0:	3f 93       	push	r19
 2c2:	4f 93       	push	r20
 2c4:	5f 93       	push	r21
 2c6:	6f 93       	push	r22
 2c8:	7f 93       	push	r23
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	af 93       	push	r26
 2d0:	bf 93       	push	r27
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
	ADC_read(ADC_data);
 2d6:	82 e1       	ldi	r24, 0x12	; 18
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 b6 00 	call	0x16c	; 0x16c <ADC_read>
	// xmem_write(0x52, 0x1400);

}
 2de:	ff 91       	pop	r31
 2e0:	ef 91       	pop	r30
 2e2:	bf 91       	pop	r27
 2e4:	af 91       	pop	r26
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	7f 91       	pop	r23
 2ec:	6f 91       	pop	r22
 2ee:	5f 91       	pop	r21
 2f0:	4f 91       	pop	r20
 2f2:	3f 91       	pop	r19
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <main>:
	
	float x_per;
	float y_per;
	pos_t position;
	int calibrated = 0;
	dutyCircle = 50;
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	a8 e4       	ldi	r26, 0x48	; 72
 306:	b2 e4       	ldi	r27, 0x42	; 66
 308:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 30c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
 310:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <__data_end+0x2>
 314:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <__data_end+0x3>

	(x_per) = 0;
	(y_per) = 0;


	stdout = &mystdout;
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__iob+0x3>
 320:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__iob+0x2>

	USART_Init(UBRR);
 324:	8f e1       	ldi	r24, 0x1F	; 31
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 e6 00 	call	0x1cc	; 0x1cc <USART_Init>
		
	xmem_init();
 32c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <xmem_init>
		
	PWM_Init();
 330:	0e 94 57 00 	call	0xae	; 0xae <PWM_Init>
	ADC_init();
 334:	0e 94 a3 00 	call	0x146	; 0x146 <ADC_init>
		
	sei(); // Enable all interrupt
 338:	78 94       	sei

	size_arrow = 1;
	page_arrow = 0;
	y_arrow = 0;
	
	oled_init();
 33a:	0e 94 ad 01 	call	0x35a	; 0x35a <oled_init>
	oled_home();
 33e:	0e 94 4a 02 	call	0x494	; 0x494 <oled_home>
	oled_reset();
 342:	0e 94 1c 02 	call	0x438	; 0x438 <oled_reset>
	//oled_home();
	
	//oled_print_arrow(page_arrow, y_arrow, 0);
	
	
	oled_print_arrow(page_arrow, y_arrow, 0);
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 71 02 	call	0x4e2	; 0x4e2 <oled_print_arrow>
		}
		
		_delay_ms(1);
	}
	*/
}
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	08 95       	ret

0000035a <oled_init>:
	while (word[i] != '\0')
	{
		write_char(word[i]);
		++i;
	}
}
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	70 e1       	ldi	r23, 0x10	; 16
 35e:	8e ea       	ldi	r24, 0xAE	; 174
 360:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e1       	ldi	r23, 0x10	; 16
 368:	81 ea       	ldi	r24, 0xA1	; 161
 36a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	70 e1       	ldi	r23, 0x10	; 16
 372:	8a ed       	ldi	r24, 0xDA	; 218
 374:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	70 e1       	ldi	r23, 0x10	; 16
 37c:	82 e1       	ldi	r24, 0x12	; 18
 37e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	70 e1       	ldi	r23, 0x10	; 16
 386:	88 ec       	ldi	r24, 0xC8	; 200
 388:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	70 e1       	ldi	r23, 0x10	; 16
 390:	88 ea       	ldi	r24, 0xA8	; 168
 392:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	70 e1       	ldi	r23, 0x10	; 16
 39a:	8f e3       	ldi	r24, 0x3F	; 63
 39c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	70 e1       	ldi	r23, 0x10	; 16
 3a4:	85 ed       	ldi	r24, 0xD5	; 213
 3a6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	70 e1       	ldi	r23, 0x10	; 16
 3ae:	80 e8       	ldi	r24, 0x80	; 128
 3b0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	70 e1       	ldi	r23, 0x10	; 16
 3b8:	81 e8       	ldi	r24, 0x81	; 129
 3ba:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	70 e1       	ldi	r23, 0x10	; 16
 3c2:	80 e5       	ldi	r24, 0x50	; 80
 3c4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	70 e1       	ldi	r23, 0x10	; 16
 3cc:	89 ed       	ldi	r24, 0xD9	; 217
 3ce:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	70 e1       	ldi	r23, 0x10	; 16
 3d6:	81 e2       	ldi	r24, 0x21	; 33
 3d8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	70 e1       	ldi	r23, 0x10	; 16
 3e0:	80 e2       	ldi	r24, 0x20	; 32
 3e2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	70 e1       	ldi	r23, 0x10	; 16
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	70 e1       	ldi	r23, 0x10	; 16
 3f4:	8b ed       	ldi	r24, 0xDB	; 219
 3f6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	70 e1       	ldi	r23, 0x10	; 16
 3fe:	80 e3       	ldi	r24, 0x30	; 48
 400:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	70 e1       	ldi	r23, 0x10	; 16
 408:	8d ea       	ldi	r24, 0xAD	; 173
 40a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	70 e1       	ldi	r23, 0x10	; 16
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	70 e1       	ldi	r23, 0x10	; 16
 41c:	84 ea       	ldi	r24, 0xA4	; 164
 41e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	70 e1       	ldi	r23, 0x10	; 16
 426:	86 ea       	ldi	r24, 0xA6	; 166
 428:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	70 e1       	ldi	r23, 0x10	; 16
 430:	8f ea       	ldi	r24, 0xAF	; 175
 432:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 436:	08 95       	ret

00000438 <oled_reset>:
 438:	ff 92       	push	r15
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	70 e1       	ldi	r23, 0x10	; 16
 446:	80 eb       	ldi	r24, 0xB0	; 176
 448:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 44c:	00 e0       	ldi	r16, 0x00	; 0
 44e:	10 e0       	ldi	r17, 0x00	; 0
 450:	0f 2e       	mov	r0, r31
 452:	f0 eb       	ldi	r31, 0xB0	; 176
 454:	ff 2e       	mov	r15, r31
 456:	f0 2d       	mov	r31, r0
 458:	14 c0       	rjmp	.+40     	; 0x482 <oled_reset+0x4a>
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	72 e1       	ldi	r23, 0x12	; 18
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 464:	21 96       	adiw	r28, 0x01	; 1
 466:	02 c0       	rjmp	.+4      	; 0x46c <oled_reset+0x34>
 468:	c0 e0       	ldi	r28, 0x00	; 0
 46a:	d0 e0       	ldi	r29, 0x00	; 0
 46c:	c0 38       	cpi	r28, 0x80	; 128
 46e:	d1 05       	cpc	r29, r1
 470:	a4 f3       	brlt	.-24     	; 0x45a <oled_reset+0x22>
 472:	f3 94       	inc	r15
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	70 e1       	ldi	r23, 0x10	; 16
 478:	8f 2d       	mov	r24, r15
 47a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 47e:	0f 5f       	subi	r16, 0xFF	; 255
 480:	1f 4f       	sbci	r17, 0xFF	; 255
 482:	08 30       	cpi	r16, 0x08	; 8
 484:	11 05       	cpc	r17, r1
 486:	84 f3       	brlt	.-32     	; 0x468 <oled_reset+0x30>
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	1f 91       	pop	r17
 48e:	0f 91       	pop	r16
 490:	ff 90       	pop	r15
 492:	08 95       	ret

00000494 <oled_home>:
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	70 e1       	ldi	r23, 0x10	; 16
 498:	80 eb       	ldi	r24, 0xB0	; 176
 49a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	70 e1       	ldi	r23, 0x10	; 16
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	70 e1       	ldi	r23, 0x10	; 16
 4ac:	80 e1       	ldi	r24, 0x10	; 16
 4ae:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 4b2:	08 95       	ret

000004b4 <go_to_row>:
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	70 e1       	ldi	r23, 0x10	; 16
 4b8:	80 55       	subi	r24, 0x50	; 80
 4ba:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 4be:	08 95       	ret

000004c0 <go_to_col>:
 4c0:	cf 93       	push	r28
 4c2:	c8 2f       	mov	r28, r24
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	70 e1       	ldi	r23, 0x10	; 16
 4c8:	8f 70       	andi	r24, 0x0F	; 15
 4ca:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 4ce:	8c 2f       	mov	r24, r28
 4d0:	82 95       	swap	r24
 4d2:	8f 70       	andi	r24, 0x0F	; 15
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	70 e1       	ldi	r23, 0x10	; 16
 4d8:	80 5f       	subi	r24, 0xF0	; 240
 4da:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 4de:	cf 91       	pop	r28
 4e0:	08 95       	ret

000004e2 <oled_print_arrow>:

void oled_print_arrow (int row , int col, uint8_t clear)
{
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	8c 01       	movw	r16, r24
 4ea:	86 2f       	mov	r24, r22
 4ec:	c4 2f       	mov	r28, r20
	go_to_col(col);
 4ee:	0e 94 60 02 	call	0x4c0	; 0x4c0 <go_to_col>
	go_to_row(row);
 4f2:	c8 01       	movw	r24, r16
 4f4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <go_to_row>
	//_delay_ms(5);
	if(clear < 1)
 4f8:	c1 11       	cpse	r28, r1
 4fa:	1a c0       	rjmp	.+52     	; 0x530 <__stack+0x31>
	{
		xmem_write(0b00011000, 0x1200);
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	72 e1       	ldi	r23, 0x12	; 18
 500:	88 e1       	ldi	r24, 0x18	; 24
 502:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
		xmem_write(0b00011000, 0x1200 );
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	72 e1       	ldi	r23, 0x12	; 18
 50a:	88 e1       	ldi	r24, 0x18	; 24
 50c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
		xmem_write(0b01111110, 0x1200 );
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	72 e1       	ldi	r23, 0x12	; 18
 514:	8e e7       	ldi	r24, 0x7E	; 126
 516:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
		xmem_write(0b00111100, 0x1200 );
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	72 e1       	ldi	r23, 0x12	; 18
 51e:	8c e3       	ldi	r24, 0x3C	; 60
 520:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
		xmem_write(0b00011000, 0x1200 );
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	72 e1       	ldi	r23, 0x12	; 18
 528:	88 e1       	ldi	r24, 0x18	; 24
 52a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
 52e:	19 c0       	rjmp	.+50     	; 0x562 <__stack+0x63>
	}else
	{
		xmem_write(0b00000000, 0x1200);
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	72 e1       	ldi	r23, 0x12	; 18
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
		xmem_write(0b00000000, 0x1200 );
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	72 e1       	ldi	r23, 0x12	; 18
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
		xmem_write(0b00000000, 0x1200 );
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	72 e1       	ldi	r23, 0x12	; 18
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
		xmem_write(0b00000000, 0x1200 );
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	72 e1       	ldi	r23, 0x12	; 18
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
		xmem_write(0b00000000, 0x1200 );		
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	72 e1       	ldi	r23, 0x12	; 18
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <xmem_write>
	}
}
 562:	cf 91       	pop	r28
 564:	1f 91       	pop	r17
 566:	0f 91       	pop	r16
 568:	08 95       	ret

0000056a <__divsf3>:
 56a:	0e 94 c9 02 	call	0x592	; 0x592 <__divsf3x>
 56e:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_round>
 572:	0e 94 a3 03 	call	0x746	; 0x746 <__fp_pscB>
 576:	58 f0       	brcs	.+22     	; 0x58e <__divsf3+0x24>
 578:	0e 94 9c 03 	call	0x738	; 0x738 <__fp_pscA>
 57c:	40 f0       	brcs	.+16     	; 0x58e <__divsf3+0x24>
 57e:	29 f4       	brne	.+10     	; 0x58a <__divsf3+0x20>
 580:	5f 3f       	cpi	r21, 0xFF	; 255
 582:	29 f0       	breq	.+10     	; 0x58e <__divsf3+0x24>
 584:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_inf>
 588:	51 11       	cpse	r21, r1
 58a:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_szero>
 58e:	0c 94 99 03 	jmp	0x732	; 0x732 <__fp_nan>

00000592 <__divsf3x>:
 592:	0e 94 bb 03 	call	0x776	; 0x776 <__fp_split3>
 596:	68 f3       	brcs	.-38     	; 0x572 <__divsf3+0x8>

00000598 <__divsf3_pse>:
 598:	99 23       	and	r25, r25
 59a:	b1 f3       	breq	.-20     	; 0x588 <__divsf3+0x1e>
 59c:	55 23       	and	r21, r21
 59e:	91 f3       	breq	.-28     	; 0x584 <__divsf3+0x1a>
 5a0:	95 1b       	sub	r25, r21
 5a2:	55 0b       	sbc	r21, r21
 5a4:	bb 27       	eor	r27, r27
 5a6:	aa 27       	eor	r26, r26
 5a8:	62 17       	cp	r22, r18
 5aa:	73 07       	cpc	r23, r19
 5ac:	84 07       	cpc	r24, r20
 5ae:	38 f0       	brcs	.+14     	; 0x5be <__divsf3_pse+0x26>
 5b0:	9f 5f       	subi	r25, 0xFF	; 255
 5b2:	5f 4f       	sbci	r21, 0xFF	; 255
 5b4:	22 0f       	add	r18, r18
 5b6:	33 1f       	adc	r19, r19
 5b8:	44 1f       	adc	r20, r20
 5ba:	aa 1f       	adc	r26, r26
 5bc:	a9 f3       	breq	.-22     	; 0x5a8 <__divsf3_pse+0x10>
 5be:	35 d0       	rcall	.+106    	; 0x62a <__divsf3_pse+0x92>
 5c0:	0e 2e       	mov	r0, r30
 5c2:	3a f0       	brmi	.+14     	; 0x5d2 <__divsf3_pse+0x3a>
 5c4:	e0 e8       	ldi	r30, 0x80	; 128
 5c6:	32 d0       	rcall	.+100    	; 0x62c <__divsf3_pse+0x94>
 5c8:	91 50       	subi	r25, 0x01	; 1
 5ca:	50 40       	sbci	r21, 0x00	; 0
 5cc:	e6 95       	lsr	r30
 5ce:	00 1c       	adc	r0, r0
 5d0:	ca f7       	brpl	.-14     	; 0x5c4 <__divsf3_pse+0x2c>
 5d2:	2b d0       	rcall	.+86     	; 0x62a <__divsf3_pse+0x92>
 5d4:	fe 2f       	mov	r31, r30
 5d6:	29 d0       	rcall	.+82     	; 0x62a <__divsf3_pse+0x92>
 5d8:	66 0f       	add	r22, r22
 5da:	77 1f       	adc	r23, r23
 5dc:	88 1f       	adc	r24, r24
 5de:	bb 1f       	adc	r27, r27
 5e0:	26 17       	cp	r18, r22
 5e2:	37 07       	cpc	r19, r23
 5e4:	48 07       	cpc	r20, r24
 5e6:	ab 07       	cpc	r26, r27
 5e8:	b0 e8       	ldi	r27, 0x80	; 128
 5ea:	09 f0       	breq	.+2      	; 0x5ee <__divsf3_pse+0x56>
 5ec:	bb 0b       	sbc	r27, r27
 5ee:	80 2d       	mov	r24, r0
 5f0:	bf 01       	movw	r22, r30
 5f2:	ff 27       	eor	r31, r31
 5f4:	93 58       	subi	r25, 0x83	; 131
 5f6:	5f 4f       	sbci	r21, 0xFF	; 255
 5f8:	3a f0       	brmi	.+14     	; 0x608 <__divsf3_pse+0x70>
 5fa:	9e 3f       	cpi	r25, 0xFE	; 254
 5fc:	51 05       	cpc	r21, r1
 5fe:	78 f0       	brcs	.+30     	; 0x61e <__divsf3_pse+0x86>
 600:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_inf>
 604:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_szero>
 608:	5f 3f       	cpi	r21, 0xFF	; 255
 60a:	e4 f3       	brlt	.-8      	; 0x604 <__divsf3_pse+0x6c>
 60c:	98 3e       	cpi	r25, 0xE8	; 232
 60e:	d4 f3       	brlt	.-12     	; 0x604 <__divsf3_pse+0x6c>
 610:	86 95       	lsr	r24
 612:	77 95       	ror	r23
 614:	67 95       	ror	r22
 616:	b7 95       	ror	r27
 618:	f7 95       	ror	r31
 61a:	9f 5f       	subi	r25, 0xFF	; 255
 61c:	c9 f7       	brne	.-14     	; 0x610 <__divsf3_pse+0x78>
 61e:	88 0f       	add	r24, r24
 620:	91 1d       	adc	r25, r1
 622:	96 95       	lsr	r25
 624:	87 95       	ror	r24
 626:	97 f9       	bld	r25, 7
 628:	08 95       	ret
 62a:	e1 e0       	ldi	r30, 0x01	; 1
 62c:	66 0f       	add	r22, r22
 62e:	77 1f       	adc	r23, r23
 630:	88 1f       	adc	r24, r24
 632:	bb 1f       	adc	r27, r27
 634:	62 17       	cp	r22, r18
 636:	73 07       	cpc	r23, r19
 638:	84 07       	cpc	r24, r20
 63a:	ba 07       	cpc	r27, r26
 63c:	20 f0       	brcs	.+8      	; 0x646 <__divsf3_pse+0xae>
 63e:	62 1b       	sub	r22, r18
 640:	73 0b       	sbc	r23, r19
 642:	84 0b       	sbc	r24, r20
 644:	ba 0b       	sbc	r27, r26
 646:	ee 1f       	adc	r30, r30
 648:	88 f7       	brcc	.-30     	; 0x62c <__divsf3_pse+0x94>
 64a:	e0 95       	com	r30
 64c:	08 95       	ret

0000064e <__fixunssfsi>:
 64e:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_splitA>
 652:	88 f0       	brcs	.+34     	; 0x676 <__fixunssfsi+0x28>
 654:	9f 57       	subi	r25, 0x7F	; 127
 656:	98 f0       	brcs	.+38     	; 0x67e <__fixunssfsi+0x30>
 658:	b9 2f       	mov	r27, r25
 65a:	99 27       	eor	r25, r25
 65c:	b7 51       	subi	r27, 0x17	; 23
 65e:	b0 f0       	brcs	.+44     	; 0x68c <__fixunssfsi+0x3e>
 660:	e1 f0       	breq	.+56     	; 0x69a <__fixunssfsi+0x4c>
 662:	66 0f       	add	r22, r22
 664:	77 1f       	adc	r23, r23
 666:	88 1f       	adc	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	1a f0       	brmi	.+6      	; 0x672 <__fixunssfsi+0x24>
 66c:	ba 95       	dec	r27
 66e:	c9 f7       	brne	.-14     	; 0x662 <__fixunssfsi+0x14>
 670:	14 c0       	rjmp	.+40     	; 0x69a <__fixunssfsi+0x4c>
 672:	b1 30       	cpi	r27, 0x01	; 1
 674:	91 f0       	breq	.+36     	; 0x69a <__fixunssfsi+0x4c>
 676:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_zero>
 67a:	b1 e0       	ldi	r27, 0x01	; 1
 67c:	08 95       	ret
 67e:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__fp_zero>
 682:	67 2f       	mov	r22, r23
 684:	78 2f       	mov	r23, r24
 686:	88 27       	eor	r24, r24
 688:	b8 5f       	subi	r27, 0xF8	; 248
 68a:	39 f0       	breq	.+14     	; 0x69a <__fixunssfsi+0x4c>
 68c:	b9 3f       	cpi	r27, 0xF9	; 249
 68e:	cc f3       	brlt	.-14     	; 0x682 <__fixunssfsi+0x34>
 690:	86 95       	lsr	r24
 692:	77 95       	ror	r23
 694:	67 95       	ror	r22
 696:	b3 95       	inc	r27
 698:	d9 f7       	brne	.-10     	; 0x690 <__fixunssfsi+0x42>
 69a:	3e f4       	brtc	.+14     	; 0x6aa <__fixunssfsi+0x5c>
 69c:	90 95       	com	r25
 69e:	80 95       	com	r24
 6a0:	70 95       	com	r23
 6a2:	61 95       	neg	r22
 6a4:	7f 4f       	sbci	r23, 0xFF	; 255
 6a6:	8f 4f       	sbci	r24, 0xFF	; 255
 6a8:	9f 4f       	sbci	r25, 0xFF	; 255
 6aa:	08 95       	ret

000006ac <__floatunsisf>:
 6ac:	e8 94       	clt
 6ae:	09 c0       	rjmp	.+18     	; 0x6c2 <__floatsisf+0x12>

000006b0 <__floatsisf>:
 6b0:	97 fb       	bst	r25, 7
 6b2:	3e f4       	brtc	.+14     	; 0x6c2 <__floatsisf+0x12>
 6b4:	90 95       	com	r25
 6b6:	80 95       	com	r24
 6b8:	70 95       	com	r23
 6ba:	61 95       	neg	r22
 6bc:	7f 4f       	sbci	r23, 0xFF	; 255
 6be:	8f 4f       	sbci	r24, 0xFF	; 255
 6c0:	9f 4f       	sbci	r25, 0xFF	; 255
 6c2:	99 23       	and	r25, r25
 6c4:	a9 f0       	breq	.+42     	; 0x6f0 <__floatsisf+0x40>
 6c6:	f9 2f       	mov	r31, r25
 6c8:	96 e9       	ldi	r25, 0x96	; 150
 6ca:	bb 27       	eor	r27, r27
 6cc:	93 95       	inc	r25
 6ce:	f6 95       	lsr	r31
 6d0:	87 95       	ror	r24
 6d2:	77 95       	ror	r23
 6d4:	67 95       	ror	r22
 6d6:	b7 95       	ror	r27
 6d8:	f1 11       	cpse	r31, r1
 6da:	f8 cf       	rjmp	.-16     	; 0x6cc <__floatsisf+0x1c>
 6dc:	fa f4       	brpl	.+62     	; 0x71c <__floatsisf+0x6c>
 6de:	bb 0f       	add	r27, r27
 6e0:	11 f4       	brne	.+4      	; 0x6e6 <__floatsisf+0x36>
 6e2:	60 ff       	sbrs	r22, 0
 6e4:	1b c0       	rjmp	.+54     	; 0x71c <__floatsisf+0x6c>
 6e6:	6f 5f       	subi	r22, 0xFF	; 255
 6e8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ea:	8f 4f       	sbci	r24, 0xFF	; 255
 6ec:	9f 4f       	sbci	r25, 0xFF	; 255
 6ee:	16 c0       	rjmp	.+44     	; 0x71c <__floatsisf+0x6c>
 6f0:	88 23       	and	r24, r24
 6f2:	11 f0       	breq	.+4      	; 0x6f8 <__floatsisf+0x48>
 6f4:	96 e9       	ldi	r25, 0x96	; 150
 6f6:	11 c0       	rjmp	.+34     	; 0x71a <__floatsisf+0x6a>
 6f8:	77 23       	and	r23, r23
 6fa:	21 f0       	breq	.+8      	; 0x704 <__floatsisf+0x54>
 6fc:	9e e8       	ldi	r25, 0x8E	; 142
 6fe:	87 2f       	mov	r24, r23
 700:	76 2f       	mov	r23, r22
 702:	05 c0       	rjmp	.+10     	; 0x70e <__floatsisf+0x5e>
 704:	66 23       	and	r22, r22
 706:	71 f0       	breq	.+28     	; 0x724 <__floatsisf+0x74>
 708:	96 e8       	ldi	r25, 0x86	; 134
 70a:	86 2f       	mov	r24, r22
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	60 e0       	ldi	r22, 0x00	; 0
 710:	2a f0       	brmi	.+10     	; 0x71c <__floatsisf+0x6c>
 712:	9a 95       	dec	r25
 714:	66 0f       	add	r22, r22
 716:	77 1f       	adc	r23, r23
 718:	88 1f       	adc	r24, r24
 71a:	da f7       	brpl	.-10     	; 0x712 <__floatsisf+0x62>
 71c:	88 0f       	add	r24, r24
 71e:	96 95       	lsr	r25
 720:	87 95       	ror	r24
 722:	97 f9       	bld	r25, 7
 724:	08 95       	ret

00000726 <__fp_inf>:
 726:	97 f9       	bld	r25, 7
 728:	9f 67       	ori	r25, 0x7F	; 127
 72a:	80 e8       	ldi	r24, 0x80	; 128
 72c:	70 e0       	ldi	r23, 0x00	; 0
 72e:	60 e0       	ldi	r22, 0x00	; 0
 730:	08 95       	ret

00000732 <__fp_nan>:
 732:	9f ef       	ldi	r25, 0xFF	; 255
 734:	80 ec       	ldi	r24, 0xC0	; 192
 736:	08 95       	ret

00000738 <__fp_pscA>:
 738:	00 24       	eor	r0, r0
 73a:	0a 94       	dec	r0
 73c:	16 16       	cp	r1, r22
 73e:	17 06       	cpc	r1, r23
 740:	18 06       	cpc	r1, r24
 742:	09 06       	cpc	r0, r25
 744:	08 95       	ret

00000746 <__fp_pscB>:
 746:	00 24       	eor	r0, r0
 748:	0a 94       	dec	r0
 74a:	12 16       	cp	r1, r18
 74c:	13 06       	cpc	r1, r19
 74e:	14 06       	cpc	r1, r20
 750:	05 06       	cpc	r0, r21
 752:	08 95       	ret

00000754 <__fp_round>:
 754:	09 2e       	mov	r0, r25
 756:	03 94       	inc	r0
 758:	00 0c       	add	r0, r0
 75a:	11 f4       	brne	.+4      	; 0x760 <__fp_round+0xc>
 75c:	88 23       	and	r24, r24
 75e:	52 f0       	brmi	.+20     	; 0x774 <__fp_round+0x20>
 760:	bb 0f       	add	r27, r27
 762:	40 f4       	brcc	.+16     	; 0x774 <__fp_round+0x20>
 764:	bf 2b       	or	r27, r31
 766:	11 f4       	brne	.+4      	; 0x76c <__fp_round+0x18>
 768:	60 ff       	sbrs	r22, 0
 76a:	04 c0       	rjmp	.+8      	; 0x774 <__fp_round+0x20>
 76c:	6f 5f       	subi	r22, 0xFF	; 255
 76e:	7f 4f       	sbci	r23, 0xFF	; 255
 770:	8f 4f       	sbci	r24, 0xFF	; 255
 772:	9f 4f       	sbci	r25, 0xFF	; 255
 774:	08 95       	ret

00000776 <__fp_split3>:
 776:	57 fd       	sbrc	r21, 7
 778:	90 58       	subi	r25, 0x80	; 128
 77a:	44 0f       	add	r20, r20
 77c:	55 1f       	adc	r21, r21
 77e:	59 f0       	breq	.+22     	; 0x796 <__fp_splitA+0x10>
 780:	5f 3f       	cpi	r21, 0xFF	; 255
 782:	71 f0       	breq	.+28     	; 0x7a0 <__fp_splitA+0x1a>
 784:	47 95       	ror	r20

00000786 <__fp_splitA>:
 786:	88 0f       	add	r24, r24
 788:	97 fb       	bst	r25, 7
 78a:	99 1f       	adc	r25, r25
 78c:	61 f0       	breq	.+24     	; 0x7a6 <__fp_splitA+0x20>
 78e:	9f 3f       	cpi	r25, 0xFF	; 255
 790:	79 f0       	breq	.+30     	; 0x7b0 <__fp_splitA+0x2a>
 792:	87 95       	ror	r24
 794:	08 95       	ret
 796:	12 16       	cp	r1, r18
 798:	13 06       	cpc	r1, r19
 79a:	14 06       	cpc	r1, r20
 79c:	55 1f       	adc	r21, r21
 79e:	f2 cf       	rjmp	.-28     	; 0x784 <__fp_split3+0xe>
 7a0:	46 95       	lsr	r20
 7a2:	f1 df       	rcall	.-30     	; 0x786 <__fp_splitA>
 7a4:	08 c0       	rjmp	.+16     	; 0x7b6 <__fp_splitA+0x30>
 7a6:	16 16       	cp	r1, r22
 7a8:	17 06       	cpc	r1, r23
 7aa:	18 06       	cpc	r1, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	f1 cf       	rjmp	.-30     	; 0x792 <__fp_splitA+0xc>
 7b0:	86 95       	lsr	r24
 7b2:	71 05       	cpc	r23, r1
 7b4:	61 05       	cpc	r22, r1
 7b6:	08 94       	sec
 7b8:	08 95       	ret

000007ba <__fp_zero>:
 7ba:	e8 94       	clt

000007bc <__fp_szero>:
 7bc:	bb 27       	eor	r27, r27
 7be:	66 27       	eor	r22, r22
 7c0:	77 27       	eor	r23, r23
 7c2:	cb 01       	movw	r24, r22
 7c4:	97 f9       	bld	r25, 7
 7c6:	08 95       	ret

000007c8 <__mulsf3>:
 7c8:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__mulsf3x>
 7cc:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_round>
 7d0:	0e 94 9c 03 	call	0x738	; 0x738 <__fp_pscA>
 7d4:	38 f0       	brcs	.+14     	; 0x7e4 <__mulsf3+0x1c>
 7d6:	0e 94 a3 03 	call	0x746	; 0x746 <__fp_pscB>
 7da:	20 f0       	brcs	.+8      	; 0x7e4 <__mulsf3+0x1c>
 7dc:	95 23       	and	r25, r21
 7de:	11 f0       	breq	.+4      	; 0x7e4 <__mulsf3+0x1c>
 7e0:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_inf>
 7e4:	0c 94 99 03 	jmp	0x732	; 0x732 <__fp_nan>
 7e8:	11 24       	eor	r1, r1
 7ea:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_szero>

000007ee <__mulsf3x>:
 7ee:	0e 94 bb 03 	call	0x776	; 0x776 <__fp_split3>
 7f2:	70 f3       	brcs	.-36     	; 0x7d0 <__mulsf3+0x8>

000007f4 <__mulsf3_pse>:
 7f4:	95 9f       	mul	r25, r21
 7f6:	c1 f3       	breq	.-16     	; 0x7e8 <__mulsf3+0x20>
 7f8:	95 0f       	add	r25, r21
 7fa:	50 e0       	ldi	r21, 0x00	; 0
 7fc:	55 1f       	adc	r21, r21
 7fe:	62 9f       	mul	r22, r18
 800:	f0 01       	movw	r30, r0
 802:	72 9f       	mul	r23, r18
 804:	bb 27       	eor	r27, r27
 806:	f0 0d       	add	r31, r0
 808:	b1 1d       	adc	r27, r1
 80a:	63 9f       	mul	r22, r19
 80c:	aa 27       	eor	r26, r26
 80e:	f0 0d       	add	r31, r0
 810:	b1 1d       	adc	r27, r1
 812:	aa 1f       	adc	r26, r26
 814:	64 9f       	mul	r22, r20
 816:	66 27       	eor	r22, r22
 818:	b0 0d       	add	r27, r0
 81a:	a1 1d       	adc	r26, r1
 81c:	66 1f       	adc	r22, r22
 81e:	82 9f       	mul	r24, r18
 820:	22 27       	eor	r18, r18
 822:	b0 0d       	add	r27, r0
 824:	a1 1d       	adc	r26, r1
 826:	62 1f       	adc	r22, r18
 828:	73 9f       	mul	r23, r19
 82a:	b0 0d       	add	r27, r0
 82c:	a1 1d       	adc	r26, r1
 82e:	62 1f       	adc	r22, r18
 830:	83 9f       	mul	r24, r19
 832:	a0 0d       	add	r26, r0
 834:	61 1d       	adc	r22, r1
 836:	22 1f       	adc	r18, r18
 838:	74 9f       	mul	r23, r20
 83a:	33 27       	eor	r19, r19
 83c:	a0 0d       	add	r26, r0
 83e:	61 1d       	adc	r22, r1
 840:	23 1f       	adc	r18, r19
 842:	84 9f       	mul	r24, r20
 844:	60 0d       	add	r22, r0
 846:	21 1d       	adc	r18, r1
 848:	82 2f       	mov	r24, r18
 84a:	76 2f       	mov	r23, r22
 84c:	6a 2f       	mov	r22, r26
 84e:	11 24       	eor	r1, r1
 850:	9f 57       	subi	r25, 0x7F	; 127
 852:	50 40       	sbci	r21, 0x00	; 0
 854:	9a f0       	brmi	.+38     	; 0x87c <__mulsf3_pse+0x88>
 856:	f1 f0       	breq	.+60     	; 0x894 <__mulsf3_pse+0xa0>
 858:	88 23       	and	r24, r24
 85a:	4a f0       	brmi	.+18     	; 0x86e <__mulsf3_pse+0x7a>
 85c:	ee 0f       	add	r30, r30
 85e:	ff 1f       	adc	r31, r31
 860:	bb 1f       	adc	r27, r27
 862:	66 1f       	adc	r22, r22
 864:	77 1f       	adc	r23, r23
 866:	88 1f       	adc	r24, r24
 868:	91 50       	subi	r25, 0x01	; 1
 86a:	50 40       	sbci	r21, 0x00	; 0
 86c:	a9 f7       	brne	.-22     	; 0x858 <__mulsf3_pse+0x64>
 86e:	9e 3f       	cpi	r25, 0xFE	; 254
 870:	51 05       	cpc	r21, r1
 872:	80 f0       	brcs	.+32     	; 0x894 <__mulsf3_pse+0xa0>
 874:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_inf>
 878:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_szero>
 87c:	5f 3f       	cpi	r21, 0xFF	; 255
 87e:	e4 f3       	brlt	.-8      	; 0x878 <__mulsf3_pse+0x84>
 880:	98 3e       	cpi	r25, 0xE8	; 232
 882:	d4 f3       	brlt	.-12     	; 0x878 <__mulsf3_pse+0x84>
 884:	86 95       	lsr	r24
 886:	77 95       	ror	r23
 888:	67 95       	ror	r22
 88a:	b7 95       	ror	r27
 88c:	f7 95       	ror	r31
 88e:	e7 95       	ror	r30
 890:	9f 5f       	subi	r25, 0xFF	; 255
 892:	c1 f7       	brne	.-16     	; 0x884 <__mulsf3_pse+0x90>
 894:	fe 2b       	or	r31, r30
 896:	88 0f       	add	r24, r24
 898:	91 1d       	adc	r25, r1
 89a:	96 95       	lsr	r25
 89c:	87 95       	ror	r24
 89e:	97 f9       	bld	r25, 7
 8a0:	08 95       	ret

000008a2 <_exit>:
 8a2:	f8 94       	cli

000008a4 <__stop_program>:
 8a4:	ff cf       	rjmp	.-2      	; 0x8a4 <__stop_program>
