
ArduinoNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001100  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00081100  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000090  20000434  00081534  00020434  2**2
                  ALLOC
  3 .stack        00000404  200004c4  000815c4  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008c8  000819c8  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000069b5  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000011d4  00000000  00000000  00026e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000f29  00000000  00000000  0002803f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000240  00000000  00000000  00028f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c0  00000000  00000000  000291a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012bac  00000000  00000000  00029368  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005039  00000000  00000000  0003bf14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000554c8  00000000  00000000  00040f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000064c  00000000  00000000  00096418  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	c8 08 00 20 ed 03 08 00 e9 03 08 00 e9 03 08 00     ... ............
   80010:	e9 03 08 00 e9 03 08 00 e9 03 08 00 00 00 00 00     ................
	...
   8002c:	e9 03 08 00 e9 03 08 00 00 00 00 00 e9 03 08 00     ................
   8003c:	e9 03 08 00 e9 03 08 00 e9 03 08 00 e9 03 08 00     ................
   8004c:	e9 03 08 00 e9 03 08 00 e9 03 08 00 e9 03 08 00     ................
   8005c:	e9 03 08 00 a5 0b 08 00 e9 03 08 00 00 00 00 00     ................
   8006c:	e9 03 08 00 e9 03 08 00 e9 03 08 00 e9 03 08 00     ................
	...
   80084:	e9 03 08 00 e9 03 08 00 e9 03 08 00 e9 03 08 00     ................
   80094:	e9 03 08 00 e9 03 08 00 e9 03 08 00 e9 03 08 00     ................
   800a4:	00 00 00 00 e9 03 08 00 e9 03 08 00 e9 03 08 00     ................
   800b4:	e9 03 08 00 e9 03 08 00 e9 03 08 00 e9 03 08 00     ................
   800c4:	e9 03 08 00 e9 03 08 00 e9 03 08 00 e9 03 08 00     ................
   800d4:	e9 03 08 00 e9 03 08 00 e9 03 08 00 e9 03 08 00     ................
   800e4:	e9 03 08 00 e9 03 08 00 e9 02 08 00 e9 03 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00081100 	.word	0x00081100

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081100 	.word	0x00081100
   80154:	20000438 	.word	0x20000438
   80158:	00081100 	.word	0x00081100
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if((num_rx_mb > 8) | (num_tx_mb > 8) | (num_rx_mb + num_tx_mb > 8))
   80162:	1857      	adds	r7, r2, r1
   80164:	2f08      	cmp	r7, #8
   80166:	bfd4      	ite	le
   80168:	2300      	movle	r3, #0
   8016a:	2301      	movgt	r3, #1
   8016c:	2908      	cmp	r1, #8
   8016e:	bf98      	it	ls
   80170:	2a08      	cmpls	r2, #8
   80172:	d85c      	bhi.n	8022e <can_init+0xce>
   80174:	460d      	mov	r5, r1
   80176:	2b00      	cmp	r3, #0
   80178:	d159      	bne.n	8022e <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   8017a:	4a2e      	ldr	r2, [pc, #184]	; (80234 <can_init+0xd4>)
   8017c:	6813      	ldr	r3, [r2, #0]
   8017e:	f023 0301 	bic.w	r3, r3, #1
   80182:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   80184:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80186:	4b2c      	ldr	r3, [pc, #176]	; (80238 <can_init+0xd8>)
   80188:	f44f 7440 	mov.w	r4, #768	; 0x300
   8018c:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   8018e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80190:	f024 0403 	bic.w	r4, r4, #3
   80194:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80196:	2403      	movs	r4, #3
   80198:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   8019a:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   8019c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801a0:	4c26      	ldr	r4, [pc, #152]	; (8023c <can_init+0xdc>)
   801a2:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a6:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801aa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801ae:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801b2:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801b4:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801b6:	e019      	b.n	801ec <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b8:	481e      	ldr	r0, [pc, #120]	; (80234 <can_init+0xd4>)
   801ba:	f101 0310 	add.w	r3, r1, #16
   801be:	015b      	lsls	r3, r3, #5
   801c0:	18c2      	adds	r2, r0, r3
   801c2:	2600      	movs	r6, #0
   801c4:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801c6:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   801ca:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   801ce:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801d2:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   801d6:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801d8:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   801dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   801e0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801e4:	2301      	movs	r3, #1
   801e6:	408b      	lsls	r3, r1
   801e8:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ea:	3101      	adds	r1, #1
   801ec:	42b9      	cmp	r1, r7
   801ee:	dde3      	ble.n	801b8 <can_init+0x58>
   801f0:	2300      	movs	r3, #0
   801f2:	e00d      	b.n	80210 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801f4:	490f      	ldr	r1, [pc, #60]	; (80234 <can_init+0xd4>)
   801f6:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   801fa:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   801fe:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80202:	f103 0210 	add.w	r2, r3, #16
   80206:	0152      	lsls	r2, r2, #5
   80208:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   8020c:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8020e:	3301      	adds	r3, #1
   80210:	42ab      	cmp	r3, r5
   80212:	dbef      	blt.n	801f4 <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80214:	4b07      	ldr	r3, [pc, #28]	; (80234 <can_init+0xd4>)
   80216:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80218:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8021c:	4a08      	ldr	r2, [pc, #32]	; (80240 <can_init+0xe0>)
   8021e:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80220:	681a      	ldr	r2, [r3, #0]
   80222:	f042 0201 	orr.w	r2, r2, #1
   80226:	601a      	str	r2, [r3, #0]

	return 0;
   80228:	2000      	movs	r0, #0
}
   8022a:	bcf0      	pop	{r4, r5, r6, r7}
   8022c:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   8022e:	2001      	movs	r0, #1
   80230:	e7fb      	b.n	8022a <can_init+0xca>
   80232:	bf00      	nop
   80234:	400b4000 	.word	0x400b4000
   80238:	400e0e00 	.word	0x400e0e00
   8023c:	1000102b 	.word	0x1000102b
   80240:	e000e100 	.word	0xe000e100

00080244 <can_init_def_tx_rx_mb>:
{
   80244:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80246:	2202      	movs	r2, #2
   80248:	2101      	movs	r1, #1
   8024a:	4b01      	ldr	r3, [pc, #4]	; (80250 <can_init_def_tx_rx_mb+0xc>)
   8024c:	4798      	blx	r3
}
   8024e:	bd08      	pop	{r3, pc}
   80250:	00080161 	.word	0x00080161

00080254 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80254:	014b      	lsls	r3, r1, #5
   80256:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8025a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80262:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80266:	d033      	beq.n	802d0 <can_receive+0x7c>
{
   80268:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   8026a:	014b      	lsls	r3, r1, #5
   8026c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80270:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80274:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80278:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   8027c:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80280:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80284:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80286:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   8028a:	f3c5 4503 	ubfx	r5, r5, #16, #4
   8028e:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80290:	2300      	movs	r3, #0
   80292:	e003      	b.n	8029c <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80294:	18c6      	adds	r6, r0, r3
   80296:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   80298:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   8029a:	3301      	adds	r3, #1
   8029c:	42ab      	cmp	r3, r5
   8029e:	da05      	bge.n	802ac <can_receive+0x58>
			if(i < 4)
   802a0:	2b03      	cmp	r3, #3
   802a2:	dcf7      	bgt.n	80294 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   802a4:	18c6      	adds	r6, r0, r3
   802a6:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   802a8:	0a24      	lsrs	r4, r4, #8
   802aa:	e7f6      	b.n	8029a <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802ac:	4b09      	ldr	r3, [pc, #36]	; (802d4 <can_receive+0x80>)
   802ae:	f101 0210 	add.w	r2, r1, #16
   802b2:	0152      	lsls	r2, r2, #5
   802b4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802b8:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802ba:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802be:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802c6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802ca:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802cc:	bc70      	pop	{r4, r5, r6}
   802ce:	4770      	bx	lr
		return 1;
   802d0:	2001      	movs	r0, #1
   802d2:	4770      	bx	lr
   802d4:	400b4000 	.word	0x400b4000

000802d8 <update_P1000>:


void update_P1000(P1000_DATA * data, CAN_MESSAGE* can_message)
{
	data->joystick = can_message->data[0];
   802d8:	78cb      	ldrb	r3, [r1, #3]
   802da:	6003      	str	r3, [r0, #0]
	data->left_slider = can_message->data[1];
   802dc:	790b      	ldrb	r3, [r1, #4]
   802de:	6043      	str	r3, [r0, #4]
	data->right_slider = can_message->data[2];
   802e0:	794b      	ldrb	r3, [r1, #5]
   802e2:	6083      	str	r3, [r0, #8]
   802e4:	4770      	bx	lr
	...

000802e8 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802e8:	b510      	push	{r4, lr}
   802ea:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   802ec:	4b17      	ldr	r3, [pc, #92]	; (8034c <CAN0_Handler+0x64>)
   802ee:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr  & (CAN_SR_MB1 | CAN_SR_MB2)) //Only mailbox 1 and 2 specified for receiving
   802f0:	f014 0f06 	tst.w	r4, #6
   802f4:	d01d      	beq.n	80332 <CAN0_Handler+0x4a>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802f6:	f014 0f02 	tst.w	r4, #2
   802fa:	d108      	bne.n	8030e <CAN0_Handler+0x26>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802fc:	f014 0f04 	tst.w	r4, #4
   80300:	d00a      	beq.n	80318 <CAN0_Handler+0x30>
		
		{
			can_receive(&message, 2);
   80302:	2102      	movs	r1, #2
   80304:	a801      	add	r0, sp, #4
   80306:	4b12      	ldr	r3, [pc, #72]	; (80350 <CAN0_Handler+0x68>)
   80308:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   8030a:	2300      	movs	r3, #0
   8030c:	e009      	b.n	80322 <CAN0_Handler+0x3a>
			can_receive(&message, 1);
   8030e:	2101      	movs	r1, #1
   80310:	a801      	add	r0, sp, #4
   80312:	4b0f      	ldr	r3, [pc, #60]	; (80350 <CAN0_Handler+0x68>)
   80314:	4798      	blx	r3
   80316:	e7f8      	b.n	8030a <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80318:	480e      	ldr	r0, [pc, #56]	; (80354 <CAN0_Handler+0x6c>)
   8031a:	4b0f      	ldr	r3, [pc, #60]	; (80358 <CAN0_Handler+0x70>)
   8031c:	4798      	blx	r3
   8031e:	e7f4      	b.n	8030a <CAN0_Handler+0x22>
		for (int i = 0; i < message.data_length; i++)
   80320:	3301      	adds	r3, #1
   80322:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80326:	4293      	cmp	r3, r2
   80328:	dbfa      	blt.n	80320 <CAN0_Handler+0x38>
		{
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
		
		update_P1000(&P1000_data, &message);
   8032a:	a901      	add	r1, sp, #4
   8032c:	480b      	ldr	r0, [pc, #44]	; (8035c <CAN0_Handler+0x74>)
   8032e:	4b0c      	ldr	r3, [pc, #48]	; (80360 <CAN0_Handler+0x78>)
   80330:	4798      	blx	r3
	}
	
	if(can_sr & CAN_SR_MB0)
   80332:	f014 0f01 	tst.w	r4, #1
   80336:	d002      	beq.n	8033e <CAN0_Handler+0x56>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   80338:	2201      	movs	r2, #1
   8033a:	4b04      	ldr	r3, [pc, #16]	; (8034c <CAN0_Handler+0x64>)
   8033c:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8033e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80342:	4b08      	ldr	r3, [pc, #32]	; (80364 <CAN0_Handler+0x7c>)
   80344:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   80348:	b004      	add	sp, #16
   8034a:	bd10      	pop	{r4, pc}
   8034c:	400b4000 	.word	0x400b4000
   80350:	00080255 	.word	0x00080255
   80354:	0008101c 	.word	0x0008101c
   80358:	000809dd 	.word	0x000809dd
   8035c:	20000450 	.word	0x20000450
   80360:	000802d9 	.word	0x000802d9
   80364:	e000e100 	.word	0xe000e100

00080368 <DACC_init>:
#include "DAC_driver.h"

void DACC_init(void)
{
	PMC->PMC_PCER1 |= PMC_PCER1_PID38;
   80368:	4a0a      	ldr	r2, [pc, #40]	; (80394 <DACC_init+0x2c>)
   8036a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   8036e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   80372:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	/*Reset DACC*/
	DACC->DACC_CR |= DACC_CR_SWRST;
   80376:	4b08      	ldr	r3, [pc, #32]	; (80398 <DACC_init+0x30>)
   80378:	681a      	ldr	r2, [r3, #0]
   8037a:	f042 0201 	orr.w	r2, r2, #1
   8037e:	601a      	str	r2, [r3, #0]
	
	/*Select CH1*/
	DACC->DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;
   80380:	685a      	ldr	r2, [r3, #4]
   80382:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   80386:	605a      	str	r2, [r3, #4]
	
	/*Enable CH1*/
	DACC ->DACC_CHER |= DACC_CHER_CH1;
   80388:	691a      	ldr	r2, [r3, #16]
   8038a:	f042 0202 	orr.w	r2, r2, #2
   8038e:	611a      	str	r2, [r3, #16]
   80390:	4770      	bx	lr
   80392:	bf00      	nop
   80394:	400e0600 	.word	0x400e0600
   80398:	400c8000 	.word	0x400c8000

0008039c <motor_init>:
{
	/* Enable PIOD clock */
	//PMC->PMC_PCER0 |= PMC_PCER0_PID14;
	
	/*Enable MJ1 pins*/
	PIOD -> PIO_PER |= 0x607;	
   8039c:	4b07      	ldr	r3, [pc, #28]	; (803bc <motor_init+0x20>)
   8039e:	6819      	ldr	r1, [r3, #0]
   803a0:	f240 6207 	movw	r2, #1543	; 0x607
   803a4:	4311      	orrs	r1, r2
   803a6:	6019      	str	r1, [r3, #0]
	
	/*Enable MJ1 pins as outputs*/
	PIOD -> PIO_OER |= 0x607;
   803a8:	6919      	ldr	r1, [r3, #16]
   803aa:	4311      	orrs	r1, r2
   803ac:	6119      	str	r1, [r3, #16]
	
	/*Enable MJ1 pins as outputs*/
	//207 = R (to motor)
	//607 = L
	//PIOD -> PIO_CODR |= (0x1 << 1);
	PIOD -> PIO_SODR |= (0x1 << 10) | (0x1 << 9) | (0x1 << 2) | (0x1 << 1) | (0x1 << 0);//0x607;
   803ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
   803b0:	4311      	orrs	r1, r2
   803b2:	6319      	str	r1, [r3, #48]	; 0x30
	
	PIOD->PIO_ABSR |= 0x607;
   803b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
   803b6:	430a      	orrs	r2, r1
   803b8:	671a      	str	r2, [r3, #112]	; 0x70
   803ba:	4770      	bx	lr
   803bc:	400e1400 	.word	0x400e1400

000803c0 <motor_read_init>:
	//PMC->PMC_PCR |= (0x1 << 28) | (0x1 << 12) | (0xd << 0);
	/* Enable PIOC clock */
	//PMC->PMC_PCER0 |= PMC_PCER0_PID13;
	
	/*Enable MJ2 pins (C1 to C8)*/
	PIOC -> PIO_PER |= (0x1 << 8) | (0x1 << 7) | (0x1 << 6) | (0x1 << 5) | (0x1 << 4) | (0x1 << 3) | (0x1 << 2) | (0x1 << 1);
   803c0:	4b08      	ldr	r3, [pc, #32]	; (803e4 <motor_read_init+0x24>)
   803c2:	681a      	ldr	r2, [r3, #0]
   803c4:	f442 72ff 	orr.w	r2, r2, #510	; 0x1fe
   803c8:	601a      	str	r2, [r3, #0]
	
 	/*Disable MJ2 pins as output */
 	PIOC -> PIO_ODR |= (0x1 << 8) | (0x1 << 7) | (0x1 << 6) | (0x1 << 5) | (0x1 << 4) | (0x1 << 3) | (0x1 << 2) | (0x1 << 1);
   803ca:	695a      	ldr	r2, [r3, #20]
   803cc:	f442 72ff 	orr.w	r2, r2, #510	; 0x1fe
   803d0:	615a      	str	r2, [r3, #20]

	PIOC->PIO_ABSR |= (0x1 << 8) | (0x1 << 7) | (0x1 << 6) | (0x1 << 5) | (0x1 << 4) | (0x1 << 3) | (0x1 << 2) | (0x1 << 1); 
   803d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   803d4:	f442 72ff 	orr.w	r2, r2, #510	; 0x1fe
   803d8:	671a      	str	r2, [r3, #112]	; 0x70

	/* Enable Clock Glitch Filter */
	//PIOC->PIO_IFER |= (0x1 << 8) | (0x1 << 7) | (0x1 << 6) | (0x1 << 5) | (0x1 << 4) | (0x1 << 3) | (0x1 << 2) | (0x1 << 1); 
	PIOC->PIO_PUDR |= (0x1 << 8) | (0x1 << 7) | (0x1 << 6) | (0x1 << 5) | (0x1 << 4) | (0x1 << 3) | (0x1 << 2) | (0x1 << 1);
   803da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   803dc:	f442 72ff 	orr.w	r2, r2, #510	; 0x1fe
   803e0:	661a      	str	r2, [r3, #96]	; 0x60
   803e2:	4770      	bx	lr
   803e4:	400e1200 	.word	0x400e1200

000803e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   803e8:	e7fe      	b.n	803e8 <Dummy_Handler>
	...

000803ec <Reset_Handler>:
{
   803ec:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   803ee:	4b11      	ldr	r3, [pc, #68]	; (80434 <Reset_Handler+0x48>)
   803f0:	4a11      	ldr	r2, [pc, #68]	; (80438 <Reset_Handler+0x4c>)
   803f2:	429a      	cmp	r2, r3
   803f4:	d009      	beq.n	8040a <Reset_Handler+0x1e>
   803f6:	4b0f      	ldr	r3, [pc, #60]	; (80434 <Reset_Handler+0x48>)
   803f8:	4a0f      	ldr	r2, [pc, #60]	; (80438 <Reset_Handler+0x4c>)
   803fa:	e003      	b.n	80404 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   803fc:	6811      	ldr	r1, [r2, #0]
   803fe:	6019      	str	r1, [r3, #0]
   80400:	3304      	adds	r3, #4
   80402:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   80404:	490d      	ldr	r1, [pc, #52]	; (8043c <Reset_Handler+0x50>)
   80406:	428b      	cmp	r3, r1
   80408:	d3f8      	bcc.n	803fc <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   8040a:	4b0d      	ldr	r3, [pc, #52]	; (80440 <Reset_Handler+0x54>)
   8040c:	e002      	b.n	80414 <Reset_Handler+0x28>
                *pDest++ = 0;
   8040e:	2200      	movs	r2, #0
   80410:	601a      	str	r2, [r3, #0]
   80412:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   80414:	4a0b      	ldr	r2, [pc, #44]	; (80444 <Reset_Handler+0x58>)
   80416:	4293      	cmp	r3, r2
   80418:	d3f9      	bcc.n	8040e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8041a:	4b0b      	ldr	r3, [pc, #44]	; (80448 <Reset_Handler+0x5c>)
   8041c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80420:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80424:	4a09      	ldr	r2, [pc, #36]	; (8044c <Reset_Handler+0x60>)
   80426:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   80428:	4b09      	ldr	r3, [pc, #36]	; (80450 <Reset_Handler+0x64>)
   8042a:	4798      	blx	r3
        main();
   8042c:	4b09      	ldr	r3, [pc, #36]	; (80454 <Reset_Handler+0x68>)
   8042e:	4798      	blx	r3
   80430:	e7fe      	b.n	80430 <Reset_Handler+0x44>
   80432:	bf00      	nop
   80434:	20000000 	.word	0x20000000
   80438:	00081100 	.word	0x00081100
   8043c:	20000434 	.word	0x20000434
   80440:	20000434 	.word	0x20000434
   80444:	200004c4 	.word	0x200004c4
   80448:	00080000 	.word	0x00080000
   8044c:	e000ed00 	.word	0xe000ed00
   80450:	00080ead 	.word	0x00080ead
   80454:	000805b5 	.word	0x000805b5

00080458 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80458:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8045c:	4a20      	ldr	r2, [pc, #128]	; (804e0 <SystemInit+0x88>)
   8045e:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80460:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80464:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   80466:	4b1f      	ldr	r3, [pc, #124]	; (804e4 <SystemInit+0x8c>)
   80468:	6a1b      	ldr	r3, [r3, #32]
   8046a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8046e:	d107      	bne.n	80480 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80470:	4a1d      	ldr	r2, [pc, #116]	; (804e8 <SystemInit+0x90>)
   80472:	4b1c      	ldr	r3, [pc, #112]	; (804e4 <SystemInit+0x8c>)
   80474:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   80476:	4b1b      	ldr	r3, [pc, #108]	; (804e4 <SystemInit+0x8c>)
   80478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8047a:	f013 0f01 	tst.w	r3, #1
   8047e:	d0fa      	beq.n	80476 <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80480:	4a1a      	ldr	r2, [pc, #104]	; (804ec <SystemInit+0x94>)
   80482:	4b18      	ldr	r3, [pc, #96]	; (804e4 <SystemInit+0x8c>)
   80484:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80486:	4b17      	ldr	r3, [pc, #92]	; (804e4 <SystemInit+0x8c>)
   80488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8048a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8048e:	d0fa      	beq.n	80486 <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80490:	4a14      	ldr	r2, [pc, #80]	; (804e4 <SystemInit+0x8c>)
   80492:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80494:	f023 0303 	bic.w	r3, r3, #3
   80498:	f043 0301 	orr.w	r3, r3, #1
   8049c:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   8049e:	4b11      	ldr	r3, [pc, #68]	; (804e4 <SystemInit+0x8c>)
   804a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804a2:	f013 0f08 	tst.w	r3, #8
   804a6:	d0fa      	beq.n	8049e <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   804a8:	4a11      	ldr	r2, [pc, #68]	; (804f0 <SystemInit+0x98>)
   804aa:	4b0e      	ldr	r3, [pc, #56]	; (804e4 <SystemInit+0x8c>)
   804ac:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   804ae:	4b0d      	ldr	r3, [pc, #52]	; (804e4 <SystemInit+0x8c>)
   804b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804b2:	f013 0f02 	tst.w	r3, #2
   804b6:	d0fa      	beq.n	804ae <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   804b8:	2211      	movs	r2, #17
   804ba:	4b0a      	ldr	r3, [pc, #40]	; (804e4 <SystemInit+0x8c>)
   804bc:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   804be:	4b09      	ldr	r3, [pc, #36]	; (804e4 <SystemInit+0x8c>)
   804c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804c2:	f013 0f08 	tst.w	r3, #8
   804c6:	d0fa      	beq.n	804be <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   804c8:	2212      	movs	r2, #18
   804ca:	4b06      	ldr	r3, [pc, #24]	; (804e4 <SystemInit+0x8c>)
   804cc:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   804ce:	4b05      	ldr	r3, [pc, #20]	; (804e4 <SystemInit+0x8c>)
   804d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804d2:	f013 0f08 	tst.w	r3, #8
   804d6:	d0fa      	beq.n	804ce <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   804d8:	4a06      	ldr	r2, [pc, #24]	; (804f4 <SystemInit+0x9c>)
   804da:	4b07      	ldr	r3, [pc, #28]	; (804f8 <SystemInit+0xa0>)
   804dc:	601a      	str	r2, [r3, #0]
   804de:	4770      	bx	lr
   804e0:	400e0a00 	.word	0x400e0a00
   804e4:	400e0600 	.word	0x400e0600
   804e8:	00370809 	.word	0x00370809
   804ec:	01370809 	.word	0x01370809
   804f0:	200d3f01 	.word	0x200d3f01
   804f4:	0501bd00 	.word	0x0501bd00
   804f8:	20000000 	.word	0x20000000

000804fc <peripheral_init_adc>:

void peripheral_init_adc(){
	//pin A11
	//CH11

	PIOB ->  PIO_PDR |= PIO_PDR_P18;
   804fc:	4a06      	ldr	r2, [pc, #24]	; (80518 <peripheral_init_adc+0x1c>)
   804fe:	6853      	ldr	r3, [r2, #4]
   80500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   80504:	6053      	str	r3, [r2, #4]
	// Using peripheral B of PIOC11
	//PIOA ->PIO_ABSR |= PIO_ABSR_P11;
	
	/* Enable clock for the PWM peripheral */
	PMC->PMC_PCER1 |= PMC_PCER1_PID37;
   80506:	f5a2 6220 	sub.w	r2, r2, #2560	; 0xa00
   8050a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   8050e:	f043 0320 	orr.w	r3, r3, #32
   80512:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
   80516:	4770      	bx	lr
   80518:	400e1000 	.word	0x400e1000

0008051c <ADC_init>:


void ADC_init(void)
{
	/*Reset ADC*/
	ADC-> ADC_CR |= ADC_CR_SWRST;
   8051c:	4b0f      	ldr	r3, [pc, #60]	; (8055c <ADC_init+0x40>)
   8051e:	681a      	ldr	r2, [r3, #0]
   80520:	f042 0201 	orr.w	r2, r2, #1
   80524:	601a      	str	r2, [r3, #0]
	
	/*Disable write protect mode*/
	ADC-> ADC_WPMR |=~ ADC_WPMR_WPEN;
   80526:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   8052a:	f062 0201 	orn	r2, r2, #1
   8052e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	/*Enable channel 11*/
	ADC ->ADC_CHER |= ADC_CHER_CH11;
   80532:	691a      	ldr	r2, [r3, #16]
   80534:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   80538:	611a      	str	r2, [r3, #16]
	
	/*Set to 10-bit resolution*/
	ADC->ADC_MR |= (1<<0x4);
   8053a:	685a      	ldr	r2, [r3, #4]
   8053c:	f042 0210 	orr.w	r2, r2, #16
   80540:	605a      	str	r2, [r3, #4]
	
	/*Put in free run mode*/
	ADC->ADC_MR |= ADC_MR_FREERUN_ON;
   80542:	685a      	ldr	r2, [r3, #4]
   80544:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   80548:	605a      	str	r2, [r3, #4]
	
	/*Interrupt on end of conversion CH11*/
	ADC->ADC_IER |= ADC_IER_EOC11;
   8054a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   8054c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   80550:	625a      	str	r2, [r3, #36]	; 0x24
	
	ADC->ADC_EMR |= ADC_EMR_TAG;
   80552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80554:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   80558:	641a      	str	r2, [r3, #64]	; 0x40
   8055a:	4770      	bx	lr
   8055c:	400c0000 	.word	0x400c0000

00080560 <IR_read>:
}

int IR_read(void)
{
	int adc_out = (int) (ADC->ADC_LCDR & ADC_LCDR_LDATA_Msk);
   80560:	4b04      	ldr	r3, [pc, #16]	; (80574 <IR_read+0x14>)
   80562:	6a1b      	ldr	r3, [r3, #32]
   80564:	f3c3 030b 	ubfx	r3, r3, #0, #12
	
	if(adc_out < 200)
   80568:	2bc7      	cmp	r3, #199	; 0xc7
   8056a:	dd01      	ble.n	80570 <IR_read+0x10>
	{
		return 0;
	}
	
	return 1;
   8056c:	2001      	movs	r0, #1
}
   8056e:	4770      	bx	lr
		return 0;
   80570:	2000      	movs	r0, #0
   80572:	4770      	bx	lr
   80574:	400c0000 	.word	0x400c0000

00080578 <check_for_score>:

void check_for_score(int* score, int* no_goal_counter)
{
   80578:	b538      	push	{r3, r4, r5, lr}
   8057a:	4605      	mov	r5, r0
   8057c:	460c      	mov	r4, r1
	int no_goal = IR_read();
   8057e:	4b09      	ldr	r3, [pc, #36]	; (805a4 <check_for_score+0x2c>)
   80580:	4798      	blx	r3
	*no_goal_counter = *no_goal_counter + no_goal;
   80582:	6823      	ldr	r3, [r4, #0]
   80584:	4403      	add	r3, r0
   80586:	6023      	str	r3, [r4, #0]
	
	if (*no_goal_counter > 1000000 && no_goal == 0)
   80588:	4a07      	ldr	r2, [pc, #28]	; (805a8 <check_for_score+0x30>)
   8058a:	4293      	cmp	r3, r2
   8058c:	dd00      	ble.n	80590 <check_for_score+0x18>
   8058e:	b100      	cbz	r0, 80592 <check_for_score+0x1a>
   80590:	bd38      	pop	{r3, r4, r5, pc}
	{
		(*score)++;
   80592:	6829      	ldr	r1, [r5, #0]
   80594:	3101      	adds	r1, #1
   80596:	6029      	str	r1, [r5, #0]
		printf("GOAL! score = %d\n", *score);
   80598:	4804      	ldr	r0, [pc, #16]	; (805ac <check_for_score+0x34>)
   8059a:	4b05      	ldr	r3, [pc, #20]	; (805b0 <check_for_score+0x38>)
   8059c:	4798      	blx	r3
		*no_goal_counter = 0;
   8059e:	2300      	movs	r3, #0
   805a0:	6023      	str	r3, [r4, #0]
		
	}
   805a2:	e7f5      	b.n	80590 <check_for_score+0x18>
   805a4:	00080561 	.word	0x00080561
   805a8:	000f4240 	.word	0x000f4240
   805ac:	00081048 	.word	0x00081048
   805b0:	000809dd 	.word	0x000809dd

000805b4 <main>:
		PIOA->PIO_SODR |= (0x1 << 20);
	}
}

int main(void)
{
   805b4:	b510      	push	{r4, lr}
   805b6:	b084      	sub	sp, #16


	

    /* Enables pin A19 and A20 */
	PIOA->PIO_PER |= ((0x1 << 20) | (0x1 << 19));
   805b8:	4b20      	ldr	r3, [pc, #128]	; (8063c <main+0x88>)
   805ba:	681a      	ldr	r2, [r3, #0]
   805bc:	f442 12c0 	orr.w	r2, r2, #1572864	; 0x180000
   805c0:	601a      	str	r2, [r3, #0]
    
	/* Enable the output on the I/O line */
    PIOA->PIO_OER |= ((0x1 << 20) | (0x1 << 19));
   805c2:	691a      	ldr	r2, [r3, #16]
   805c4:	f442 12c0 	orr.w	r2, r2, #1572864	; 0x180000
   805c8:	611a      	str	r2, [r3, #16]
	    /* Initialize the SAM system */
    SystemInit();
   805ca:	4b1d      	ldr	r3, [pc, #116]	; (80640 <main+0x8c>)
   805cc:	4798      	blx	r3
	
	configure_uart();
   805ce:	4b1d      	ldr	r3, [pc, #116]	; (80644 <main+0x90>)
   805d0:	4798      	blx	r3
	uint32_t can_br = 0x00290165;//0x10165;
		
	can_init_def_tx_rx_mb(can_br);
   805d2:	481d      	ldr	r0, [pc, #116]	; (80648 <main+0x94>)
   805d4:	4b1d      	ldr	r3, [pc, #116]	; (8064c <main+0x98>)
   805d6:	4798      	blx	r3
		
	/*disable watchdog*/
	WDT->WDT_MR = WDT_MR_WDDIS;
   805d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   805dc:	4b1c      	ldr	r3, [pc, #112]	; (80650 <main+0x9c>)
   805de:	605a      	str	r2, [r3, #4]
			
			
	}
	*/
	
	peripheral_init_pwm();
   805e0:	4b1c      	ldr	r3, [pc, #112]	; (80654 <main+0xa0>)
   805e2:	4798      	blx	r3

	pwm_init();
   805e4:	4b1c      	ldr	r3, [pc, #112]	; (80658 <main+0xa4>)
   805e6:	4798      	blx	r3
	
	peripheral_init_adc();
   805e8:	4b1c      	ldr	r3, [pc, #112]	; (8065c <main+0xa8>)
   805ea:	4798      	blx	r3
	ADC_init();
   805ec:	4b1c      	ldr	r3, [pc, #112]	; (80660 <main+0xac>)
   805ee:	4798      	blx	r3
	DACC_init();
   805f0:	4b1c      	ldr	r3, [pc, #112]	; (80664 <main+0xb0>)
   805f2:	4798      	blx	r3
	motor_init();
   805f4:	4b1c      	ldr	r3, [pc, #112]	; (80668 <main+0xb4>)
   805f6:	4798      	blx	r3
	motor_read_init();
   805f8:	4b1c      	ldr	r3, [pc, #112]	; (8066c <main+0xb8>)
   805fa:	4798      	blx	r3
	
	int score = 0;
   805fc:	2300      	movs	r3, #0
   805fe:	9303      	str	r3, [sp, #12]
	int no_goal_counter = 0;
   80600:	9302      	str	r3, [sp, #8]
	volatile uint16_t encoder_value = 0;
   80602:	f8ad 3006 	strh.w	r3, [sp, #6]
// 	PIOD -> PIO_CODR |= (0x1 << 10);
// 	DACC->DACC_CDR = 0x9FF;
uint32_t mj2=0xFF;
   80606:	24ff      	movs	r4, #255	; 0xff
   80608:	e001      	b.n	8060e <main+0x5a>
		slider_open_loop();
		joystick_input();
		//printf("joystick %d left %d right %d \n", P1000_data.joystick, P1000_data.left_slider, P1000_data.right_slider);
		encoder_value = read_decoder();
		printf("%d\n",mj2);
		mj2=(PIOC->PIO_PDSR && 0x1FE)>>1;
   8060a:	2400      	movs	r4, #0
   8060c:	1064      	asrs	r4, r4, #1
		check_for_score(&score, &no_goal_counter);
   8060e:	a902      	add	r1, sp, #8
   80610:	a803      	add	r0, sp, #12
   80612:	4b17      	ldr	r3, [pc, #92]	; (80670 <main+0xbc>)
   80614:	4798      	blx	r3
		slider_open_loop();
   80616:	4b17      	ldr	r3, [pc, #92]	; (80674 <main+0xc0>)
   80618:	4798      	blx	r3
		joystick_input();
   8061a:	4b17      	ldr	r3, [pc, #92]	; (80678 <main+0xc4>)
   8061c:	4798      	blx	r3
		encoder_value = read_decoder();
   8061e:	4b17      	ldr	r3, [pc, #92]	; (8067c <main+0xc8>)
   80620:	4798      	blx	r3
   80622:	f8ad 0006 	strh.w	r0, [sp, #6]
		printf("%d\n",mj2);
   80626:	4621      	mov	r1, r4
   80628:	4815      	ldr	r0, [pc, #84]	; (80680 <main+0xcc>)
   8062a:	4b16      	ldr	r3, [pc, #88]	; (80684 <main+0xd0>)
   8062c:	4798      	blx	r3
		mj2=(PIOC->PIO_PDSR && 0x1FE)>>1;
   8062e:	4b16      	ldr	r3, [pc, #88]	; (80688 <main+0xd4>)
   80630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80632:	2b00      	cmp	r3, #0
   80634:	d0e9      	beq.n	8060a <main+0x56>
   80636:	2401      	movs	r4, #1
   80638:	e7e8      	b.n	8060c <main+0x58>
   8063a:	bf00      	nop
   8063c:	400e0e00 	.word	0x400e0e00
   80640:	00080459 	.word	0x00080459
   80644:	00080b19 	.word	0x00080b19
   80648:	00290165 	.word	0x00290165
   8064c:	00080245 	.word	0x00080245
   80650:	400e1a50 	.word	0x400e1a50
   80654:	00080a01 	.word	0x00080a01
   80658:	00080a2d 	.word	0x00080a2d
   8065c:	000804fd 	.word	0x000804fd
   80660:	0008051d 	.word	0x0008051d
   80664:	00080369 	.word	0x00080369
   80668:	0008039d 	.word	0x0008039d
   8066c:	000803c1 	.word	0x000803c1
   80670:	00080579 	.word	0x00080579
   80674:	0008068d 	.word	0x0008068d
   80678:	00080ac9 	.word	0x00080ac9
   8067c:	00080701 	.word	0x00080701
   80680:	0008105c 	.word	0x0008105c
   80684:	000809dd 	.word	0x000809dd
   80688:	400e1200 	.word	0x400e1200

0008068c <slider_open_loop>:
P1000_DATA P1000_data;

void slider_open_loop()
{
	//printf("pos %d\n", *pos);
	if (P1000_data.left_slider < 128)
   8068c:	4b0b      	ldr	r3, [pc, #44]	; (806bc <slider_open_loop+0x30>)
   8068e:	685b      	ldr	r3, [r3, #4]
   80690:	2b7f      	cmp	r3, #127	; 0x7f
   80692:	dd09      	ble.n	806a8 <slider_open_loop+0x1c>
		DACC->DACC_CDR = 0x9FF;
	}
	
	else
	{
		PIOD -> PIO_SODR |= (0x1 << 10);//&= ~(0x200);
   80694:	4a0a      	ldr	r2, [pc, #40]	; (806c0 <slider_open_loop+0x34>)
   80696:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80698:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   8069c:	6313      	str	r3, [r2, #48]	; 0x30
		DACC->DACC_CDR = 0x9FF;
   8069e:	f640 12ff 	movw	r2, #2559	; 0x9ff
   806a2:	4b08      	ldr	r3, [pc, #32]	; (806c4 <slider_open_loop+0x38>)
   806a4:	621a      	str	r2, [r3, #32]
   806a6:	4770      	bx	lr
		PIOD -> PIO_CODR |= (0x1 << 10);
   806a8:	4a05      	ldr	r2, [pc, #20]	; (806c0 <slider_open_loop+0x34>)
   806aa:	6b53      	ldr	r3, [r2, #52]	; 0x34
   806ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   806b0:	6353      	str	r3, [r2, #52]	; 0x34
		DACC->DACC_CDR = 0x9FF;
   806b2:	f640 12ff 	movw	r2, #2559	; 0x9ff
   806b6:	4b03      	ldr	r3, [pc, #12]	; (806c4 <slider_open_loop+0x38>)
   806b8:	621a      	str	r2, [r3, #32]
   806ba:	4770      	bx	lr
   806bc:	20000450 	.word	0x20000450
   806c0:	400e1400 	.word	0x400e1400
   806c4:	400c8000 	.word	0x400c8000

000806c8 <Delay>:
	__asm__ volatile("nop\n\t"); // busy wait
}*/

void Delay(int num)

{
   806c8:	b510      	push	{r4, lr}
   806ca:	b082      	sub	sp, #8
   806cc:	4604      	mov	r4, r0
	volatile float f = 1.0f;
   806ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   806d2:	9301      	str	r3, [sp, #4]

	for (volatile int i = 0; i < 1024 * num; ++i )
   806d4:	2300      	movs	r3, #0
   806d6:	9300      	str	r3, [sp, #0]
   806d8:	e007      	b.n	806ea <Delay+0x22>

	f *= 1.1f;
   806da:	9801      	ldr	r0, [sp, #4]
   806dc:	4906      	ldr	r1, [pc, #24]	; (806f8 <Delay+0x30>)
   806de:	4b07      	ldr	r3, [pc, #28]	; (806fc <Delay+0x34>)
   806e0:	4798      	blx	r3
   806e2:	9001      	str	r0, [sp, #4]
	for (volatile int i = 0; i < 1024 * num; ++i )
   806e4:	9b00      	ldr	r3, [sp, #0]
   806e6:	3301      	adds	r3, #1
   806e8:	9300      	str	r3, [sp, #0]
   806ea:	9b00      	ldr	r3, [sp, #0]
   806ec:	ebb3 2f84 	cmp.w	r3, r4, lsl #10
   806f0:	dbf3      	blt.n	806da <Delay+0x12>
}
   806f2:	b002      	add	sp, #8
   806f4:	bd10      	pop	{r4, pc}
   806f6:	bf00      	nop
   806f8:	3f8ccccd 	.word	0x3f8ccccd
   806fc:	00080c0d 	.word	0x00080c0d

00080700 <read_decoder>:

uint16_t read_decoder()
{
   80700:	b508      	push	{r3, lr}
	uint16_t encoder = 0;
	
	/* Clearing the not OE (Encoder output enable) */ 
	PIOD->PIO_CODR |= (0x1 << 0); 
   80702:	4b0f      	ldr	r3, [pc, #60]	; (80740 <read_decoder+0x40>)
   80704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   80706:	f042 0201 	orr.w	r2, r2, #1
   8070a:	635a      	str	r2, [r3, #52]	; 0x34
	
	/* Setting SEL low to output high byte */
	PIOD->PIO_CODR |= (0x1 << 2);
   8070c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   8070e:	f042 0204 	orr.w	r2, r2, #4
   80712:	635a      	str	r2, [r3, #52]	; 0x34
	
	Delay(20);//delay_20ms();// for(int i = 0; i < 1680000; i++); // _delay_ms(20); change this
   80714:	2014      	movs	r0, #20
   80716:	4b0b      	ldr	r3, [pc, #44]	; (80744 <read_decoder+0x44>)
   80718:	4798      	blx	r3
	
	encoder = (((PIOC->PIO_PDSR && MJ2_DATA_Msk) >> 1) << 8);
   8071a:	4b0b      	ldr	r3, [pc, #44]	; (80748 <read_decoder+0x48>)
   8071c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	
	/* Setting SEL high to output low byte */
	PIOD->PIO_SODR |= (0x1 << 2);
   8071e:	4a08      	ldr	r2, [pc, #32]	; (80740 <read_decoder+0x40>)
   80720:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80722:	f043 0304 	orr.w	r3, r3, #4
   80726:	6313      	str	r3, [r2, #48]	; 0x30
	
	Delay(20);// for(int i = 0; i < 1680000; i++); // _delay_ms(20);
   80728:	2014      	movs	r0, #20
   8072a:	4b06      	ldr	r3, [pc, #24]	; (80744 <read_decoder+0x44>)
   8072c:	4798      	blx	r3
	
	encoder += ((PIOC->PIO_PDSR && MJ2_DATA_Msk) >> 1);
   8072e:	4b06      	ldr	r3, [pc, #24]	; (80748 <read_decoder+0x48>)
   80730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	
	/* Setting the not OE (Encoder output enable) high */ 
	PIOD->PIO_SODR |= (0x1 << 0); 
   80732:	4a03      	ldr	r2, [pc, #12]	; (80740 <read_decoder+0x40>)
   80734:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80736:	f043 0301 	orr.w	r3, r3, #1
   8073a:	6313      	str	r3, [r2, #48]	; 0x30
	
	
	return encoder;
   8073c:	2000      	movs	r0, #0
   8073e:	bd08      	pop	{r3, pc}
   80740:	400e1400 	.word	0x400e1400
   80744:	000806c9 	.word	0x000806c9
   80748:	400e1200 	.word	0x400e1200

0008074c <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   8074c:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   8074e:	b2c8      	uxtb	r0, r1
   80750:	4b01      	ldr	r3, [pc, #4]	; (80758 <printchar+0xc>)
   80752:	4798      	blx	r3
   80754:	bd08      	pop	{r3, pc}
   80756:	bf00      	nop
   80758:	00080b81 	.word	0x00080b81

0008075c <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   8075c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80760:	4607      	mov	r7, r0
   80762:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80764:	1e15      	subs	r5, r2, #0
   80766:	dd02      	ble.n	8076e <prints+0x12>
   80768:	460a      	mov	r2, r1
   8076a:	2100      	movs	r1, #0
   8076c:	e004      	b.n	80778 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   8076e:	f04f 0820 	mov.w	r8, #32
   80772:	e00e      	b.n	80792 <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80774:	3101      	adds	r1, #1
   80776:	3201      	adds	r2, #1
   80778:	7810      	ldrb	r0, [r2, #0]
   8077a:	2800      	cmp	r0, #0
   8077c:	d1fa      	bne.n	80774 <prints+0x18>
		if (len >= width) width = 0;
   8077e:	42a9      	cmp	r1, r5
   80780:	da01      	bge.n	80786 <prints+0x2a>
		else width -= len;
   80782:	1a6d      	subs	r5, r5, r1
   80784:	e000      	b.n	80788 <prints+0x2c>
		if (len >= width) width = 0;
   80786:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   80788:	f013 0f02 	tst.w	r3, #2
   8078c:	d106      	bne.n	8079c <prints+0x40>
	register int pc = 0, padchar = ' ';
   8078e:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   80792:	f013 0401 	ands.w	r4, r3, #1
   80796:	d00a      	beq.n	807ae <prints+0x52>
	register int pc = 0, padchar = ' ';
   80798:	2400      	movs	r4, #0
   8079a:	e010      	b.n	807be <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   8079c:	f04f 0830 	mov.w	r8, #48	; 0x30
   807a0:	e7f7      	b.n	80792 <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   807a2:	4641      	mov	r1, r8
   807a4:	4638      	mov	r0, r7
   807a6:	4b0d      	ldr	r3, [pc, #52]	; (807dc <prints+0x80>)
   807a8:	4798      	blx	r3
			++pc;
   807aa:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   807ac:	3d01      	subs	r5, #1
   807ae:	2d00      	cmp	r5, #0
   807b0:	dcf7      	bgt.n	807a2 <prints+0x46>
   807b2:	e004      	b.n	807be <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   807b4:	4638      	mov	r0, r7
   807b6:	4b09      	ldr	r3, [pc, #36]	; (807dc <prints+0x80>)
   807b8:	4798      	blx	r3
		++pc;
   807ba:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   807bc:	3601      	adds	r6, #1
   807be:	7831      	ldrb	r1, [r6, #0]
   807c0:	2900      	cmp	r1, #0
   807c2:	d1f7      	bne.n	807b4 <prints+0x58>
   807c4:	e005      	b.n	807d2 <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   807c6:	4641      	mov	r1, r8
   807c8:	4638      	mov	r0, r7
   807ca:	4b04      	ldr	r3, [pc, #16]	; (807dc <prints+0x80>)
   807cc:	4798      	blx	r3
		++pc;
   807ce:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   807d0:	3d01      	subs	r5, #1
   807d2:	2d00      	cmp	r5, #0
   807d4:	dcf7      	bgt.n	807c6 <prints+0x6a>
	}

	return pc;
}
   807d6:	4620      	mov	r0, r4
   807d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   807dc:	0008074d 	.word	0x0008074d

000807e0 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   807e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   807e2:	b085      	sub	sp, #20
   807e4:	4607      	mov	r7, r0
   807e6:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   807e8:	b151      	cbz	r1, 80800 <printi+0x20>
   807ea:	461e      	mov	r6, r3
   807ec:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   807ee:	b113      	cbz	r3, 807f6 <printi+0x16>
   807f0:	2a0a      	cmp	r2, #10
   807f2:	d012      	beq.n	8081a <printi+0x3a>
	register int t, neg = 0, pc = 0;
   807f4:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   807f6:	ad04      	add	r5, sp, #16
   807f8:	2300      	movs	r3, #0
   807fa:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   807fe:	e018      	b.n	80832 <printi+0x52>
		print_buf[0] = '0';
   80800:	2330      	movs	r3, #48	; 0x30
   80802:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80806:	2300      	movs	r3, #0
   80808:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   8080c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8080e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80810:	a901      	add	r1, sp, #4
   80812:	4638      	mov	r0, r7
   80814:	4c1b      	ldr	r4, [pc, #108]	; (80884 <printi+0xa4>)
   80816:	47a0      	blx	r4
   80818:	e029      	b.n	8086e <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   8081a:	2900      	cmp	r1, #0
   8081c:	db01      	blt.n	80822 <printi+0x42>
	register int t, neg = 0, pc = 0;
   8081e:	2600      	movs	r6, #0
   80820:	e7e9      	b.n	807f6 <printi+0x16>
		u = -i;
   80822:	424c      	negs	r4, r1
		neg = 1;
   80824:	2601      	movs	r6, #1
   80826:	e7e6      	b.n	807f6 <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   80828:	3330      	adds	r3, #48	; 0x30
   8082a:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   8082e:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80832:	b14c      	cbz	r4, 80848 <printi+0x68>
		t = u % b;
   80834:	fbb4 f3f2 	udiv	r3, r4, r2
   80838:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   8083c:	2b09      	cmp	r3, #9
   8083e:	ddf3      	ble.n	80828 <printi+0x48>
			t += letbase - '0' - 10;
   80840:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   80844:	440b      	add	r3, r1
   80846:	e7ef      	b.n	80828 <printi+0x48>
	}

	if (neg) {
   80848:	b156      	cbz	r6, 80860 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   8084a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8084c:	b11b      	cbz	r3, 80856 <printi+0x76>
   8084e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80850:	f013 0f02 	tst.w	r3, #2
   80854:	d10d      	bne.n	80872 <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80856:	232d      	movs	r3, #45	; 0x2d
   80858:	f805 3c01 	strb.w	r3, [r5, #-1]
   8085c:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   8085e:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80862:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80864:	4629      	mov	r1, r5
   80866:	4638      	mov	r0, r7
   80868:	4c06      	ldr	r4, [pc, #24]	; (80884 <printi+0xa4>)
   8086a:	47a0      	blx	r4
   8086c:	4430      	add	r0, r6
}
   8086e:	b005      	add	sp, #20
   80870:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   80872:	212d      	movs	r1, #45	; 0x2d
   80874:	4638      	mov	r0, r7
   80876:	4b04      	ldr	r3, [pc, #16]	; (80888 <printi+0xa8>)
   80878:	4798      	blx	r3
			--width;
   8087a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8087c:	3b01      	subs	r3, #1
   8087e:	930a      	str	r3, [sp, #40]	; 0x28
   80880:	e7ee      	b.n	80860 <printi+0x80>
   80882:	bf00      	nop
   80884:	0008075d 	.word	0x0008075d
   80888:	0008074d 	.word	0x0008074d

0008088c <print>:

static int print( char **out, const char *format, va_list args )
{
   8088c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8088e:	b089      	sub	sp, #36	; 0x24
   80890:	4606      	mov	r6, r0
   80892:	460c      	mov	r4, r1
   80894:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   80896:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   80898:	e081      	b.n	8099e <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   8089a:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   8089c:	2301      	movs	r3, #1
   8089e:	e08b      	b.n	809b8 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   808a0:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   808a2:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   808a6:	7822      	ldrb	r2, [r4, #0]
   808a8:	2a30      	cmp	r2, #48	; 0x30
   808aa:	d0f9      	beq.n	808a0 <print+0x14>
   808ac:	2200      	movs	r2, #0
   808ae:	e006      	b.n	808be <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   808b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   808b4:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   808b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   808ba:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   808bc:	3401      	adds	r4, #1
   808be:	7821      	ldrb	r1, [r4, #0]
   808c0:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   808c4:	b2c0      	uxtb	r0, r0
   808c6:	2809      	cmp	r0, #9
   808c8:	d9f2      	bls.n	808b0 <print+0x24>
			}
			if( *format == 's' ) {
   808ca:	2973      	cmp	r1, #115	; 0x73
   808cc:	d018      	beq.n	80900 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   808ce:	2964      	cmp	r1, #100	; 0x64
   808d0:	d022      	beq.n	80918 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   808d2:	2978      	cmp	r1, #120	; 0x78
   808d4:	d02f      	beq.n	80936 <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   808d6:	2958      	cmp	r1, #88	; 0x58
   808d8:	d03c      	beq.n	80954 <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   808da:	2975      	cmp	r1, #117	; 0x75
   808dc:	d049      	beq.n	80972 <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   808de:	2963      	cmp	r1, #99	; 0x63
   808e0:	d15c      	bne.n	8099c <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   808e2:	9905      	ldr	r1, [sp, #20]
   808e4:	1d08      	adds	r0, r1, #4
   808e6:	9005      	str	r0, [sp, #20]
   808e8:	7809      	ldrb	r1, [r1, #0]
   808ea:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   808ee:	2100      	movs	r1, #0
   808f0:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   808f4:	a907      	add	r1, sp, #28
   808f6:	4630      	mov	r0, r6
   808f8:	4f34      	ldr	r7, [pc, #208]	; (809cc <print+0x140>)
   808fa:	47b8      	blx	r7
   808fc:	4405      	add	r5, r0
				continue;
   808fe:	e04d      	b.n	8099c <print+0x110>
				register char *s = (char *)va_arg( args, int );
   80900:	9905      	ldr	r1, [sp, #20]
   80902:	1d08      	adds	r0, r1, #4
   80904:	9005      	str	r0, [sp, #20]
   80906:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80908:	b121      	cbz	r1, 80914 <print+0x88>
   8090a:	4630      	mov	r0, r6
   8090c:	4f2f      	ldr	r7, [pc, #188]	; (809cc <print+0x140>)
   8090e:	47b8      	blx	r7
   80910:	4405      	add	r5, r0
				continue;
   80912:	e043      	b.n	8099c <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   80914:	492e      	ldr	r1, [pc, #184]	; (809d0 <print+0x144>)
   80916:	e7f8      	b.n	8090a <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80918:	9905      	ldr	r1, [sp, #20]
   8091a:	1d08      	adds	r0, r1, #4
   8091c:	9005      	str	r0, [sp, #20]
   8091e:	6809      	ldr	r1, [r1, #0]
   80920:	2061      	movs	r0, #97	; 0x61
   80922:	9002      	str	r0, [sp, #8]
   80924:	9301      	str	r3, [sp, #4]
   80926:	9200      	str	r2, [sp, #0]
   80928:	2301      	movs	r3, #1
   8092a:	220a      	movs	r2, #10
   8092c:	4630      	mov	r0, r6
   8092e:	4f29      	ldr	r7, [pc, #164]	; (809d4 <print+0x148>)
   80930:	47b8      	blx	r7
   80932:	4405      	add	r5, r0
				continue;
   80934:	e032      	b.n	8099c <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80936:	9905      	ldr	r1, [sp, #20]
   80938:	1d08      	adds	r0, r1, #4
   8093a:	9005      	str	r0, [sp, #20]
   8093c:	6809      	ldr	r1, [r1, #0]
   8093e:	2061      	movs	r0, #97	; 0x61
   80940:	9002      	str	r0, [sp, #8]
   80942:	9301      	str	r3, [sp, #4]
   80944:	9200      	str	r2, [sp, #0]
   80946:	2300      	movs	r3, #0
   80948:	2210      	movs	r2, #16
   8094a:	4630      	mov	r0, r6
   8094c:	4f21      	ldr	r7, [pc, #132]	; (809d4 <print+0x148>)
   8094e:	47b8      	blx	r7
   80950:	4405      	add	r5, r0
				continue;
   80952:	e023      	b.n	8099c <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80954:	9905      	ldr	r1, [sp, #20]
   80956:	1d08      	adds	r0, r1, #4
   80958:	9005      	str	r0, [sp, #20]
   8095a:	6809      	ldr	r1, [r1, #0]
   8095c:	2041      	movs	r0, #65	; 0x41
   8095e:	9002      	str	r0, [sp, #8]
   80960:	9301      	str	r3, [sp, #4]
   80962:	9200      	str	r2, [sp, #0]
   80964:	2300      	movs	r3, #0
   80966:	2210      	movs	r2, #16
   80968:	4630      	mov	r0, r6
   8096a:	4f1a      	ldr	r7, [pc, #104]	; (809d4 <print+0x148>)
   8096c:	47b8      	blx	r7
   8096e:	4405      	add	r5, r0
				continue;
   80970:	e014      	b.n	8099c <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80972:	9905      	ldr	r1, [sp, #20]
   80974:	1d08      	adds	r0, r1, #4
   80976:	9005      	str	r0, [sp, #20]
   80978:	6809      	ldr	r1, [r1, #0]
   8097a:	2061      	movs	r0, #97	; 0x61
   8097c:	9002      	str	r0, [sp, #8]
   8097e:	9301      	str	r3, [sp, #4]
   80980:	9200      	str	r2, [sp, #0]
   80982:	2300      	movs	r3, #0
   80984:	220a      	movs	r2, #10
   80986:	4630      	mov	r0, r6
   80988:	4f12      	ldr	r7, [pc, #72]	; (809d4 <print+0x148>)
   8098a:	47b8      	blx	r7
   8098c:	4405      	add	r5, r0
				continue;
   8098e:	e005      	b.n	8099c <print+0x110>
			++format;
   80990:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   80992:	7821      	ldrb	r1, [r4, #0]
   80994:	4630      	mov	r0, r6
   80996:	4b10      	ldr	r3, [pc, #64]	; (809d8 <print+0x14c>)
   80998:	4798      	blx	r3
			++pc;
   8099a:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   8099c:	3401      	adds	r4, #1
   8099e:	7823      	ldrb	r3, [r4, #0]
   809a0:	b163      	cbz	r3, 809bc <print+0x130>
		if (*format == '%') {
   809a2:	2b25      	cmp	r3, #37	; 0x25
   809a4:	d1f5      	bne.n	80992 <print+0x106>
			++format;
   809a6:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   809a8:	7863      	ldrb	r3, [r4, #1]
   809aa:	b13b      	cbz	r3, 809bc <print+0x130>
			if (*format == '%') goto out;
   809ac:	2b25      	cmp	r3, #37	; 0x25
   809ae:	d0ef      	beq.n	80990 <print+0x104>
			if (*format == '-') {
   809b0:	2b2d      	cmp	r3, #45	; 0x2d
   809b2:	f43f af72 	beq.w	8089a <print+0xe>
			width = pad = 0;
   809b6:	2300      	movs	r3, #0
   809b8:	4614      	mov	r4, r2
   809ba:	e774      	b.n	808a6 <print+0x1a>
		}
	}
	if (out) **out = '\0';
   809bc:	b116      	cbz	r6, 809c4 <print+0x138>
   809be:	6833      	ldr	r3, [r6, #0]
   809c0:	2200      	movs	r2, #0
   809c2:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   809c4:	4628      	mov	r0, r5
   809c6:	b009      	add	sp, #36	; 0x24
   809c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   809ca:	bf00      	nop
   809cc:	0008075d 	.word	0x0008075d
   809d0:	00081060 	.word	0x00081060
   809d4:	000807e1 	.word	0x000807e1
   809d8:	0008074d 	.word	0x0008074d

000809dc <printf>:

int printf(const char *format, ...)
{
   809dc:	b40f      	push	{r0, r1, r2, r3}
   809de:	b500      	push	{lr}
   809e0:	b083      	sub	sp, #12
   809e2:	aa04      	add	r2, sp, #16
   809e4:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   809e8:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   809ea:	2000      	movs	r0, #0
   809ec:	4b03      	ldr	r3, [pc, #12]	; (809fc <printf+0x20>)
   809ee:	4798      	blx	r3
}
   809f0:	b003      	add	sp, #12
   809f2:	f85d eb04 	ldr.w	lr, [sp], #4
   809f6:	b004      	add	sp, #16
   809f8:	4770      	bx	lr
   809fa:	bf00      	nop
   809fc:	0008088d 	.word	0x0008088d

00080a00 <peripheral_init_pwm>:
void peripheral_init_pwm(){
	
	
	// PIOC->PIO_PER |= ((0x1 << 19));
	
	PIOC ->  PIO_PDR |= PIO_PDR_P19;
   80a00:	4b08      	ldr	r3, [pc, #32]	; (80a24 <peripheral_init_pwm+0x24>)
   80a02:	685a      	ldr	r2, [r3, #4]
   80a04:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80a08:	605a      	str	r2, [r3, #4]
	
	// Using peripheral B of PIOC19
	PIOC ->PIO_ABSR |= PIO_ABSR_P19;
   80a0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80a0c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80a10:	671a      	str	r2, [r3, #112]	; 0x70
	
	/* Enable clock for the PWM peripheral */
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;
   80a12:	4a05      	ldr	r2, [pc, #20]	; (80a28 <peripheral_init_pwm+0x28>)
   80a14:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80a18:	f043 0310 	orr.w	r3, r3, #16
   80a1c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
   80a20:	4770      	bx	lr
   80a22:	bf00      	nop
   80a24:	400e1200 	.word	0x400e1200
   80a28:	400e0600 	.word	0x400e0600

00080a2c <pwm_init>:
}

void pwm_init()
{

	PWM->PWM_WPCR |= PWM_WPCR_WPCMD(0);
   80a2c:	4b19      	ldr	r3, [pc, #100]	; (80a94 <pwm_init+0x68>)
   80a2e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   80a32:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_WPCR |= PWM_WPCR_WPRG3;
   80a36:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   80a3a:	f042 0220 	orr.w	r2, r2, #32
   80a3e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_ENA |= PWM_ENA_CHID5;
   80a42:	685a      	ldr	r2, [r3, #4]
   80a44:	f042 0220 	orr.w	r2, r2, #32
   80a48:	605a      	str	r2, [r3, #4]
	PWM->PWM_CH_NUM[5].PWM_CMR |=PWM_CMR_CPRE_CLKB;
   80a4a:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
   80a4e:	f042 020c 	orr.w	r2, r2, #12
   80a52:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	PWM->PWM_CH_NUM[5].PWM_CMR |=~(PWM_CMR_CALG | PWM_CMR_CPOL);
   80a56:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
   80a5a:	f462 7240 	orn	r2, r2, #768	; 0x300
   80a5e:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	
	PWM->PWM_CLK |= PWM_CLK_DIVA(0);
   80a62:	681a      	ldr	r2, [r3, #0]
   80a64:	601a      	str	r2, [r3, #0]
	PWM->PWM_CLK |= PWM_CLK_DIVB(42);
   80a66:	681a      	ldr	r2, [r3, #0]
   80a68:	f442 1228 	orr.w	r2, r2, #2752512	; 0x2a0000
   80a6c:	601a      	str	r2, [r3, #0]
	PWM->PWM_CLK |= PWM_CLK_PREB(0);
   80a6e:	681a      	ldr	r2, [r3, #0]
   80a70:	601a      	str	r2, [r3, #0]
	
	int PWM_period_tick=40000;
	int PWM_dutycycle_tick=3000; //MIN 1800 CENTER:3000 MAX:4200
	PWM->PWM_CH_NUM[5].PWM_CPRD |= PWM_period_tick;
   80a72:	f8d3 22ac 	ldr.w	r2, [r3, #684]	; 0x2ac
   80a76:	f442 421c 	orr.w	r2, r2, #39936	; 0x9c00
   80a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80a7e:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY |= PWM_dutycycle_tick;
   80a82:	f8d3 22a4 	ldr.w	r2, [r3, #676]	; 0x2a4
   80a86:	f442 623b 	orr.w	r2, r2, #2992	; 0xbb0
   80a8a:	f042 0208 	orr.w	r2, r2, #8
   80a8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
   80a92:	4770      	bx	lr
   80a94:	40094000 	.word	0x40094000

00080a98 <pwm_duty_update>:
	
	//PWM->PWM_CH_NUM[5].PWM_CDTYUPD |= PWM_dutycycle_tick_NEW; example
}

void pwm_duty_update(int PWM_dutycycle_tick_NEW)
{
   80a98:	b508      	push	{r3, lr}
	if(1800<=PWM_dutycycle_tick_NEW && PWM_dutycycle_tick_NEW<=4200)
   80a9a:	f5a0 63e1 	sub.w	r3, r0, #1800	; 0x708
   80a9e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   80aa2:	d806      	bhi.n	80ab2 <pwm_duty_update+0x1a>
	{
		PWM->PWM_CH_NUM[5].PWM_CDTYUPD |= PWM_dutycycle_tick_NEW;
   80aa4:	4b05      	ldr	r3, [pc, #20]	; (80abc <pwm_duty_update+0x24>)
   80aa6:	f8d3 22a8 	ldr.w	r2, [r3, #680]	; 0x2a8
   80aaa:	4310      	orrs	r0, r2
   80aac:	f8c3 02a8 	str.w	r0, [r3, #680]	; 0x2a8
   80ab0:	bd08      	pop	{r3, pc}
	}
	else
	{
		printf("End of Range ");
   80ab2:	4803      	ldr	r0, [pc, #12]	; (80ac0 <pwm_duty_update+0x28>)
   80ab4:	4b03      	ldr	r3, [pc, #12]	; (80ac4 <pwm_duty_update+0x2c>)
   80ab6:	4798      	blx	r3
   80ab8:	bd08      	pop	{r3, pc}
   80aba:	bf00      	nop
   80abc:	40094000 	.word	0x40094000
   80ac0:	00081068 	.word	0x00081068
   80ac4:	000809dd 	.word	0x000809dd

00080ac8 <joystick_input>:
	}
}

void joystick_input(void)
{
   80ac8:	b510      	push	{r4, lr}


	int pwm_dutycycle = (int)(PWM->PWM_CH_NUM[5].PWM_CDTY);
   80aca:	4b0d      	ldr	r3, [pc, #52]	; (80b00 <joystick_input+0x38>)
   80acc:	f8d3 42a4 	ldr.w	r4, [r3, #676]	; 0x2a4
		if (P1000_data.joystick==0)
   80ad0:	4b0c      	ldr	r3, [pc, #48]	; (80b04 <joystick_input+0x3c>)
   80ad2:	681b      	ldr	r3, [r3, #0]
   80ad4:	b13b      	cbz	r3, 80ae6 <joystick_input+0x1e>
		{
			pwm_dutycycle+=100;
			printf("increased duty cycle to %d \n",pwm_dutycycle);
		}
		if (P1000_data.joystick==1){
   80ad6:	4b0b      	ldr	r3, [pc, #44]	; (80b04 <joystick_input+0x3c>)
   80ad8:	681b      	ldr	r3, [r3, #0]
   80ada:	2b01      	cmp	r3, #1
   80adc:	d009      	beq.n	80af2 <joystick_input+0x2a>
			pwm_dutycycle-=100;
			printf("decreased duty cycle to %d \n",pwm_dutycycle);
		}
		pwm_duty_update(pwm_dutycycle);
   80ade:	4620      	mov	r0, r4
   80ae0:	4b09      	ldr	r3, [pc, #36]	; (80b08 <joystick_input+0x40>)
   80ae2:	4798      	blx	r3
   80ae4:	bd10      	pop	{r4, pc}
			pwm_dutycycle+=100;
   80ae6:	3464      	adds	r4, #100	; 0x64
			printf("increased duty cycle to %d \n",pwm_dutycycle);
   80ae8:	4621      	mov	r1, r4
   80aea:	4808      	ldr	r0, [pc, #32]	; (80b0c <joystick_input+0x44>)
   80aec:	4b08      	ldr	r3, [pc, #32]	; (80b10 <joystick_input+0x48>)
   80aee:	4798      	blx	r3
   80af0:	e7f1      	b.n	80ad6 <joystick_input+0xe>
			pwm_dutycycle-=100;
   80af2:	3c64      	subs	r4, #100	; 0x64
			printf("decreased duty cycle to %d \n",pwm_dutycycle);
   80af4:	4621      	mov	r1, r4
   80af6:	4807      	ldr	r0, [pc, #28]	; (80b14 <joystick_input+0x4c>)
   80af8:	4b05      	ldr	r3, [pc, #20]	; (80b10 <joystick_input+0x48>)
   80afa:	4798      	blx	r3
   80afc:	e7ef      	b.n	80ade <joystick_input+0x16>
   80afe:	bf00      	nop
   80b00:	40094000 	.word	0x40094000
   80b04:	20000450 	.word	0x20000450
   80b08:	00080a99 	.word	0x00080a99
   80b0c:	00081078 	.word	0x00081078
   80b10:	000809dd 	.word	0x000809dd
   80b14:	00081098 	.word	0x00081098

00080b18 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80b18:	4b16      	ldr	r3, [pc, #88]	; (80b74 <configure_uart+0x5c>)
   80b1a:	2200      	movs	r2, #0
   80b1c:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80b1e:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80b20:	4b15      	ldr	r3, [pc, #84]	; (80b78 <configure_uart+0x60>)
   80b22:	f44f 7140 	mov.w	r1, #768	; 0x300
   80b26:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80b28:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80b2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80b2c:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80b2e:	4002      	ands	r2, r0
   80b30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80b34:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80b36:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80b38:	f44f 7280 	mov.w	r2, #256	; 0x100
   80b3c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80b40:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80b42:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80b46:	21ac      	movs	r1, #172	; 0xac
   80b48:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / (16 * x) = BaudRate (write x into UART_BRGR)  
   80b4a:	f240 2123 	movw	r1, #547	; 0x223
   80b4e:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80b50:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80b54:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80b56:	f240 2102 	movw	r1, #514	; 0x202
   80b5a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80b5e:	f04f 31ff 	mov.w	r1, #4294967295
   80b62:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80b64:	21e1      	movs	r1, #225	; 0xe1
   80b66:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80b68:	4904      	ldr	r1, [pc, #16]	; (80b7c <configure_uart+0x64>)
   80b6a:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80b6c:	2250      	movs	r2, #80	; 0x50
   80b6e:	601a      	str	r2, [r3, #0]
   80b70:	4770      	bx	lr
   80b72:	bf00      	nop
   80b74:	2000045c 	.word	0x2000045c
   80b78:	400e0e00 	.word	0x400e0e00
   80b7c:	e000e100 	.word	0xe000e100

00080b80 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80b80:	4b07      	ldr	r3, [pc, #28]	; (80ba0 <uart_putchar+0x20>)
   80b82:	695b      	ldr	r3, [r3, #20]
   80b84:	f013 0f02 	tst.w	r3, #2
   80b88:	d008      	beq.n	80b9c <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80b8a:	4b05      	ldr	r3, [pc, #20]	; (80ba0 <uart_putchar+0x20>)
   80b8c:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80b8e:	4b04      	ldr	r3, [pc, #16]	; (80ba0 <uart_putchar+0x20>)
   80b90:	695b      	ldr	r3, [r3, #20]
   80b92:	f413 7f00 	tst.w	r3, #512	; 0x200
   80b96:	d0fa      	beq.n	80b8e <uart_putchar+0xe>
	return 0;
   80b98:	2000      	movs	r0, #0
   80b9a:	4770      	bx	lr
	return 1;
   80b9c:	2001      	movs	r0, #1
}
   80b9e:	4770      	bx	lr
   80ba0:	400e0800 	.word	0x400e0800

00080ba4 <UART_Handler>:

void UART_Handler(void)
{
   80ba4:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80ba6:	4b15      	ldr	r3, [pc, #84]	; (80bfc <UART_Handler+0x58>)
   80ba8:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80baa:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80bae:	d003      	beq.n	80bb8 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80bb0:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80bb4:	4a11      	ldr	r2, [pc, #68]	; (80bfc <UART_Handler+0x58>)
   80bb6:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80bb8:	f013 0f01 	tst.w	r3, #1
   80bbc:	d012      	beq.n	80be4 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80bbe:	4810      	ldr	r0, [pc, #64]	; (80c00 <UART_Handler+0x5c>)
   80bc0:	7842      	ldrb	r2, [r0, #1]
   80bc2:	1c53      	adds	r3, r2, #1
   80bc4:	4259      	negs	r1, r3
   80bc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80bca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80bce:	bf58      	it	pl
   80bd0:	424b      	negpl	r3, r1
   80bd2:	7801      	ldrb	r1, [r0, #0]
   80bd4:	428b      	cmp	r3, r1
   80bd6:	d006      	beq.n	80be6 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80bd8:	4908      	ldr	r1, [pc, #32]	; (80bfc <UART_Handler+0x58>)
   80bda:	6988      	ldr	r0, [r1, #24]
   80bdc:	4908      	ldr	r1, [pc, #32]	; (80c00 <UART_Handler+0x5c>)
   80bde:	440a      	add	r2, r1
   80be0:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80be2:	704b      	strb	r3, [r1, #1]
   80be4:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80be6:	4807      	ldr	r0, [pc, #28]	; (80c04 <UART_Handler+0x60>)
   80be8:	4b07      	ldr	r3, [pc, #28]	; (80c08 <UART_Handler+0x64>)
   80bea:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80bec:	4b04      	ldr	r3, [pc, #16]	; (80c00 <UART_Handler+0x5c>)
   80bee:	7859      	ldrb	r1, [r3, #1]
   80bf0:	4a02      	ldr	r2, [pc, #8]	; (80bfc <UART_Handler+0x58>)
   80bf2:	6992      	ldr	r2, [r2, #24]
   80bf4:	440b      	add	r3, r1
   80bf6:	709a      	strb	r2, [r3, #2]
			return;
   80bf8:	bd08      	pop	{r3, pc}
   80bfa:	bf00      	nop
   80bfc:	400e0800 	.word	0x400e0800
   80c00:	2000045c 	.word	0x2000045c
   80c04:	000810b8 	.word	0x000810b8
   80c08:	000809dd 	.word	0x000809dd

00080c0c <__aeabi_fmul>:
   80c0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80c10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   80c14:	bf1e      	ittt	ne
   80c16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   80c1a:	ea92 0f0c 	teqne	r2, ip
   80c1e:	ea93 0f0c 	teqne	r3, ip
   80c22:	d06f      	beq.n	80d04 <__aeabi_fmul+0xf8>
   80c24:	441a      	add	r2, r3
   80c26:	ea80 0c01 	eor.w	ip, r0, r1
   80c2a:	0240      	lsls	r0, r0, #9
   80c2c:	bf18      	it	ne
   80c2e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   80c32:	d01e      	beq.n	80c72 <__aeabi_fmul+0x66>
   80c34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   80c38:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   80c3c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   80c40:	fba0 3101 	umull	r3, r1, r0, r1
   80c44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   80c48:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   80c4c:	bf3e      	ittt	cc
   80c4e:	0049      	lslcc	r1, r1, #1
   80c50:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   80c54:	005b      	lslcc	r3, r3, #1
   80c56:	ea40 0001 	orr.w	r0, r0, r1
   80c5a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   80c5e:	2afd      	cmp	r2, #253	; 0xfd
   80c60:	d81d      	bhi.n	80c9e <__aeabi_fmul+0x92>
   80c62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   80c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   80c6a:	bf08      	it	eq
   80c6c:	f020 0001 	biceq.w	r0, r0, #1
   80c70:	4770      	bx	lr
   80c72:	f090 0f00 	teq	r0, #0
   80c76:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   80c7a:	bf08      	it	eq
   80c7c:	0249      	lsleq	r1, r1, #9
   80c7e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   80c82:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   80c86:	3a7f      	subs	r2, #127	; 0x7f
   80c88:	bfc2      	ittt	gt
   80c8a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   80c8e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   80c92:	4770      	bxgt	lr
   80c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80c98:	f04f 0300 	mov.w	r3, #0
   80c9c:	3a01      	subs	r2, #1
   80c9e:	dc5d      	bgt.n	80d5c <__aeabi_fmul+0x150>
   80ca0:	f112 0f19 	cmn.w	r2, #25
   80ca4:	bfdc      	itt	le
   80ca6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   80caa:	4770      	bxle	lr
   80cac:	f1c2 0200 	rsb	r2, r2, #0
   80cb0:	0041      	lsls	r1, r0, #1
   80cb2:	fa21 f102 	lsr.w	r1, r1, r2
   80cb6:	f1c2 0220 	rsb	r2, r2, #32
   80cba:	fa00 fc02 	lsl.w	ip, r0, r2
   80cbe:	ea5f 0031 	movs.w	r0, r1, rrx
   80cc2:	f140 0000 	adc.w	r0, r0, #0
   80cc6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   80cca:	bf08      	it	eq
   80ccc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   80cd0:	4770      	bx	lr
   80cd2:	f092 0f00 	teq	r2, #0
   80cd6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   80cda:	bf02      	ittt	eq
   80cdc:	0040      	lsleq	r0, r0, #1
   80cde:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   80ce2:	3a01      	subeq	r2, #1
   80ce4:	d0f9      	beq.n	80cda <__aeabi_fmul+0xce>
   80ce6:	ea40 000c 	orr.w	r0, r0, ip
   80cea:	f093 0f00 	teq	r3, #0
   80cee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   80cf2:	bf02      	ittt	eq
   80cf4:	0049      	lsleq	r1, r1, #1
   80cf6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   80cfa:	3b01      	subeq	r3, #1
   80cfc:	d0f9      	beq.n	80cf2 <__aeabi_fmul+0xe6>
   80cfe:	ea41 010c 	orr.w	r1, r1, ip
   80d02:	e78f      	b.n	80c24 <__aeabi_fmul+0x18>
   80d04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   80d08:	ea92 0f0c 	teq	r2, ip
   80d0c:	bf18      	it	ne
   80d0e:	ea93 0f0c 	teqne	r3, ip
   80d12:	d00a      	beq.n	80d2a <__aeabi_fmul+0x11e>
   80d14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   80d18:	bf18      	it	ne
   80d1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   80d1e:	d1d8      	bne.n	80cd2 <__aeabi_fmul+0xc6>
   80d20:	ea80 0001 	eor.w	r0, r0, r1
   80d24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   80d28:	4770      	bx	lr
   80d2a:	f090 0f00 	teq	r0, #0
   80d2e:	bf17      	itett	ne
   80d30:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   80d34:	4608      	moveq	r0, r1
   80d36:	f091 0f00 	teqne	r1, #0
   80d3a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   80d3e:	d014      	beq.n	80d6a <__aeabi_fmul+0x15e>
   80d40:	ea92 0f0c 	teq	r2, ip
   80d44:	d101      	bne.n	80d4a <__aeabi_fmul+0x13e>
   80d46:	0242      	lsls	r2, r0, #9
   80d48:	d10f      	bne.n	80d6a <__aeabi_fmul+0x15e>
   80d4a:	ea93 0f0c 	teq	r3, ip
   80d4e:	d103      	bne.n	80d58 <__aeabi_fmul+0x14c>
   80d50:	024b      	lsls	r3, r1, #9
   80d52:	bf18      	it	ne
   80d54:	4608      	movne	r0, r1
   80d56:	d108      	bne.n	80d6a <__aeabi_fmul+0x15e>
   80d58:	ea80 0001 	eor.w	r0, r0, r1
   80d5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   80d60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   80d64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80d68:	4770      	bx	lr
   80d6a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   80d6e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   80d72:	4770      	bx	lr

00080d74 <__aeabi_fdiv>:
   80d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   80d7c:	bf1e      	ittt	ne
   80d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   80d82:	ea92 0f0c 	teqne	r2, ip
   80d86:	ea93 0f0c 	teqne	r3, ip
   80d8a:	d069      	beq.n	80e60 <__aeabi_fdiv+0xec>
   80d8c:	eba2 0203 	sub.w	r2, r2, r3
   80d90:	ea80 0c01 	eor.w	ip, r0, r1
   80d94:	0249      	lsls	r1, r1, #9
   80d96:	ea4f 2040 	mov.w	r0, r0, lsl #9
   80d9a:	d037      	beq.n	80e0c <__aeabi_fdiv+0x98>
   80d9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   80da0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   80da4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   80da8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   80dac:	428b      	cmp	r3, r1
   80dae:	bf38      	it	cc
   80db0:	005b      	lslcc	r3, r3, #1
   80db2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   80db6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   80dba:	428b      	cmp	r3, r1
   80dbc:	bf24      	itt	cs
   80dbe:	1a5b      	subcs	r3, r3, r1
   80dc0:	ea40 000c 	orrcs.w	r0, r0, ip
   80dc4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   80dc8:	bf24      	itt	cs
   80dca:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   80dce:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   80dd2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   80dd6:	bf24      	itt	cs
   80dd8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   80ddc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   80de0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   80de4:	bf24      	itt	cs
   80de6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   80dea:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   80dee:	011b      	lsls	r3, r3, #4
   80df0:	bf18      	it	ne
   80df2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   80df6:	d1e0      	bne.n	80dba <__aeabi_fdiv+0x46>
   80df8:	2afd      	cmp	r2, #253	; 0xfd
   80dfa:	f63f af50 	bhi.w	80c9e <__aeabi_fmul+0x92>
   80dfe:	428b      	cmp	r3, r1
   80e00:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   80e04:	bf08      	it	eq
   80e06:	f020 0001 	biceq.w	r0, r0, #1
   80e0a:	4770      	bx	lr
   80e0c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   80e10:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   80e14:	327f      	adds	r2, #127	; 0x7f
   80e16:	bfc2      	ittt	gt
   80e18:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   80e1c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   80e20:	4770      	bxgt	lr
   80e22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80e26:	f04f 0300 	mov.w	r3, #0
   80e2a:	3a01      	subs	r2, #1
   80e2c:	e737      	b.n	80c9e <__aeabi_fmul+0x92>
   80e2e:	f092 0f00 	teq	r2, #0
   80e32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   80e36:	bf02      	ittt	eq
   80e38:	0040      	lsleq	r0, r0, #1
   80e3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   80e3e:	3a01      	subeq	r2, #1
   80e40:	d0f9      	beq.n	80e36 <__aeabi_fdiv+0xc2>
   80e42:	ea40 000c 	orr.w	r0, r0, ip
   80e46:	f093 0f00 	teq	r3, #0
   80e4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   80e4e:	bf02      	ittt	eq
   80e50:	0049      	lsleq	r1, r1, #1
   80e52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   80e56:	3b01      	subeq	r3, #1
   80e58:	d0f9      	beq.n	80e4e <__aeabi_fdiv+0xda>
   80e5a:	ea41 010c 	orr.w	r1, r1, ip
   80e5e:	e795      	b.n	80d8c <__aeabi_fdiv+0x18>
   80e60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   80e64:	ea92 0f0c 	teq	r2, ip
   80e68:	d108      	bne.n	80e7c <__aeabi_fdiv+0x108>
   80e6a:	0242      	lsls	r2, r0, #9
   80e6c:	f47f af7d 	bne.w	80d6a <__aeabi_fmul+0x15e>
   80e70:	ea93 0f0c 	teq	r3, ip
   80e74:	f47f af70 	bne.w	80d58 <__aeabi_fmul+0x14c>
   80e78:	4608      	mov	r0, r1
   80e7a:	e776      	b.n	80d6a <__aeabi_fmul+0x15e>
   80e7c:	ea93 0f0c 	teq	r3, ip
   80e80:	d104      	bne.n	80e8c <__aeabi_fdiv+0x118>
   80e82:	024b      	lsls	r3, r1, #9
   80e84:	f43f af4c 	beq.w	80d20 <__aeabi_fmul+0x114>
   80e88:	4608      	mov	r0, r1
   80e8a:	e76e      	b.n	80d6a <__aeabi_fmul+0x15e>
   80e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   80e90:	bf18      	it	ne
   80e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   80e96:	d1ca      	bne.n	80e2e <__aeabi_fdiv+0xba>
   80e98:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   80e9c:	f47f af5c 	bne.w	80d58 <__aeabi_fmul+0x14c>
   80ea0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   80ea4:	f47f af3c 	bne.w	80d20 <__aeabi_fmul+0x114>
   80ea8:	e75f      	b.n	80d6a <__aeabi_fmul+0x15e>
   80eaa:	bf00      	nop

00080eac <__libc_init_array>:
   80eac:	b570      	push	{r4, r5, r6, lr}
   80eae:	4e0f      	ldr	r6, [pc, #60]	; (80eec <__libc_init_array+0x40>)
   80eb0:	4d0f      	ldr	r5, [pc, #60]	; (80ef0 <__libc_init_array+0x44>)
   80eb2:	1b76      	subs	r6, r6, r5
   80eb4:	10b6      	asrs	r6, r6, #2
   80eb6:	bf18      	it	ne
   80eb8:	2400      	movne	r4, #0
   80eba:	d005      	beq.n	80ec8 <__libc_init_array+0x1c>
   80ebc:	3401      	adds	r4, #1
   80ebe:	f855 3b04 	ldr.w	r3, [r5], #4
   80ec2:	4798      	blx	r3
   80ec4:	42a6      	cmp	r6, r4
   80ec6:	d1f9      	bne.n	80ebc <__libc_init_array+0x10>
   80ec8:	4e0a      	ldr	r6, [pc, #40]	; (80ef4 <__libc_init_array+0x48>)
   80eca:	4d0b      	ldr	r5, [pc, #44]	; (80ef8 <__libc_init_array+0x4c>)
   80ecc:	f000 f906 	bl	810dc <_init>
   80ed0:	1b76      	subs	r6, r6, r5
   80ed2:	10b6      	asrs	r6, r6, #2
   80ed4:	bf18      	it	ne
   80ed6:	2400      	movne	r4, #0
   80ed8:	d006      	beq.n	80ee8 <__libc_init_array+0x3c>
   80eda:	3401      	adds	r4, #1
   80edc:	f855 3b04 	ldr.w	r3, [r5], #4
   80ee0:	4798      	blx	r3
   80ee2:	42a6      	cmp	r6, r4
   80ee4:	d1f9      	bne.n	80eda <__libc_init_array+0x2e>
   80ee6:	bd70      	pop	{r4, r5, r6, pc}
   80ee8:	bd70      	pop	{r4, r5, r6, pc}
   80eea:	bf00      	nop
   80eec:	000810e8 	.word	0x000810e8
   80ef0:	000810e8 	.word	0x000810e8
   80ef4:	000810f0 	.word	0x000810f0
   80ef8:	000810e8 	.word	0x000810e8

00080efc <register_fini>:
   80efc:	4b02      	ldr	r3, [pc, #8]	; (80f08 <register_fini+0xc>)
   80efe:	b113      	cbz	r3, 80f06 <register_fini+0xa>
   80f00:	4802      	ldr	r0, [pc, #8]	; (80f0c <register_fini+0x10>)
   80f02:	f000 b805 	b.w	80f10 <atexit>
   80f06:	4770      	bx	lr
   80f08:	00000000 	.word	0x00000000
   80f0c:	00080f1d 	.word	0x00080f1d

00080f10 <atexit>:
   80f10:	2300      	movs	r3, #0
   80f12:	4601      	mov	r1, r0
   80f14:	461a      	mov	r2, r3
   80f16:	4618      	mov	r0, r3
   80f18:	f000 b81e 	b.w	80f58 <__register_exitproc>

00080f1c <__libc_fini_array>:
   80f1c:	b538      	push	{r3, r4, r5, lr}
   80f1e:	4c0a      	ldr	r4, [pc, #40]	; (80f48 <__libc_fini_array+0x2c>)
   80f20:	4d0a      	ldr	r5, [pc, #40]	; (80f4c <__libc_fini_array+0x30>)
   80f22:	1b64      	subs	r4, r4, r5
   80f24:	10a4      	asrs	r4, r4, #2
   80f26:	d00a      	beq.n	80f3e <__libc_fini_array+0x22>
   80f28:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80f2c:	3b01      	subs	r3, #1
   80f2e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80f32:	3c01      	subs	r4, #1
   80f34:	f855 3904 	ldr.w	r3, [r5], #-4
   80f38:	4798      	blx	r3
   80f3a:	2c00      	cmp	r4, #0
   80f3c:	d1f9      	bne.n	80f32 <__libc_fini_array+0x16>
   80f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80f42:	f000 b8d5 	b.w	810f0 <_fini>
   80f46:	bf00      	nop
   80f48:	00081100 	.word	0x00081100
   80f4c:	000810fc 	.word	0x000810fc

00080f50 <__retarget_lock_acquire_recursive>:
   80f50:	4770      	bx	lr
   80f52:	bf00      	nop

00080f54 <__retarget_lock_release_recursive>:
   80f54:	4770      	bx	lr
   80f56:	bf00      	nop

00080f58 <__register_exitproc>:
   80f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80f5c:	4d2c      	ldr	r5, [pc, #176]	; (81010 <__register_exitproc+0xb8>)
   80f5e:	4606      	mov	r6, r0
   80f60:	6828      	ldr	r0, [r5, #0]
   80f62:	4698      	mov	r8, r3
   80f64:	460f      	mov	r7, r1
   80f66:	4691      	mov	r9, r2
   80f68:	f7ff fff2 	bl	80f50 <__retarget_lock_acquire_recursive>
   80f6c:	4b29      	ldr	r3, [pc, #164]	; (81014 <__register_exitproc+0xbc>)
   80f6e:	681c      	ldr	r4, [r3, #0]
   80f70:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80f74:	2b00      	cmp	r3, #0
   80f76:	d03e      	beq.n	80ff6 <__register_exitproc+0x9e>
   80f78:	685a      	ldr	r2, [r3, #4]
   80f7a:	2a1f      	cmp	r2, #31
   80f7c:	dc1c      	bgt.n	80fb8 <__register_exitproc+0x60>
   80f7e:	f102 0e01 	add.w	lr, r2, #1
   80f82:	b176      	cbz	r6, 80fa2 <__register_exitproc+0x4a>
   80f84:	2101      	movs	r1, #1
   80f86:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80f8a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80f8e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80f92:	4091      	lsls	r1, r2
   80f94:	4308      	orrs	r0, r1
   80f96:	2e02      	cmp	r6, #2
   80f98:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80f9c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80fa0:	d023      	beq.n	80fea <__register_exitproc+0x92>
   80fa2:	3202      	adds	r2, #2
   80fa4:	f8c3 e004 	str.w	lr, [r3, #4]
   80fa8:	6828      	ldr	r0, [r5, #0]
   80faa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80fae:	f7ff ffd1 	bl	80f54 <__retarget_lock_release_recursive>
   80fb2:	2000      	movs	r0, #0
   80fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80fb8:	4b17      	ldr	r3, [pc, #92]	; (81018 <__register_exitproc+0xc0>)
   80fba:	b30b      	cbz	r3, 81000 <__register_exitproc+0xa8>
   80fbc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80fc0:	f3af 8000 	nop.w
   80fc4:	4603      	mov	r3, r0
   80fc6:	b1d8      	cbz	r0, 81000 <__register_exitproc+0xa8>
   80fc8:	2000      	movs	r0, #0
   80fca:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80fce:	f04f 0e01 	mov.w	lr, #1
   80fd2:	6058      	str	r0, [r3, #4]
   80fd4:	6019      	str	r1, [r3, #0]
   80fd6:	4602      	mov	r2, r0
   80fd8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80fdc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80fe0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80fe4:	2e00      	cmp	r6, #0
   80fe6:	d0dc      	beq.n	80fa2 <__register_exitproc+0x4a>
   80fe8:	e7cc      	b.n	80f84 <__register_exitproc+0x2c>
   80fea:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80fee:	4301      	orrs	r1, r0
   80ff0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80ff4:	e7d5      	b.n	80fa2 <__register_exitproc+0x4a>
   80ff6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80ffa:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80ffe:	e7bb      	b.n	80f78 <__register_exitproc+0x20>
   81000:	6828      	ldr	r0, [r5, #0]
   81002:	f7ff ffa7 	bl	80f54 <__retarget_lock_release_recursive>
   81006:	f04f 30ff 	mov.w	r0, #4294967295
   8100a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8100e:	bf00      	nop
   81010:	20000430 	.word	0x20000430
   81014:	000810d8 	.word	0x000810d8
   81018:	00000000 	.word	0x00000000
   8101c:	304e4143 	.word	0x304e4143
   81020:	73656d20 	.word	0x73656d20
   81024:	65676173 	.word	0x65676173
   81028:	72726120 	.word	0x72726120
   8102c:	64657669 	.word	0x64657669
   81030:	206e6920 	.word	0x206e6920
   81034:	2d6e6f6e 	.word	0x2d6e6f6e
   81038:	64657375 	.word	0x64657375
   8103c:	69616d20 	.word	0x69616d20
   81040:	786f626c 	.word	0x786f626c
   81044:	00000d0a 	.word	0x00000d0a
   81048:	4c414f47 	.word	0x4c414f47
   8104c:	63732021 	.word	0x63732021
   81050:	2065726f 	.word	0x2065726f
   81054:	6425203d 	.word	0x6425203d
   81058:	0000000a 	.word	0x0000000a
   8105c:	000a6425 	.word	0x000a6425
   81060:	6c756e28 	.word	0x6c756e28
   81064:	0000296c 	.word	0x0000296c
   81068:	20646e45 	.word	0x20646e45
   8106c:	5220666f 	.word	0x5220666f
   81070:	65676e61 	.word	0x65676e61
   81074:	00000020 	.word	0x00000020
   81078:	72636e69 	.word	0x72636e69
   8107c:	65736165 	.word	0x65736165
   81080:	75642064 	.word	0x75642064
   81084:	63207974 	.word	0x63207974
   81088:	656c6379 	.word	0x656c6379
   8108c:	206f7420 	.word	0x206f7420
   81090:	0a206425 	.word	0x0a206425
   81094:	00000000 	.word	0x00000000
   81098:	72636564 	.word	0x72636564
   8109c:	65736165 	.word	0x65736165
   810a0:	75642064 	.word	0x75642064
   810a4:	63207974 	.word	0x63207974
   810a8:	656c6379 	.word	0x656c6379
   810ac:	206f7420 	.word	0x206f7420
   810b0:	0a206425 	.word	0x0a206425
   810b4:	00000000 	.word	0x00000000
   810b8:	3a525245 	.word	0x3a525245
   810bc:	52415520 	.word	0x52415520
   810c0:	58522054 	.word	0x58522054
   810c4:	66756220 	.word	0x66756220
   810c8:	20726566 	.word	0x20726566
   810cc:	66207369 	.word	0x66207369
   810d0:	0a6c6c75 	.word	0x0a6c6c75
   810d4:	0000000d 	.word	0x0000000d

000810d8 <_global_impure_ptr>:
   810d8:	20000008                                ... 

000810dc <_init>:
   810dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   810de:	bf00      	nop
   810e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   810e2:	bc08      	pop	{r3}
   810e4:	469e      	mov	lr, r3
   810e6:	4770      	bx	lr

000810e8 <__init_array_start>:
   810e8:	00080efd 	.word	0x00080efd

000810ec <__frame_dummy_init_array_entry>:
   810ec:	00080119                                ....

000810f0 <_fini>:
   810f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   810f2:	bf00      	nop
   810f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   810f6:	bc08      	pop	{r3}
   810f8:	469e      	mov	lr, r3
   810fa:	4770      	bx	lr

000810fc <__fini_array_start>:
   810fc:	000800f5 	.word	0x000800f5
