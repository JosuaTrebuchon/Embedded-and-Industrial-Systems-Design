
ArduinoNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cf4  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00081cf4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a8  20000434  00082128  00020434  2**2
                  ALLOC
  3 .stack        00000404  200004dc  000821d0  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008e0  000825d4  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00006db6  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001307  00000000  00000000  0002726c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001226  00000000  00000000  00028573  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000298  00000000  00000000  00029799  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000208  00000000  00000000  00029a31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012c86  00000000  00000000  00029c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000530f  00000000  00000000  0003c8bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055697  00000000  00000000  00041bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000008bc  00000000  00000000  00097268  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	e0 08 00 20 a5 03 08 00 a1 03 08 00 a1 03 08 00     ... ............
   80010:	a1 03 08 00 a1 03 08 00 a1 03 08 00 00 00 00 00     ................
	...
   8002c:	a1 03 08 00 a1 03 08 00 00 00 00 00 a1 03 08 00     ................
   8003c:	a1 03 08 00 a1 03 08 00 a1 03 08 00 a1 03 08 00     ................
   8004c:	a1 03 08 00 a1 03 08 00 a1 03 08 00 a1 03 08 00     ................
   8005c:	a1 03 08 00 ad 0d 08 00 a1 03 08 00 00 00 00 00     ................
   8006c:	a1 03 08 00 a1 03 08 00 a1 03 08 00 a1 03 08 00     ................
	...
   80084:	a1 03 08 00 a1 03 08 00 a1 03 08 00 a1 03 08 00     ................
   80094:	a1 03 08 00 a1 03 08 00 a1 03 08 00 a1 03 08 00     ................
   800a4:	00 00 00 00 a1 03 08 00 a1 03 08 00 a1 03 08 00     ................
   800b4:	a1 03 08 00 a1 03 08 00 a1 03 08 00 a1 03 08 00     ................
   800c4:	a1 03 08 00 a1 03 08 00 a1 03 08 00 a1 03 08 00     ................
   800d4:	a1 03 08 00 a1 03 08 00 a1 03 08 00 a1 03 08 00     ................
   800e4:	a1 03 08 00 a1 03 08 00 ed 02 08 00 a1 03 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00081cf4 	.word	0x00081cf4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081cf4 	.word	0x00081cf4
   80154:	20000438 	.word	0x20000438
   80158:	00081cf4 	.word	0x00081cf4
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if((num_rx_mb > 8) | (num_tx_mb > 8) | (num_rx_mb + num_tx_mb > 8))
   80162:	1857      	adds	r7, r2, r1
   80164:	2f08      	cmp	r7, #8
   80166:	bfd4      	ite	le
   80168:	2300      	movle	r3, #0
   8016a:	2301      	movgt	r3, #1
   8016c:	2908      	cmp	r1, #8
   8016e:	bf98      	it	ls
   80170:	2a08      	cmpls	r2, #8
   80172:	d85c      	bhi.n	8022e <can_init+0xce>
   80174:	460d      	mov	r5, r1
   80176:	2b00      	cmp	r3, #0
   80178:	d159      	bne.n	8022e <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   8017a:	4a2e      	ldr	r2, [pc, #184]	; (80234 <can_init+0xd4>)
   8017c:	6813      	ldr	r3, [r2, #0]
   8017e:	f023 0301 	bic.w	r3, r3, #1
   80182:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   80184:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80186:	4b2c      	ldr	r3, [pc, #176]	; (80238 <can_init+0xd8>)
   80188:	f44f 7440 	mov.w	r4, #768	; 0x300
   8018c:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   8018e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80190:	f024 0403 	bic.w	r4, r4, #3
   80194:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80196:	2403      	movs	r4, #3
   80198:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   8019a:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   8019c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801a0:	4c26      	ldr	r4, [pc, #152]	; (8023c <can_init+0xdc>)
   801a2:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a6:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801aa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801ae:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801b2:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801b4:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801b6:	e019      	b.n	801ec <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b8:	481e      	ldr	r0, [pc, #120]	; (80234 <can_init+0xd4>)
   801ba:	f101 0310 	add.w	r3, r1, #16
   801be:	015b      	lsls	r3, r3, #5
   801c0:	18c2      	adds	r2, r0, r3
   801c2:	2600      	movs	r6, #0
   801c4:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801c6:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   801ca:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   801ce:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801d2:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   801d6:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801d8:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   801dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   801e0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801e4:	2301      	movs	r3, #1
   801e6:	408b      	lsls	r3, r1
   801e8:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ea:	3101      	adds	r1, #1
   801ec:	42b9      	cmp	r1, r7
   801ee:	dde3      	ble.n	801b8 <can_init+0x58>
   801f0:	2300      	movs	r3, #0
   801f2:	e00d      	b.n	80210 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801f4:	490f      	ldr	r1, [pc, #60]	; (80234 <can_init+0xd4>)
   801f6:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   801fa:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   801fe:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80202:	f103 0210 	add.w	r2, r3, #16
   80206:	0152      	lsls	r2, r2, #5
   80208:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   8020c:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8020e:	3301      	adds	r3, #1
   80210:	42ab      	cmp	r3, r5
   80212:	dbef      	blt.n	801f4 <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80214:	4b07      	ldr	r3, [pc, #28]	; (80234 <can_init+0xd4>)
   80216:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80218:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8021c:	4a08      	ldr	r2, [pc, #32]	; (80240 <can_init+0xe0>)
   8021e:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80220:	681a      	ldr	r2, [r3, #0]
   80222:	f042 0201 	orr.w	r2, r2, #1
   80226:	601a      	str	r2, [r3, #0]

	return 0;
   80228:	2000      	movs	r0, #0
}
   8022a:	bcf0      	pop	{r4, r5, r6, r7}
   8022c:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   8022e:	2001      	movs	r0, #1
   80230:	e7fb      	b.n	8022a <can_init+0xca>
   80232:	bf00      	nop
   80234:	400b4000 	.word	0x400b4000
   80238:	400e0e00 	.word	0x400e0e00
   8023c:	1000102b 	.word	0x1000102b
   80240:	e000e100 	.word	0xe000e100

00080244 <can_init_def_tx_rx_mb>:
{
   80244:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80246:	2202      	movs	r2, #2
   80248:	2101      	movs	r1, #1
   8024a:	4b01      	ldr	r3, [pc, #4]	; (80250 <can_init_def_tx_rx_mb+0xc>)
   8024c:	4798      	blx	r3
}
   8024e:	bd08      	pop	{r3, pc}
   80250:	00080161 	.word	0x00080161

00080254 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80254:	014b      	lsls	r3, r1, #5
   80256:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8025a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80262:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80266:	d033      	beq.n	802d0 <can_receive+0x7c>
{
   80268:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   8026a:	014b      	lsls	r3, r1, #5
   8026c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80270:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80274:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80278:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   8027c:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80280:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80284:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80286:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   8028a:	f3c5 4503 	ubfx	r5, r5, #16, #4
   8028e:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80290:	2300      	movs	r3, #0
   80292:	e003      	b.n	8029c <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80294:	18c6      	adds	r6, r0, r3
   80296:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   80298:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   8029a:	3301      	adds	r3, #1
   8029c:	42ab      	cmp	r3, r5
   8029e:	da05      	bge.n	802ac <can_receive+0x58>
			if(i < 4)
   802a0:	2b03      	cmp	r3, #3
   802a2:	dcf7      	bgt.n	80294 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   802a4:	18c6      	adds	r6, r0, r3
   802a6:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   802a8:	0a24      	lsrs	r4, r4, #8
   802aa:	e7f6      	b.n	8029a <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802ac:	4b09      	ldr	r3, [pc, #36]	; (802d4 <can_receive+0x80>)
   802ae:	f101 0210 	add.w	r2, r1, #16
   802b2:	0152      	lsls	r2, r2, #5
   802b4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802b8:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802ba:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802be:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802c6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802ca:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802cc:	bc70      	pop	{r4, r5, r6}
   802ce:	4770      	bx	lr
		return 1;
   802d0:	2001      	movs	r0, #1
   802d2:	4770      	bx	lr
   802d4:	400b4000 	.word	0x400b4000

000802d8 <update_P1000>:


void update_P1000(P1000_DATA * data, CAN_MESSAGE* can_message)
{
	data->joystick = can_message->data[0];
   802d8:	78cb      	ldrb	r3, [r1, #3]
   802da:	6003      	str	r3, [r0, #0]
	data->left_slider = can_message->data[1];
   802dc:	790b      	ldrb	r3, [r1, #4]
   802de:	6043      	str	r3, [r0, #4]
	data->right_slider = can_message->data[2];
   802e0:	794b      	ldrb	r3, [r1, #5]
   802e2:	6083      	str	r3, [r0, #8]
	data->joystick_button = can_message->data[3];
   802e4:	798b      	ldrb	r3, [r1, #6]
   802e6:	60c3      	str	r3, [r0, #12]
   802e8:	4770      	bx	lr
	...

000802ec <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802ec:	b510      	push	{r4, lr}
   802ee:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   802f0:	4b17      	ldr	r3, [pc, #92]	; (80350 <CAN0_Handler+0x64>)
   802f2:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr  & (CAN_SR_MB1 | CAN_SR_MB2)) //Only mailbox 1 and 2 specified for receiving
   802f4:	f014 0f06 	tst.w	r4, #6
   802f8:	d01d      	beq.n	80336 <CAN0_Handler+0x4a>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802fa:	f014 0f02 	tst.w	r4, #2
   802fe:	d108      	bne.n	80312 <CAN0_Handler+0x26>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80300:	f014 0f04 	tst.w	r4, #4
   80304:	d00a      	beq.n	8031c <CAN0_Handler+0x30>
		
		{
			can_receive(&message, 2);
   80306:	2102      	movs	r1, #2
   80308:	a801      	add	r0, sp, #4
   8030a:	4b12      	ldr	r3, [pc, #72]	; (80354 <CAN0_Handler+0x68>)
   8030c:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   8030e:	2300      	movs	r3, #0
   80310:	e009      	b.n	80326 <CAN0_Handler+0x3a>
			can_receive(&message, 1);
   80312:	2101      	movs	r1, #1
   80314:	a801      	add	r0, sp, #4
   80316:	4b0f      	ldr	r3, [pc, #60]	; (80354 <CAN0_Handler+0x68>)
   80318:	4798      	blx	r3
   8031a:	e7f8      	b.n	8030e <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   8031c:	480e      	ldr	r0, [pc, #56]	; (80358 <CAN0_Handler+0x6c>)
   8031e:	4b0f      	ldr	r3, [pc, #60]	; (8035c <CAN0_Handler+0x70>)
   80320:	4798      	blx	r3
   80322:	e7f4      	b.n	8030e <CAN0_Handler+0x22>
		for (int i = 0; i < message.data_length; i++)
   80324:	3301      	adds	r3, #1
   80326:	f89d 2006 	ldrb.w	r2, [sp, #6]
   8032a:	4293      	cmp	r3, r2
   8032c:	dbfa      	blt.n	80324 <CAN0_Handler+0x38>
		{
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
		
		update_P1000(&P1000_data, &message);
   8032e:	a901      	add	r1, sp, #4
   80330:	480b      	ldr	r0, [pc, #44]	; (80360 <CAN0_Handler+0x74>)
   80332:	4b0c      	ldr	r3, [pc, #48]	; (80364 <CAN0_Handler+0x78>)
   80334:	4798      	blx	r3
	}
	
	if(can_sr & CAN_SR_MB0)
   80336:	f014 0f01 	tst.w	r4, #1
   8033a:	d002      	beq.n	80342 <CAN0_Handler+0x56>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   8033c:	2201      	movs	r2, #1
   8033e:	4b04      	ldr	r3, [pc, #16]	; (80350 <CAN0_Handler+0x64>)
   80340:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80342:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80346:	4b08      	ldr	r3, [pc, #32]	; (80368 <CAN0_Handler+0x7c>)
   80348:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   8034c:	b004      	add	sp, #16
   8034e:	bd10      	pop	{r4, pc}
   80350:	400b4000 	.word	0x400b4000
   80354:	00080255 	.word	0x00080255
   80358:	00081c64 	.word	0x00081c64
   8035c:	00080c1d 	.word	0x00080c1d
   80360:	20000464 	.word	0x20000464
   80364:	000802d9 	.word	0x000802d9
   80368:	e000e100 	.word	0xe000e100

0008036c <DACC_init>:
#include "DAC_driver.h"

void DACC_init(void)
{
	PMC->PMC_PCER1 |= PMC_PCER1_PID38;
   8036c:	4a0a      	ldr	r2, [pc, #40]	; (80398 <DACC_init+0x2c>)
   8036e:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   80376:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	/*Reset DACC*/
	DACC->DACC_CR |= DACC_CR_SWRST;
   8037a:	4b08      	ldr	r3, [pc, #32]	; (8039c <DACC_init+0x30>)
   8037c:	681a      	ldr	r2, [r3, #0]
   8037e:	f042 0201 	orr.w	r2, r2, #1
   80382:	601a      	str	r2, [r3, #0]
	
	/*Select CH1*/
	DACC->DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;
   80384:	685a      	ldr	r2, [r3, #4]
   80386:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   8038a:	605a      	str	r2, [r3, #4]
	
	/*Enable CH1*/
	DACC ->DACC_CHER |= DACC_CHER_CH1;
   8038c:	691a      	ldr	r2, [r3, #16]
   8038e:	f042 0202 	orr.w	r2, r2, #2
   80392:	611a      	str	r2, [r3, #16]
   80394:	4770      	bx	lr
   80396:	bf00      	nop
   80398:	400e0600 	.word	0x400e0600
   8039c:	400c8000 	.word	0x400c8000

000803a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   803a0:	e7fe      	b.n	803a0 <Dummy_Handler>
	...

000803a4 <Reset_Handler>:
{
   803a4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   803a6:	4b11      	ldr	r3, [pc, #68]	; (803ec <Reset_Handler+0x48>)
   803a8:	4a11      	ldr	r2, [pc, #68]	; (803f0 <Reset_Handler+0x4c>)
   803aa:	429a      	cmp	r2, r3
   803ac:	d009      	beq.n	803c2 <Reset_Handler+0x1e>
   803ae:	4b0f      	ldr	r3, [pc, #60]	; (803ec <Reset_Handler+0x48>)
   803b0:	4a0f      	ldr	r2, [pc, #60]	; (803f0 <Reset_Handler+0x4c>)
   803b2:	e003      	b.n	803bc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   803b4:	6811      	ldr	r1, [r2, #0]
   803b6:	6019      	str	r1, [r3, #0]
   803b8:	3304      	adds	r3, #4
   803ba:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   803bc:	490d      	ldr	r1, [pc, #52]	; (803f4 <Reset_Handler+0x50>)
   803be:	428b      	cmp	r3, r1
   803c0:	d3f8      	bcc.n	803b4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   803c2:	4b0d      	ldr	r3, [pc, #52]	; (803f8 <Reset_Handler+0x54>)
   803c4:	e002      	b.n	803cc <Reset_Handler+0x28>
                *pDest++ = 0;
   803c6:	2200      	movs	r2, #0
   803c8:	601a      	str	r2, [r3, #0]
   803ca:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   803cc:	4a0b      	ldr	r2, [pc, #44]	; (803fc <Reset_Handler+0x58>)
   803ce:	4293      	cmp	r3, r2
   803d0:	d3f9      	bcc.n	803c6 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   803d2:	4b0b      	ldr	r3, [pc, #44]	; (80400 <Reset_Handler+0x5c>)
   803d4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803dc:	4a09      	ldr	r2, [pc, #36]	; (80404 <Reset_Handler+0x60>)
   803de:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   803e0:	4b09      	ldr	r3, [pc, #36]	; (80408 <Reset_Handler+0x64>)
   803e2:	4798      	blx	r3
        main();
   803e4:	4b09      	ldr	r3, [pc, #36]	; (8040c <Reset_Handler+0x68>)
   803e6:	4798      	blx	r3
   803e8:	e7fe      	b.n	803e8 <Reset_Handler+0x44>
   803ea:	bf00      	nop
   803ec:	20000000 	.word	0x20000000
   803f0:	00081cf4 	.word	0x00081cf4
   803f4:	20000434 	.word	0x20000434
   803f8:	20000434 	.word	0x20000434
   803fc:	200004dc 	.word	0x200004dc
   80400:	00080000 	.word	0x00080000
   80404:	e000ed00 	.word	0xe000ed00
   80408:	00081af5 	.word	0x00081af5
   8040c:	00080569 	.word	0x00080569

00080410 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80410:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80414:	4a20      	ldr	r2, [pc, #128]	; (80498 <SystemInit+0x88>)
   80416:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80418:	f502 7200 	add.w	r2, r2, #512	; 0x200
   8041c:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   8041e:	4b1f      	ldr	r3, [pc, #124]	; (8049c <SystemInit+0x8c>)
   80420:	6a1b      	ldr	r3, [r3, #32]
   80422:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80426:	d107      	bne.n	80438 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80428:	4a1d      	ldr	r2, [pc, #116]	; (804a0 <SystemInit+0x90>)
   8042a:	4b1c      	ldr	r3, [pc, #112]	; (8049c <SystemInit+0x8c>)
   8042c:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   8042e:	4b1b      	ldr	r3, [pc, #108]	; (8049c <SystemInit+0x8c>)
   80430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80432:	f013 0f01 	tst.w	r3, #1
   80436:	d0fa      	beq.n	8042e <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80438:	4a1a      	ldr	r2, [pc, #104]	; (804a4 <SystemInit+0x94>)
   8043a:	4b18      	ldr	r3, [pc, #96]	; (8049c <SystemInit+0x8c>)
   8043c:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   8043e:	4b17      	ldr	r3, [pc, #92]	; (8049c <SystemInit+0x8c>)
   80440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80442:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80446:	d0fa      	beq.n	8043e <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80448:	4a14      	ldr	r2, [pc, #80]	; (8049c <SystemInit+0x8c>)
   8044a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8044c:	f023 0303 	bic.w	r3, r3, #3
   80450:	f043 0301 	orr.w	r3, r3, #1
   80454:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80456:	4b11      	ldr	r3, [pc, #68]	; (8049c <SystemInit+0x8c>)
   80458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8045a:	f013 0f08 	tst.w	r3, #8
   8045e:	d0fa      	beq.n	80456 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80460:	4a11      	ldr	r2, [pc, #68]	; (804a8 <SystemInit+0x98>)
   80462:	4b0e      	ldr	r3, [pc, #56]	; (8049c <SystemInit+0x8c>)
   80464:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80466:	4b0d      	ldr	r3, [pc, #52]	; (8049c <SystemInit+0x8c>)
   80468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8046a:	f013 0f02 	tst.w	r3, #2
   8046e:	d0fa      	beq.n	80466 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80470:	2211      	movs	r2, #17
   80472:	4b0a      	ldr	r3, [pc, #40]	; (8049c <SystemInit+0x8c>)
   80474:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80476:	4b09      	ldr	r3, [pc, #36]	; (8049c <SystemInit+0x8c>)
   80478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8047a:	f013 0f08 	tst.w	r3, #8
   8047e:	d0fa      	beq.n	80476 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80480:	2212      	movs	r2, #18
   80482:	4b06      	ldr	r3, [pc, #24]	; (8049c <SystemInit+0x8c>)
   80484:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80486:	4b05      	ldr	r3, [pc, #20]	; (8049c <SystemInit+0x8c>)
   80488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8048a:	f013 0f08 	tst.w	r3, #8
   8048e:	d0fa      	beq.n	80486 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80490:	4a06      	ldr	r2, [pc, #24]	; (804ac <SystemInit+0x9c>)
   80492:	4b07      	ldr	r3, [pc, #28]	; (804b0 <SystemInit+0xa0>)
   80494:	601a      	str	r2, [r3, #0]
   80496:	4770      	bx	lr
   80498:	400e0a00 	.word	0x400e0a00
   8049c:	400e0600 	.word	0x400e0600
   804a0:	00370809 	.word	0x00370809
   804a4:	01370809 	.word	0x01370809
   804a8:	200d3f01 	.word	0x200d3f01
   804ac:	0501bd00 	.word	0x0501bd00
   804b0:	20000000 	.word	0x20000000

000804b4 <peripheral_init_adc>:

void peripheral_init_adc(){
	//pin A11
	//CH11

	PIOB ->  PIO_PDR |= PIO_PDR_P18;
   804b4:	4a06      	ldr	r2, [pc, #24]	; (804d0 <peripheral_init_adc+0x1c>)
   804b6:	6853      	ldr	r3, [r2, #4]
   804b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   804bc:	6053      	str	r3, [r2, #4]
	// Using peripheral B of PIOC11
	//PIOA ->PIO_ABSR |= PIO_ABSR_P11;
	
	/* Enable clock for the PWM peripheral */
	PMC->PMC_PCER1 |= PMC_PCER1_PID37;
   804be:	f5a2 6220 	sub.w	r2, r2, #2560	; 0xa00
   804c2:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   804c6:	f043 0320 	orr.w	r3, r3, #32
   804ca:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
   804ce:	4770      	bx	lr
   804d0:	400e1000 	.word	0x400e1000

000804d4 <ADC_init>:


void ADC_init(void)
{
	/*Reset ADC*/
	ADC-> ADC_CR |= ADC_CR_SWRST;
   804d4:	4b0f      	ldr	r3, [pc, #60]	; (80514 <ADC_init+0x40>)
   804d6:	681a      	ldr	r2, [r3, #0]
   804d8:	f042 0201 	orr.w	r2, r2, #1
   804dc:	601a      	str	r2, [r3, #0]
	
	/*Disable write protect mode*/
	ADC-> ADC_WPMR |=~ ADC_WPMR_WPEN;
   804de:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   804e2:	f062 0201 	orn	r2, r2, #1
   804e6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	/*Enable channel 11*/
	ADC ->ADC_CHER |= ADC_CHER_CH11;
   804ea:	691a      	ldr	r2, [r3, #16]
   804ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   804f0:	611a      	str	r2, [r3, #16]
	
	/*Set to 10-bit resolution*/
	ADC->ADC_MR |= (1<<0x4);
   804f2:	685a      	ldr	r2, [r3, #4]
   804f4:	f042 0210 	orr.w	r2, r2, #16
   804f8:	605a      	str	r2, [r3, #4]
	
	/*Put in free run mode*/
	ADC->ADC_MR |= ADC_MR_FREERUN_ON;
   804fa:	685a      	ldr	r2, [r3, #4]
   804fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   80500:	605a      	str	r2, [r3, #4]
	
	/*Interrupt on end of conversion CH11*/
	ADC->ADC_IER |= ADC_IER_EOC11;
   80502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   80504:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   80508:	625a      	str	r2, [r3, #36]	; 0x24
	
	ADC->ADC_EMR |= ADC_EMR_TAG;
   8050a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   8050c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   80510:	641a      	str	r2, [r3, #64]	; 0x40
   80512:	4770      	bx	lr
   80514:	400c0000 	.word	0x400c0000

00080518 <IR_read>:
}

int IR_read(void)
{
	int adc_out = (int) (ADC->ADC_LCDR & ADC_LCDR_LDATA_Msk);
   80518:	4b04      	ldr	r3, [pc, #16]	; (8052c <IR_read+0x14>)
   8051a:	6a1b      	ldr	r3, [r3, #32]
   8051c:	f3c3 030b 	ubfx	r3, r3, #0, #12
	
	if(adc_out < 200)
   80520:	2bc7      	cmp	r3, #199	; 0xc7
   80522:	dd01      	ble.n	80528 <IR_read+0x10>
	{
		return 0;
	}
	//printf("no goal \n");
	return 1;
   80524:	2001      	movs	r0, #1
}
   80526:	4770      	bx	lr
		return 0;
   80528:	2000      	movs	r0, #0
   8052a:	4770      	bx	lr
   8052c:	400c0000 	.word	0x400c0000

00080530 <check_for_score>:


void check_for_score(int* score, int* no_goal_counter)
{
   80530:	b538      	push	{r3, r4, r5, lr}
   80532:	4605      	mov	r5, r0
   80534:	460c      	mov	r4, r1
	
	int no_goal = IR_read();
   80536:	4b09      	ldr	r3, [pc, #36]	; (8055c <check_for_score+0x2c>)
   80538:	4798      	blx	r3
	*no_goal_counter = *no_goal_counter + no_goal;
   8053a:	6823      	ldr	r3, [r4, #0]
   8053c:	4403      	add	r3, r0
   8053e:	6023      	str	r3, [r4, #0]
	
	if (*no_goal_counter > 10 && no_goal == 0)
   80540:	2b0a      	cmp	r3, #10
   80542:	dd00      	ble.n	80546 <check_for_score+0x16>
   80544:	b100      	cbz	r0, 80548 <check_for_score+0x18>
   80546:	bd38      	pop	{r3, r4, r5, pc}
	{
		(*score)++;
   80548:	6829      	ldr	r1, [r5, #0]
   8054a:	3101      	adds	r1, #1
   8054c:	6029      	str	r1, [r5, #0]
		printf("GOAL! score = %d\n", *score);
   8054e:	4804      	ldr	r0, [pc, #16]	; (80560 <check_for_score+0x30>)
   80550:	4b04      	ldr	r3, [pc, #16]	; (80564 <check_for_score+0x34>)
   80552:	4798      	blx	r3
		*no_goal_counter = 0;
   80554:	2300      	movs	r3, #0
   80556:	6023      	str	r3, [r4, #0]
		
	}
   80558:	e7f5      	b.n	80546 <check_for_score+0x16>
   8055a:	bf00      	nop
   8055c:	00080519 	.word	0x00080519
   80560:	00081c90 	.word	0x00081c90
   80564:	00080c1d 	.word	0x00080c1d

00080568 <main>:
void LED_init(void);
void toggleLED1(void);
void toggleLED2(void);

int main(void)
{
   80568:	b510      	push	{r4, lr}
   8056a:	b082      	sub	sp, #8
    /* Initialize the SAM system */
    SystemInit();
   8056c:	4b18      	ldr	r3, [pc, #96]	; (805d0 <main+0x68>)
   8056e:	4798      	blx	r3
	
	configure_uart();
   80570:	4b18      	ldr	r3, [pc, #96]	; (805d4 <main+0x6c>)
   80572:	4798      	blx	r3
	uint32_t can_br = 0x00290165;//0x10165;
	
	/*UNCOMMENT FOR CAN*/
	can_init_def_tx_rx_mb(can_br);
   80574:	4818      	ldr	r0, [pc, #96]	; (805d8 <main+0x70>)
   80576:	4b19      	ldr	r3, [pc, #100]	; (805dc <main+0x74>)
   80578:	4798      	blx	r3
		
	/*disable watchdog*/
	WDT->WDT_MR = WDT_MR_WDDIS;
   8057a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8057e:	4b18      	ldr	r3, [pc, #96]	; (805e0 <main+0x78>)
   80580:	605a      	str	r2, [r3, #4]
	
	peripheral_init_pwm();
   80582:	4b18      	ldr	r3, [pc, #96]	; (805e4 <main+0x7c>)
   80584:	4798      	blx	r3

	pwm_init();
   80586:	4b18      	ldr	r3, [pc, #96]	; (805e8 <main+0x80>)
   80588:	4798      	blx	r3
	
	peripheral_init_adc();
   8058a:	4b18      	ldr	r3, [pc, #96]	; (805ec <main+0x84>)
   8058c:	4798      	blx	r3
	ADC_init();
   8058e:	4b18      	ldr	r3, [pc, #96]	; (805f0 <main+0x88>)
   80590:	4798      	blx	r3
	DACC_init();
   80592:	4b18      	ldr	r3, [pc, #96]	; (805f4 <main+0x8c>)
   80594:	4798      	blx	r3
	motor_init();
   80596:	4b18      	ldr	r3, [pc, #96]	; (805f8 <main+0x90>)
   80598:	4798      	blx	r3
	solenoid_init();
   8059a:	4b18      	ldr	r3, [pc, #96]	; (805fc <main+0x94>)
   8059c:	4798      	blx	r3

	int score = 0;
   8059e:	2200      	movs	r2, #0
   805a0:	9201      	str	r2, [sp, #4]
	int no_goal_counter = 0;
   805a2:	9200      	str	r2, [sp, #0]

	int16_t p_factor = 20; //45 P only stable START 100
	int16_t i_factor = 1; 
	int16_t d_factor = 0;

	pid_Init(p_factor, i_factor, d_factor, &pid);	
   805a4:	4b16      	ldr	r3, [pc, #88]	; (80600 <main+0x98>)
   805a6:	2101      	movs	r1, #1
   805a8:	2014      	movs	r0, #20
   805aa:	4c16      	ldr	r4, [pc, #88]	; (80604 <main+0x9c>)
   805ac:	47a0      	blx	r4
	
	init_motor_position();
   805ae:	4b16      	ldr	r3, [pc, #88]	; (80608 <main+0xa0>)
   805b0:	4798      	blx	r3
		//PIOD -> PIO_SODR |= (0x1 << 10);// Set direction to right
	
	//volatile int encoder = 0;
	while(1)
	{	
		check_for_score(&score, &no_goal_counter);
   805b2:	4669      	mov	r1, sp
   805b4:	a801      	add	r0, sp, #4
   805b6:	4b15      	ldr	r3, [pc, #84]	; (8060c <main+0xa4>)
   805b8:	4798      	blx	r3
		joystick_input();
   805ba:	4b15      	ldr	r3, [pc, #84]	; (80610 <main+0xa8>)
   805bc:	4798      	blx	r3
		//printf("joystick %d left %d right %d \n", P1000_data.joystick, P1000_data.left_slider, P1000_data.right_slider);
		//printf("Value from the counter inside decoder = %d \n", encoder);
		
		move_to_setpoint();
   805be:	4b15      	ldr	r3, [pc, #84]	; (80614 <main+0xac>)
   805c0:	4798      	blx	r3
		//printf(" Button: %d \n",P1000_data.joystick_button);
		if(P1000_data.joystick_button == 1)
   805c2:	4b15      	ldr	r3, [pc, #84]	; (80618 <main+0xb0>)
   805c4:	68db      	ldr	r3, [r3, #12]
   805c6:	2b01      	cmp	r3, #1
   805c8:	d1f3      	bne.n	805b2 <main+0x4a>
		{

			solenoid_impulse();
   805ca:	4b14      	ldr	r3, [pc, #80]	; (8061c <main+0xb4>)
   805cc:	4798      	blx	r3
   805ce:	e7f0      	b.n	805b2 <main+0x4a>
   805d0:	00080411 	.word	0x00080411
   805d4:	00080d21 	.word	0x00080d21
   805d8:	00290165 	.word	0x00290165
   805dc:	00080245 	.word	0x00080245
   805e0:	400e1a50 	.word	0x400e1a50
   805e4:	00080c41 	.word	0x00080c41
   805e8:	00080c6d 	.word	0x00080c6d
   805ec:	000804b5 	.word	0x000804b5
   805f0:	000804d5 	.word	0x000804d5
   805f4:	0008036d 	.word	0x0008036d
   805f8:	00080659 	.word	0x00080659
   805fc:	00080895 	.word	0x00080895
   80600:	20000450 	.word	0x20000450
   80604:	000808e1 	.word	0x000808e1
   80608:	00080859 	.word	0x00080859
   8060c:	00080531 	.word	0x00080531
   80610:	00080cf5 	.word	0x00080cf5
   80614:	00080709 	.word	0x00080709
   80618:	20000464 	.word	0x20000464
   8061c:	000808b5 	.word	0x000808b5

00080620 <Delay>:
	
	reset_encoder();
}

void Delay(int num)
{
   80620:	b510      	push	{r4, lr}
   80622:	b082      	sub	sp, #8
   80624:	4604      	mov	r4, r0
	volatile float f = 1.0f;
   80626:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   8062a:	9301      	str	r3, [sp, #4]

	for (volatile int i = 0; i < 1024 * num; ++i )
   8062c:	2300      	movs	r3, #0
   8062e:	9300      	str	r3, [sp, #0]
   80630:	e007      	b.n	80642 <Delay+0x22>

	f *= 1.1f;
   80632:	9801      	ldr	r0, [sp, #4]
   80634:	4906      	ldr	r1, [pc, #24]	; (80650 <Delay+0x30>)
   80636:	4b07      	ldr	r3, [pc, #28]	; (80654 <Delay+0x34>)
   80638:	4798      	blx	r3
   8063a:	9001      	str	r0, [sp, #4]
	for (volatile int i = 0; i < 1024 * num; ++i )
   8063c:	9b00      	ldr	r3, [sp, #0]
   8063e:	3301      	adds	r3, #1
   80640:	9300      	str	r3, [sp, #0]
   80642:	9b00      	ldr	r3, [sp, #0]
   80644:	ebb3 2f84 	cmp.w	r3, r4, lsl #10
   80648:	dbf3      	blt.n	80632 <Delay+0x12>
}
   8064a:	b002      	add	sp, #8
   8064c:	bd10      	pop	{r4, pc}
   8064e:	bf00      	nop
   80650:	3f8ccccd 	.word	0x3f8ccccd
   80654:	00081855 	.word	0x00081855

00080658 <motor_init>:

void motor_init()
{
   80658:	b410      	push	{r4}
	/*Pull up */
	PIOC->PIO_PUDR |= (0x1 << 8) | (0x1 << 7) | (0x1 << 6) | (0x1 << 5) | (0x1 << 4) | (0x1 << 3) | (0x1 << 2) | (0x1 << 1);
   8065a:	4a13      	ldr	r2, [pc, #76]	; (806a8 <motor_init+0x50>)
   8065c:	6e13      	ldr	r3, [r2, #96]	; 0x60
   8065e:	f443 73ff 	orr.w	r3, r3, #510	; 0x1fe
   80662:	6613      	str	r3, [r2, #96]	; 0x60
	PIOD->PIO_PUDR |= (0x1 << 10) | (0x1 << 9) | (0x1 << 2) | (0x1 << 1) | (0x1 << 0);
   80664:	4b11      	ldr	r3, [pc, #68]	; (806ac <motor_init+0x54>)
   80666:	6e18      	ldr	r0, [r3, #96]	; 0x60
   80668:	f240 6107 	movw	r1, #1543	; 0x607
   8066c:	4308      	orrs	r0, r1
   8066e:	6618      	str	r0, [r3, #96]	; 0x60


	/* Enable PIOC clock */
	PMC->PMC_PCER0 |= PMC_PCER0_PID13;
   80670:	480f      	ldr	r0, [pc, #60]	; (806b0 <motor_init+0x58>)
   80672:	6904      	ldr	r4, [r0, #16]
   80674:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   80678:	6104      	str	r4, [r0, #16]
	/* Enable PIOD clock */
	PMC->PMC_PCER0 |= PMC_PCER0_PID14;
   8067a:	6904      	ldr	r4, [r0, #16]
   8067c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
   80680:	6104      	str	r4, [r0, #16]

	/*Enable MJ1 pins*/
	PIOD -> PIO_PER |= 0x607;
   80682:	6818      	ldr	r0, [r3, #0]
   80684:	4308      	orrs	r0, r1
   80686:	6018      	str	r0, [r3, #0]

	/*Enable MJ1 pins as outputs*/
	PIOD -> PIO_OER |= 0x607;
   80688:	6918      	ldr	r0, [r3, #16]
   8068a:	4308      	orrs	r0, r1
   8068c:	6118      	str	r0, [r3, #16]

	/*MJ1 output to 1*/
	PIOD -> PIO_SODR |= (0x1 << 10) | (0x1 << 9) | (0x1 << 2) | (0x1 << 1) | (0x1 << 0);//0x607;
   8068e:	6b18      	ldr	r0, [r3, #48]	; 0x30
   80690:	4301      	orrs	r1, r0
   80692:	6319      	str	r1, [r3, #48]	; 0x30

	/*Clock divider*/
	// PMC->PMC_PCR |= (0x1 << 28) | (0x1 << 12) | (0xd << 0);

	/*Enable MJ2 pins (C1 to C8)*/
	PIOC -> PIO_PER |= (0x1 << 8) | (0x1 << 7) | (0x1 << 6) | (0x1 << 5) | (0x1 << 4) | (0x1 << 3) | (0x1 << 2) | (0x1 << 1);
   80694:	6813      	ldr	r3, [r2, #0]
   80696:	f443 73ff 	orr.w	r3, r3, #510	; 0x1fe
   8069a:	6013      	str	r3, [r2, #0]

	/*Disable MJ2 pins as output */
	PIOC -> PIO_ODR |= (0x1 << 8) | (0x1 << 7) | (0x1 << 6) | (0x1 << 5) | (0x1 << 4) | (0x1 << 3) | (0x1 << 2) | (0x1 << 1);
   8069c:	6953      	ldr	r3, [r2, #20]
   8069e:	f443 73ff 	orr.w	r3, r3, #510	; 0x1fe
   806a2:	6153      	str	r3, [r2, #20]
	
}
   806a4:	bc10      	pop	{r4}
   806a6:	4770      	bx	lr
   806a8:	400e1200 	.word	0x400e1200
   806ac:	400e1400 	.word	0x400e1400
   806b0:	400e0600 	.word	0x400e0600

000806b4 <read_encoder>:


uint16_t read_encoder()
{
   806b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t encoder = 0;
	
	/* Clearing the not OE (Encoder output enable) */ 
	PIOD->PIO_CODR |= (0x1 << 0); 
   806b6:	4d11      	ldr	r5, [pc, #68]	; (806fc <read_encoder+0x48>)
   806b8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   806ba:	f043 0301 	orr.w	r3, r3, #1
   806be:	636b      	str	r3, [r5, #52]	; 0x34
	
	/* Setting SEL low to output high byte */
	PIOD->PIO_CODR |= (0x1 << 2);
   806c0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   806c2:	f043 0304 	orr.w	r3, r3, #4
   806c6:	636b      	str	r3, [r5, #52]	; 0x34
	
	Delay(20);//delay_20ms();// for(int i = 0; i < 1680000; i++); // _delay_ms(20); change this
   806c8:	2014      	movs	r0, #20
   806ca:	4f0d      	ldr	r7, [pc, #52]	; (80700 <read_encoder+0x4c>)
   806cc:	47b8      	blx	r7
	
	encoder = (((PIOC->PIO_PDSR & MJ2_DATA_Msk) >> 1) << 8);
   806ce:	4e0d      	ldr	r6, [pc, #52]	; (80704 <read_encoder+0x50>)
   806d0:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
   806d2:	f3c4 044f 	ubfx	r4, r4, #1, #16
   806d6:	0224      	lsls	r4, r4, #8
   806d8:	b2a4      	uxth	r4, r4
	
	/* Setting SEL high to output low byte */
	PIOD->PIO_SODR |= (0x1 << 2);
   806da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   806dc:	f043 0304 	orr.w	r3, r3, #4
   806e0:	632b      	str	r3, [r5, #48]	; 0x30
	
	Delay(20);// for(int i = 0; i < 1680000; i++); // _delay_ms(20);
   806e2:	2014      	movs	r0, #20
   806e4:	47b8      	blx	r7
	
	encoder += ((PIOC->PIO_PDSR & MJ2_DATA_Msk) >> 1);
   806e6:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
   806e8:	f3c0 0047 	ubfx	r0, r0, #1, #8
   806ec:	4420      	add	r0, r4
	
	/* Setting the not OE (Encoder output enable) high */ 
	PIOD->PIO_SODR |= (0x1 << 0); 
   806ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   806f0:	f043 0301 	orr.w	r3, r3, #1
   806f4:	632b      	str	r3, [r5, #48]	; 0x30
	
	
	return encoder;
}
   806f6:	b280      	uxth	r0, r0
   806f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   806fa:	bf00      	nop
   806fc:	400e1400 	.word	0x400e1400
   80700:	00080621 	.word	0x00080621
   80704:	400e1200 	.word	0x400e1200

00080708 <move_to_setpoint>:


void move_to_setpoint()
{	
   80708:	b538      	push	{r3, r4, r5, lr}
	int speed = 0;
	int dir=0;
	/*percentage of slider*/
	uint16_t setPoint = 100*((float)P1000_data.left_slider/255.0);
   8070a:	4b3b      	ldr	r3, [pc, #236]	; (807f8 <move_to_setpoint+0xf0>)
   8070c:	6858      	ldr	r0, [r3, #4]
   8070e:	4b3b      	ldr	r3, [pc, #236]	; (807fc <move_to_setpoint+0xf4>)
   80710:	4798      	blx	r3
   80712:	4b3b      	ldr	r3, [pc, #236]	; (80800 <move_to_setpoint+0xf8>)
   80714:	4798      	blx	r3
   80716:	a332      	add	r3, pc, #200	; (adr r3, 807e0 <move_to_setpoint+0xd8>)
   80718:	e9d3 2300 	ldrd	r2, r3, [r3]
   8071c:	4c39      	ldr	r4, [pc, #228]	; (80804 <move_to_setpoint+0xfc>)
   8071e:	47a0      	blx	r4
   80720:	2200      	movs	r2, #0
   80722:	4b39      	ldr	r3, [pc, #228]	; (80808 <move_to_setpoint+0x100>)
   80724:	4c39      	ldr	r4, [pc, #228]	; (8080c <move_to_setpoint+0x104>)
   80726:	47a0      	blx	r4
   80728:	4b39      	ldr	r3, [pc, #228]	; (80810 <move_to_setpoint+0x108>)
   8072a:	4798      	blx	r3
   8072c:	b284      	uxth	r4, r0
	//setPoint = 50;
	int16_t measured_value = read_encoder();
   8072e:	4b39      	ldr	r3, [pc, #228]	; (80814 <move_to_setpoint+0x10c>)
   80730:	4798      	blx	r3
   80732:	4603      	mov	r3, r0
   80734:	b200      	sxth	r0, r0
	if ((measured_value > 8600) &&(measured_value < 30000))
   80736:	f5a3 5306 	sub.w	r3, r3, #8576	; 0x2180
   8073a:	3b19      	subs	r3, #25
   8073c:	b29b      	uxth	r3, r3
   8073e:	f245 3296 	movw	r2, #21398	; 0x5396
   80742:	4293      	cmp	r3, r2
   80744:	d801      	bhi.n	8074a <move_to_setpoint+0x42>
	{
		measured_value = 8600;
   80746:	f242 1098 	movw	r0, #8600	; 0x2198
	if ((measured_value < 0) && (measured_value > 30000))
	{
		measured_value = 0;
	}
	
	uint16_t motor_per = 100*((float)measured_value/8600.0);
   8074a:	4b2c      	ldr	r3, [pc, #176]	; (807fc <move_to_setpoint+0xf4>)
   8074c:	4798      	blx	r3
   8074e:	4b2c      	ldr	r3, [pc, #176]	; (80800 <move_to_setpoint+0xf8>)
   80750:	4798      	blx	r3
   80752:	a325      	add	r3, pc, #148	; (adr r3, 807e8 <move_to_setpoint+0xe0>)
   80754:	e9d3 2300 	ldrd	r2, r3, [r3]
   80758:	4d2a      	ldr	r5, [pc, #168]	; (80804 <move_to_setpoint+0xfc>)
   8075a:	47a8      	blx	r5
   8075c:	2200      	movs	r2, #0
   8075e:	4b2a      	ldr	r3, [pc, #168]	; (80808 <move_to_setpoint+0x100>)
   80760:	4d2a      	ldr	r5, [pc, #168]	; (8080c <move_to_setpoint+0x104>)
   80762:	47a8      	blx	r5
   80764:	4b2a      	ldr	r3, [pc, #168]	; (80810 <move_to_setpoint+0x108>)
   80766:	4798      	blx	r3
	
	int16_t motor_input = pid_Controller(setPoint, motor_per, &pid);
   80768:	4a2b      	ldr	r2, [pc, #172]	; (80818 <move_to_setpoint+0x110>)
   8076a:	b201      	sxth	r1, r0
   8076c:	b220      	sxth	r0, r4
   8076e:	4b2b      	ldr	r3, [pc, #172]	; (8081c <move_to_setpoint+0x114>)
   80770:	4798      	blx	r3
   80772:	4604      	mov	r4, r0
	if (motor_input > 100)
   80774:	2864      	cmp	r0, #100	; 0x64
   80776:	dd00      	ble.n	8077a <move_to_setpoint+0x72>
	{
		motor_input = 100;
   80778:	2464      	movs	r4, #100	; 0x64
	} 
	
	if (motor_input < -100)
   8077a:	f114 0f64 	cmn.w	r4, #100	; 0x64
   8077e:	da01      	bge.n	80784 <move_to_setpoint+0x7c>
	{
		motor_input = -100;
   80780:	f06f 0463 	mvn.w	r4, #99	; 0x63
	}
	
	if(motor_input > 0)
   80784:	2c00      	cmp	r4, #0
   80786:	dd04      	ble.n	80792 <move_to_setpoint+0x8a>
	{
		PIOD -> PIO_CODR |= (0x1 << 10);// Set direction to right
   80788:	4a25      	ldr	r2, [pc, #148]	; (80820 <move_to_setpoint+0x118>)
   8078a:	6b53      	ldr	r3, [r2, #52]	; 0x34
   8078c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   80790:	6353      	str	r3, [r2, #52]	; 0x34
		dir =1;
	}if(motor_input < 0)
   80792:	2c00      	cmp	r4, #0
   80794:	db1a      	blt.n	807cc <move_to_setpoint+0xc4>
		PIOD -> PIO_SODR |= (0x1 << 10); // Set direction to left
		dir =0;
	}


	if (motor_input < 0) motor_input *= -1;
   80796:	2c00      	cmp	r4, #0
   80798:	db1e      	blt.n	807d8 <move_to_setpoint+0xd0>
	 	
	speed = ((0xFFF - 0x450) * ((float) motor_input / 100.0)) + 0x450; //min 580
   8079a:	4620      	mov	r0, r4
   8079c:	4b17      	ldr	r3, [pc, #92]	; (807fc <move_to_setpoint+0xf4>)
   8079e:	4798      	blx	r3
   807a0:	4b17      	ldr	r3, [pc, #92]	; (80800 <move_to_setpoint+0xf8>)
   807a2:	4798      	blx	r3
   807a4:	2200      	movs	r2, #0
   807a6:	4b18      	ldr	r3, [pc, #96]	; (80808 <move_to_setpoint+0x100>)
   807a8:	4d16      	ldr	r5, [pc, #88]	; (80804 <move_to_setpoint+0xfc>)
   807aa:	47a8      	blx	r5
   807ac:	a310      	add	r3, pc, #64	; (adr r3, 807f0 <move_to_setpoint+0xe8>)
   807ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   807b2:	4d16      	ldr	r5, [pc, #88]	; (8080c <move_to_setpoint+0x104>)
   807b4:	47a8      	blx	r5
   807b6:	2200      	movs	r2, #0
   807b8:	4b1a      	ldr	r3, [pc, #104]	; (80824 <move_to_setpoint+0x11c>)
   807ba:	4d1b      	ldr	r5, [pc, #108]	; (80828 <move_to_setpoint+0x120>)
   807bc:	47a8      	blx	r5
   807be:	4b1b      	ldr	r3, [pc, #108]	; (8082c <move_to_setpoint+0x124>)
   807c0:	4798      	blx	r3
	
	if(motor_input == 0)
   807c2:	b904      	cbnz	r4, 807c6 <move_to_setpoint+0xbe>
	{
		//DACC->DACC_CDR = 0x00;
		speed=0x00;
   807c4:	2000      	movs	r0, #0
	}
	
	DACC->DACC_CDR = speed;
   807c6:	4b1a      	ldr	r3, [pc, #104]	; (80830 <move_to_setpoint+0x128>)
   807c8:	6218      	str	r0, [r3, #32]
   807ca:	bd38      	pop	{r3, r4, r5, pc}
		PIOD -> PIO_SODR |= (0x1 << 10); // Set direction to left
   807cc:	4a14      	ldr	r2, [pc, #80]	; (80820 <move_to_setpoint+0x118>)
   807ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
   807d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   807d4:	6313      	str	r3, [r2, #48]	; 0x30
   807d6:	e7de      	b.n	80796 <move_to_setpoint+0x8e>
	if (motor_input < 0) motor_input *= -1;
   807d8:	4264      	negs	r4, r4
   807da:	b224      	sxth	r4, r4
   807dc:	e7dd      	b.n	8079a <move_to_setpoint+0x92>
   807de:	bf00      	nop
   807e0:	00000000 	.word	0x00000000
   807e4:	406fe000 	.word	0x406fe000
   807e8:	00000000 	.word	0x00000000
   807ec:	40c0cc00 	.word	0x40c0cc00
   807f0:	00000000 	.word	0x00000000
   807f4:	40a75e00 	.word	0x40a75e00
   807f8:	20000464 	.word	0x20000464
   807fc:	000817ad 	.word	0x000817ad
   80800:	000810dd 	.word	0x000810dd
   80804:	000813d9 	.word	0x000813d9
   80808:	40590000 	.word	0x40590000
   8080c:	00081185 	.word	0x00081185
   80810:	000815f9 	.word	0x000815f9
   80814:	000806b5 	.word	0x000806b5
   80818:	20000450 	.word	0x20000450
   8081c:	0008090d 	.word	0x0008090d
   80820:	400e1400 	.word	0x400e1400
   80824:	40914000 	.word	0x40914000
   80828:	00080e21 	.word	0x00080e21
   8082c:	000815a9 	.word	0x000815a9
   80830:	400c8000 	.word	0x400c8000

00080834 <reset_encoder>:


}

void reset_encoder(void)
{	
   80834:	b510      	push	{r4, lr}
	/* Clearing the not RST (Reset encoder) */
	PIOD->PIO_CODR |= (0x1 << 1);
   80836:	4c06      	ldr	r4, [pc, #24]	; (80850 <reset_encoder+0x1c>)
   80838:	6b63      	ldr	r3, [r4, #52]	; 0x34
   8083a:	f043 0302 	orr.w	r3, r3, #2
   8083e:	6363      	str	r3, [r4, #52]	; 0x34
	
	Delay(1);
   80840:	2001      	movs	r0, #1
   80842:	4b04      	ldr	r3, [pc, #16]	; (80854 <reset_encoder+0x20>)
   80844:	4798      	blx	r3
	
	/* Setting the not RST high (Normal state) */
	PIOD->PIO_SODR |= (0x1 << 1);	
   80846:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80848:	f043 0302 	orr.w	r3, r3, #2
   8084c:	6323      	str	r3, [r4, #48]	; 0x30
   8084e:	bd10      	pop	{r4, pc}
   80850:	400e1400 	.word	0x400e1400
   80854:	00080621 	.word	0x00080621

00080858 <init_motor_position>:
{
   80858:	b538      	push	{r3, r4, r5, lr}
	PIOD -> PIO_SODR |= (0x1 << 10);// Set direction to right
   8085a:	4a0a      	ldr	r2, [pc, #40]	; (80884 <init_motor_position+0x2c>)
   8085c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8085e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   80862:	6313      	str	r3, [r2, #48]	; 0x30
	DACC->DACC_CDR = 0xCFF;
   80864:	4d08      	ldr	r5, [pc, #32]	; (80888 <init_motor_position+0x30>)
   80866:	f640 43ff 	movw	r3, #3327	; 0xcff
   8086a:	622b      	str	r3, [r5, #32]
	Delay(2000);
   8086c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   80870:	4c06      	ldr	r4, [pc, #24]	; (8088c <init_motor_position+0x34>)
   80872:	47a0      	blx	r4
	DACC->DACC_CDR = 0x0;
   80874:	2300      	movs	r3, #0
   80876:	622b      	str	r3, [r5, #32]
	Delay(100);
   80878:	2064      	movs	r0, #100	; 0x64
   8087a:	47a0      	blx	r4
	reset_encoder();
   8087c:	4b04      	ldr	r3, [pc, #16]	; (80890 <init_motor_position+0x38>)
   8087e:	4798      	blx	r3
   80880:	bd38      	pop	{r3, r4, r5, pc}
   80882:	bf00      	nop
   80884:	400e1400 	.word	0x400e1400
   80888:	400c8000 	.word	0x400c8000
   8088c:	00080621 	.word	0x00080621
   80890:	00080835 	.word	0x00080835

00080894 <solenoid_init>:


void solenoid_init()
{
	/* Enable PIOC12 */
	PIOC->PIO_PER |= (0x1 << 12);
   80894:	4b06      	ldr	r3, [pc, #24]	; (808b0 <solenoid_init+0x1c>)
   80896:	681a      	ldr	r2, [r3, #0]
   80898:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   8089c:	601a      	str	r2, [r3, #0]

	/* Enable PIOC12 as output */
	PIOC->PIO_OER |= (0x1 << 12);	
   8089e:	691a      	ldr	r2, [r3, #16]
   808a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   808a4:	611a      	str	r2, [r3, #16]
	
	// PIOC->PIO_PUER |= (0x1 << 12);
	
	/* Set PIOC12 high PIN51*/
	PIOC->PIO_SODR |= (0x1 << 12);
   808a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   808a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   808ac:	631a      	str	r2, [r3, #48]	; 0x30
   808ae:	4770      	bx	lr
   808b0:	400e1200 	.word	0x400e1200

000808b4 <solenoid_impulse>:
	
}


void solenoid_impulse()
{
   808b4:	b538      	push	{r3, r4, r5, lr}
	/* Set PIOC12 Low PIN51*/
	PIOC->PIO_CODR |= (0x1 << 12);
   808b6:	4c08      	ldr	r4, [pc, #32]	; (808d8 <solenoid_impulse+0x24>)
   808b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   808ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   808be:	6363      	str	r3, [r4, #52]	; 0x34
	
	Delay(100);
   808c0:	2064      	movs	r0, #100	; 0x64
   808c2:	4d06      	ldr	r5, [pc, #24]	; (808dc <solenoid_impulse+0x28>)
   808c4:	47a8      	blx	r5
	
	/* Set PIOC12 High PIN51*/
	PIOC->PIO_SODR |= (0x1 << 12);
   808c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   808c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   808cc:	6323      	str	r3, [r4, #48]	; 0x30
	
	//Delay(270);
	Delay(500);
   808ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   808d2:	47a8      	blx	r5
   808d4:	bd38      	pop	{r3, r4, r5, pc}
   808d6:	bf00      	nop
   808d8:	400e1200 	.word	0x400e1200
   808dc:	00080621 	.word	0x00080621

000808e0 <pid_Init>:
 *  \param d_factor  Derivate term.
 *  \param pid  Struct with PID status.
 */
void pid_Init(int16_t p_factor, int16_t i_factor, int16_t d_factor, struct PID_DATA *pid)
// Set up PID controller parameters
{
   808e0:	b410      	push	{r4}
  // Start values for PID controller
  pid->sumError = 0;
   808e2:	2400      	movs	r4, #0
   808e4:	605c      	str	r4, [r3, #4]
  pid->lastProcessValue = 0;
   808e6:	801c      	strh	r4, [r3, #0]
  // Tuning constants for PID loop
  pid->P_Factor = p_factor;
   808e8:	8118      	strh	r0, [r3, #8]
  pid->I_Factor = i_factor;
   808ea:	8159      	strh	r1, [r3, #10]
  pid->D_Factor = d_factor;
   808ec:	819a      	strh	r2, [r3, #12]
  // Limits to avoid overflow
  pid->maxError = MAX_INT / (pid->P_Factor + 1);
   808ee:	3001      	adds	r0, #1
   808f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
   808f4:	fb92 f0f0 	sdiv	r0, r2, r0
   808f8:	81d8      	strh	r0, [r3, #14]
  pid->maxSumError = MAX_I_TERM / (pid->I_Factor + 1);
   808fa:	3101      	adds	r1, #1
   808fc:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   80900:	fb92 f1f1 	sdiv	r1, r2, r1
   80904:	6119      	str	r1, [r3, #16]
}
   80906:	bc10      	pop	{r4}
   80908:	4770      	bx	lr
	...

0008090c <pid_Controller>:
 *  \param setPoint  Desired value from slider input.
 *  \param processValue  Measured value from encoder.
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(int16_t setPoint, int16_t processValue, struct PID_DATA *pid_st)
{
   8090c:	b430      	push	{r4, r5}
  int16_t error, p_term, d_term;
  int32_t i_term, ret, temp;

  error = setPoint - processValue;
   8090e:	1a40      	subs	r0, r0, r1
   80910:	b284      	uxth	r4, r0
   80912:	b225      	sxth	r5, r4

  // Calculate Pterm and limit error overflow
  if (error > pid_st->maxError){
   80914:	f9b2 300e 	ldrsh.w	r3, [r2, #14]
   80918:	429d      	cmp	r5, r3
   8091a:	dc07      	bgt.n	8092c <pid_Controller+0x20>
    p_term = MAX_INT;
  }
  else if (error < -pid_st->maxError){
   8091c:	425b      	negs	r3, r3
   8091e:	429d      	cmp	r5, r3
   80920:	db1a      	blt.n	80958 <pid_Controller+0x4c>
    p_term = -MAX_INT;
  }
  else{
    p_term = pid_st->P_Factor * error;
   80922:	8910      	ldrh	r0, [r2, #8]
   80924:	fb00 f004 	mul.w	r0, r0, r4
   80928:	b200      	sxth	r0, r0
   8092a:	e001      	b.n	80930 <pid_Controller+0x24>
    p_term = MAX_INT;
   8092c:	f647 70ff 	movw	r0, #32767	; 0x7fff
  }

  // Calculate Iterm and limit integral runaway
  temp = pid_st->sumError + error;
   80930:	6853      	ldr	r3, [r2, #4]
   80932:	442b      	add	r3, r5
  if(temp > pid_st->maxSumError){
   80934:	6914      	ldr	r4, [r2, #16]
   80936:	42a3      	cmp	r3, r4
   80938:	dd10      	ble.n	8095c <pid_Controller+0x50>
    i_term = MAX_I_TERM;
    pid_st->sumError = pid_st->maxSumError;
   8093a:	6054      	str	r4, [r2, #4]
    i_term = MAX_I_TERM;
   8093c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000

  // Calculate Dterm
  //d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue);
  d_term = 0;

  pid_st->lastProcessValue = processValue;
   80940:	8011      	strh	r1, [r2, #0]

  ret = (p_term + i_term + d_term) / SCALING_FACTOR;
   80942:	18c0      	adds	r0, r0, r3
   80944:	d416      	bmi.n	80974 <pid_Controller+0x68>
   80946:	11c0      	asrs	r0, r0, #7
  if(ret > MAX_INT){
   80948:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   8094c:	da14      	bge.n	80978 <pid_Controller+0x6c>
    ret = MAX_INT;
  }
  else if(ret < -MAX_INT){
   8094e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
   80952:	dc13      	bgt.n	8097c <pid_Controller+0x70>
    ret = -MAX_INT;
   80954:	480b      	ldr	r0, [pc, #44]	; (80984 <pid_Controller+0x78>)
   80956:	e011      	b.n	8097c <pid_Controller+0x70>
    p_term = -MAX_INT;
   80958:	480a      	ldr	r0, [pc, #40]	; (80984 <pid_Controller+0x78>)
   8095a:	e7e9      	b.n	80930 <pid_Controller+0x24>
  else if(temp < -pid_st->maxSumError){
   8095c:	4264      	negs	r4, r4
   8095e:	42a3      	cmp	r3, r4
   80960:	da02      	bge.n	80968 <pid_Controller+0x5c>
    pid_st->sumError = -pid_st->maxSumError;
   80962:	6054      	str	r4, [r2, #4]
    i_term = -MAX_I_TERM;
   80964:	4b08      	ldr	r3, [pc, #32]	; (80988 <pid_Controller+0x7c>)
   80966:	e7eb      	b.n	80940 <pid_Controller+0x34>
    pid_st->sumError = temp;
   80968:	6053      	str	r3, [r2, #4]
    i_term = pid_st->I_Factor * pid_st->sumError;
   8096a:	f9b2 400a 	ldrsh.w	r4, [r2, #10]
   8096e:	fb04 f303 	mul.w	r3, r4, r3
   80972:	e7e5      	b.n	80940 <pid_Controller+0x34>
  ret = (p_term + i_term + d_term) / SCALING_FACTOR;
   80974:	307f      	adds	r0, #127	; 0x7f
   80976:	e7e6      	b.n	80946 <pid_Controller+0x3a>
    ret = MAX_INT;
   80978:	f647 70ff 	movw	r0, #32767	; 0x7fff
  }

  return((int16_t)ret);
}
   8097c:	b200      	sxth	r0, r0
   8097e:	bc30      	pop	{r4, r5}
   80980:	4770      	bx	lr
   80982:	bf00      	nop
   80984:	ffff8001 	.word	0xffff8001
   80988:	c0000001 	.word	0xc0000001

0008098c <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   8098c:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   8098e:	b2c8      	uxtb	r0, r1
   80990:	4b01      	ldr	r3, [pc, #4]	; (80998 <printchar+0xc>)
   80992:	4798      	blx	r3
   80994:	bd08      	pop	{r3, pc}
   80996:	bf00      	nop
   80998:	00080d89 	.word	0x00080d89

0008099c <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   8099c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   809a0:	4607      	mov	r7, r0
   809a2:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   809a4:	1e15      	subs	r5, r2, #0
   809a6:	dd02      	ble.n	809ae <prints+0x12>
   809a8:	460a      	mov	r2, r1
   809aa:	2100      	movs	r1, #0
   809ac:	e004      	b.n	809b8 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   809ae:	f04f 0820 	mov.w	r8, #32
   809b2:	e00e      	b.n	809d2 <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   809b4:	3101      	adds	r1, #1
   809b6:	3201      	adds	r2, #1
   809b8:	7810      	ldrb	r0, [r2, #0]
   809ba:	2800      	cmp	r0, #0
   809bc:	d1fa      	bne.n	809b4 <prints+0x18>
		if (len >= width) width = 0;
   809be:	42a9      	cmp	r1, r5
   809c0:	da01      	bge.n	809c6 <prints+0x2a>
		else width -= len;
   809c2:	1a6d      	subs	r5, r5, r1
   809c4:	e000      	b.n	809c8 <prints+0x2c>
		if (len >= width) width = 0;
   809c6:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   809c8:	f013 0f02 	tst.w	r3, #2
   809cc:	d106      	bne.n	809dc <prints+0x40>
	register int pc = 0, padchar = ' ';
   809ce:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   809d2:	f013 0401 	ands.w	r4, r3, #1
   809d6:	d00a      	beq.n	809ee <prints+0x52>
	register int pc = 0, padchar = ' ';
   809d8:	2400      	movs	r4, #0
   809da:	e010      	b.n	809fe <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   809dc:	f04f 0830 	mov.w	r8, #48	; 0x30
   809e0:	e7f7      	b.n	809d2 <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   809e2:	4641      	mov	r1, r8
   809e4:	4638      	mov	r0, r7
   809e6:	4b0d      	ldr	r3, [pc, #52]	; (80a1c <prints+0x80>)
   809e8:	4798      	blx	r3
			++pc;
   809ea:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   809ec:	3d01      	subs	r5, #1
   809ee:	2d00      	cmp	r5, #0
   809f0:	dcf7      	bgt.n	809e2 <prints+0x46>
   809f2:	e004      	b.n	809fe <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   809f4:	4638      	mov	r0, r7
   809f6:	4b09      	ldr	r3, [pc, #36]	; (80a1c <prints+0x80>)
   809f8:	4798      	blx	r3
		++pc;
   809fa:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   809fc:	3601      	adds	r6, #1
   809fe:	7831      	ldrb	r1, [r6, #0]
   80a00:	2900      	cmp	r1, #0
   80a02:	d1f7      	bne.n	809f4 <prints+0x58>
   80a04:	e005      	b.n	80a12 <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   80a06:	4641      	mov	r1, r8
   80a08:	4638      	mov	r0, r7
   80a0a:	4b04      	ldr	r3, [pc, #16]	; (80a1c <prints+0x80>)
   80a0c:	4798      	blx	r3
		++pc;
   80a0e:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   80a10:	3d01      	subs	r5, #1
   80a12:	2d00      	cmp	r5, #0
   80a14:	dcf7      	bgt.n	80a06 <prints+0x6a>
	}

	return pc;
}
   80a16:	4620      	mov	r0, r4
   80a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80a1c:	0008098d 	.word	0x0008098d

00080a20 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80a20:	b5f0      	push	{r4, r5, r6, r7, lr}
   80a22:	b085      	sub	sp, #20
   80a24:	4607      	mov	r7, r0
   80a26:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80a28:	b151      	cbz	r1, 80a40 <printi+0x20>
   80a2a:	461e      	mov	r6, r3
   80a2c:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80a2e:	b113      	cbz	r3, 80a36 <printi+0x16>
   80a30:	2a0a      	cmp	r2, #10
   80a32:	d012      	beq.n	80a5a <printi+0x3a>
	register int t, neg = 0, pc = 0;
   80a34:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80a36:	ad04      	add	r5, sp, #16
   80a38:	2300      	movs	r3, #0
   80a3a:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   80a3e:	e018      	b.n	80a72 <printi+0x52>
		print_buf[0] = '0';
   80a40:	2330      	movs	r3, #48	; 0x30
   80a42:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80a46:	2300      	movs	r3, #0
   80a48:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80a4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80a50:	a901      	add	r1, sp, #4
   80a52:	4638      	mov	r0, r7
   80a54:	4c1b      	ldr	r4, [pc, #108]	; (80ac4 <printi+0xa4>)
   80a56:	47a0      	blx	r4
   80a58:	e029      	b.n	80aae <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   80a5a:	2900      	cmp	r1, #0
   80a5c:	db01      	blt.n	80a62 <printi+0x42>
	register int t, neg = 0, pc = 0;
   80a5e:	2600      	movs	r6, #0
   80a60:	e7e9      	b.n	80a36 <printi+0x16>
		u = -i;
   80a62:	424c      	negs	r4, r1
		neg = 1;
   80a64:	2601      	movs	r6, #1
   80a66:	e7e6      	b.n	80a36 <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   80a68:	3330      	adds	r3, #48	; 0x30
   80a6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80a6e:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80a72:	b14c      	cbz	r4, 80a88 <printi+0x68>
		t = u % b;
   80a74:	fbb4 f3f2 	udiv	r3, r4, r2
   80a78:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80a7c:	2b09      	cmp	r3, #9
   80a7e:	ddf3      	ble.n	80a68 <printi+0x48>
			t += letbase - '0' - 10;
   80a80:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   80a84:	440b      	add	r3, r1
   80a86:	e7ef      	b.n	80a68 <printi+0x48>
	}

	if (neg) {
   80a88:	b156      	cbz	r6, 80aa0 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   80a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a8c:	b11b      	cbz	r3, 80a96 <printi+0x76>
   80a8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a90:	f013 0f02 	tst.w	r3, #2
   80a94:	d10d      	bne.n	80ab2 <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80a96:	232d      	movs	r3, #45	; 0x2d
   80a98:	f805 3c01 	strb.w	r3, [r5, #-1]
   80a9c:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80a9e:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80aa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80aa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80aa4:	4629      	mov	r1, r5
   80aa6:	4638      	mov	r0, r7
   80aa8:	4c06      	ldr	r4, [pc, #24]	; (80ac4 <printi+0xa4>)
   80aaa:	47a0      	blx	r4
   80aac:	4430      	add	r0, r6
}
   80aae:	b005      	add	sp, #20
   80ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   80ab2:	212d      	movs	r1, #45	; 0x2d
   80ab4:	4638      	mov	r0, r7
   80ab6:	4b04      	ldr	r3, [pc, #16]	; (80ac8 <printi+0xa8>)
   80ab8:	4798      	blx	r3
			--width;
   80aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80abc:	3b01      	subs	r3, #1
   80abe:	930a      	str	r3, [sp, #40]	; 0x28
   80ac0:	e7ee      	b.n	80aa0 <printi+0x80>
   80ac2:	bf00      	nop
   80ac4:	0008099d 	.word	0x0008099d
   80ac8:	0008098d 	.word	0x0008098d

00080acc <print>:

static int print( char **out, const char *format, va_list args )
{
   80acc:	b5f0      	push	{r4, r5, r6, r7, lr}
   80ace:	b089      	sub	sp, #36	; 0x24
   80ad0:	4606      	mov	r6, r0
   80ad2:	460c      	mov	r4, r1
   80ad4:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   80ad6:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   80ad8:	e081      	b.n	80bde <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   80ada:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   80adc:	2301      	movs	r3, #1
   80ade:	e08b      	b.n	80bf8 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   80ae0:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   80ae2:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80ae6:	7822      	ldrb	r2, [r4, #0]
   80ae8:	2a30      	cmp	r2, #48	; 0x30
   80aea:	d0f9      	beq.n	80ae0 <print+0x14>
   80aec:	2200      	movs	r2, #0
   80aee:	e006      	b.n	80afe <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   80af0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80af4:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   80af6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80afa:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80afc:	3401      	adds	r4, #1
   80afe:	7821      	ldrb	r1, [r4, #0]
   80b00:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80b04:	b2c0      	uxtb	r0, r0
   80b06:	2809      	cmp	r0, #9
   80b08:	d9f2      	bls.n	80af0 <print+0x24>
			}
			if( *format == 's' ) {
   80b0a:	2973      	cmp	r1, #115	; 0x73
   80b0c:	d018      	beq.n	80b40 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   80b0e:	2964      	cmp	r1, #100	; 0x64
   80b10:	d022      	beq.n	80b58 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   80b12:	2978      	cmp	r1, #120	; 0x78
   80b14:	d02f      	beq.n	80b76 <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   80b16:	2958      	cmp	r1, #88	; 0x58
   80b18:	d03c      	beq.n	80b94 <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   80b1a:	2975      	cmp	r1, #117	; 0x75
   80b1c:	d049      	beq.n	80bb2 <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   80b1e:	2963      	cmp	r1, #99	; 0x63
   80b20:	d15c      	bne.n	80bdc <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   80b22:	9905      	ldr	r1, [sp, #20]
   80b24:	1d08      	adds	r0, r1, #4
   80b26:	9005      	str	r0, [sp, #20]
   80b28:	7809      	ldrb	r1, [r1, #0]
   80b2a:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   80b2e:	2100      	movs	r1, #0
   80b30:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   80b34:	a907      	add	r1, sp, #28
   80b36:	4630      	mov	r0, r6
   80b38:	4f34      	ldr	r7, [pc, #208]	; (80c0c <print+0x140>)
   80b3a:	47b8      	blx	r7
   80b3c:	4405      	add	r5, r0
				continue;
   80b3e:	e04d      	b.n	80bdc <print+0x110>
				register char *s = (char *)va_arg( args, int );
   80b40:	9905      	ldr	r1, [sp, #20]
   80b42:	1d08      	adds	r0, r1, #4
   80b44:	9005      	str	r0, [sp, #20]
   80b46:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80b48:	b121      	cbz	r1, 80b54 <print+0x88>
   80b4a:	4630      	mov	r0, r6
   80b4c:	4f2f      	ldr	r7, [pc, #188]	; (80c0c <print+0x140>)
   80b4e:	47b8      	blx	r7
   80b50:	4405      	add	r5, r0
				continue;
   80b52:	e043      	b.n	80bdc <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   80b54:	492e      	ldr	r1, [pc, #184]	; (80c10 <print+0x144>)
   80b56:	e7f8      	b.n	80b4a <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80b58:	9905      	ldr	r1, [sp, #20]
   80b5a:	1d08      	adds	r0, r1, #4
   80b5c:	9005      	str	r0, [sp, #20]
   80b5e:	6809      	ldr	r1, [r1, #0]
   80b60:	2061      	movs	r0, #97	; 0x61
   80b62:	9002      	str	r0, [sp, #8]
   80b64:	9301      	str	r3, [sp, #4]
   80b66:	9200      	str	r2, [sp, #0]
   80b68:	2301      	movs	r3, #1
   80b6a:	220a      	movs	r2, #10
   80b6c:	4630      	mov	r0, r6
   80b6e:	4f29      	ldr	r7, [pc, #164]	; (80c14 <print+0x148>)
   80b70:	47b8      	blx	r7
   80b72:	4405      	add	r5, r0
				continue;
   80b74:	e032      	b.n	80bdc <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80b76:	9905      	ldr	r1, [sp, #20]
   80b78:	1d08      	adds	r0, r1, #4
   80b7a:	9005      	str	r0, [sp, #20]
   80b7c:	6809      	ldr	r1, [r1, #0]
   80b7e:	2061      	movs	r0, #97	; 0x61
   80b80:	9002      	str	r0, [sp, #8]
   80b82:	9301      	str	r3, [sp, #4]
   80b84:	9200      	str	r2, [sp, #0]
   80b86:	2300      	movs	r3, #0
   80b88:	2210      	movs	r2, #16
   80b8a:	4630      	mov	r0, r6
   80b8c:	4f21      	ldr	r7, [pc, #132]	; (80c14 <print+0x148>)
   80b8e:	47b8      	blx	r7
   80b90:	4405      	add	r5, r0
				continue;
   80b92:	e023      	b.n	80bdc <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80b94:	9905      	ldr	r1, [sp, #20]
   80b96:	1d08      	adds	r0, r1, #4
   80b98:	9005      	str	r0, [sp, #20]
   80b9a:	6809      	ldr	r1, [r1, #0]
   80b9c:	2041      	movs	r0, #65	; 0x41
   80b9e:	9002      	str	r0, [sp, #8]
   80ba0:	9301      	str	r3, [sp, #4]
   80ba2:	9200      	str	r2, [sp, #0]
   80ba4:	2300      	movs	r3, #0
   80ba6:	2210      	movs	r2, #16
   80ba8:	4630      	mov	r0, r6
   80baa:	4f1a      	ldr	r7, [pc, #104]	; (80c14 <print+0x148>)
   80bac:	47b8      	blx	r7
   80bae:	4405      	add	r5, r0
				continue;
   80bb0:	e014      	b.n	80bdc <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80bb2:	9905      	ldr	r1, [sp, #20]
   80bb4:	1d08      	adds	r0, r1, #4
   80bb6:	9005      	str	r0, [sp, #20]
   80bb8:	6809      	ldr	r1, [r1, #0]
   80bba:	2061      	movs	r0, #97	; 0x61
   80bbc:	9002      	str	r0, [sp, #8]
   80bbe:	9301      	str	r3, [sp, #4]
   80bc0:	9200      	str	r2, [sp, #0]
   80bc2:	2300      	movs	r3, #0
   80bc4:	220a      	movs	r2, #10
   80bc6:	4630      	mov	r0, r6
   80bc8:	4f12      	ldr	r7, [pc, #72]	; (80c14 <print+0x148>)
   80bca:	47b8      	blx	r7
   80bcc:	4405      	add	r5, r0
				continue;
   80bce:	e005      	b.n	80bdc <print+0x110>
			++format;
   80bd0:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   80bd2:	7821      	ldrb	r1, [r4, #0]
   80bd4:	4630      	mov	r0, r6
   80bd6:	4b10      	ldr	r3, [pc, #64]	; (80c18 <print+0x14c>)
   80bd8:	4798      	blx	r3
			++pc;
   80bda:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   80bdc:	3401      	adds	r4, #1
   80bde:	7823      	ldrb	r3, [r4, #0]
   80be0:	b163      	cbz	r3, 80bfc <print+0x130>
		if (*format == '%') {
   80be2:	2b25      	cmp	r3, #37	; 0x25
   80be4:	d1f5      	bne.n	80bd2 <print+0x106>
			++format;
   80be6:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   80be8:	7863      	ldrb	r3, [r4, #1]
   80bea:	b13b      	cbz	r3, 80bfc <print+0x130>
			if (*format == '%') goto out;
   80bec:	2b25      	cmp	r3, #37	; 0x25
   80bee:	d0ef      	beq.n	80bd0 <print+0x104>
			if (*format == '-') {
   80bf0:	2b2d      	cmp	r3, #45	; 0x2d
   80bf2:	f43f af72 	beq.w	80ada <print+0xe>
			width = pad = 0;
   80bf6:	2300      	movs	r3, #0
   80bf8:	4614      	mov	r4, r2
   80bfa:	e774      	b.n	80ae6 <print+0x1a>
		}
	}
	if (out) **out = '\0';
   80bfc:	b116      	cbz	r6, 80c04 <print+0x138>
   80bfe:	6833      	ldr	r3, [r6, #0]
   80c00:	2200      	movs	r2, #0
   80c02:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80c04:	4628      	mov	r0, r5
   80c06:	b009      	add	sp, #36	; 0x24
   80c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80c0a:	bf00      	nop
   80c0c:	0008099d 	.word	0x0008099d
   80c10:	00081ca4 	.word	0x00081ca4
   80c14:	00080a21 	.word	0x00080a21
   80c18:	0008098d 	.word	0x0008098d

00080c1c <printf>:

int printf(const char *format, ...)
{
   80c1c:	b40f      	push	{r0, r1, r2, r3}
   80c1e:	b500      	push	{lr}
   80c20:	b083      	sub	sp, #12
   80c22:	aa04      	add	r2, sp, #16
   80c24:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80c28:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80c2a:	2000      	movs	r0, #0
   80c2c:	4b03      	ldr	r3, [pc, #12]	; (80c3c <printf+0x20>)
   80c2e:	4798      	blx	r3
}
   80c30:	b003      	add	sp, #12
   80c32:	f85d eb04 	ldr.w	lr, [sp], #4
   80c36:	b004      	add	sp, #16
   80c38:	4770      	bx	lr
   80c3a:	bf00      	nop
   80c3c:	00080acd 	.word	0x00080acd

00080c40 <peripheral_init_pwm>:
void peripheral_init_pwm(){
	
	
	// PIOC->PIO_PER |= ((0x1 << 19));
	
	PIOC ->  PIO_PDR |= PIO_PDR_P19;
   80c40:	4b08      	ldr	r3, [pc, #32]	; (80c64 <peripheral_init_pwm+0x24>)
   80c42:	685a      	ldr	r2, [r3, #4]
   80c44:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80c48:	605a      	str	r2, [r3, #4]
	
	// Using peripheral B of PIOC19
	PIOC ->PIO_ABSR |= PIO_ABSR_P19;
   80c4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80c4c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80c50:	671a      	str	r2, [r3, #112]	; 0x70
	
	/* Enable clock for the PWM peripheral */
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;
   80c52:	4a05      	ldr	r2, [pc, #20]	; (80c68 <peripheral_init_pwm+0x28>)
   80c54:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80c58:	f043 0310 	orr.w	r3, r3, #16
   80c5c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
   80c60:	4770      	bx	lr
   80c62:	bf00      	nop
   80c64:	400e1200 	.word	0x400e1200
   80c68:	400e0600 	.word	0x400e0600

00080c6c <pwm_init>:
}

void pwm_init()
{

	PWM->PWM_WPCR |= PWM_WPCR_WPCMD(0);
   80c6c:	4b19      	ldr	r3, [pc, #100]	; (80cd4 <pwm_init+0x68>)
   80c6e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   80c72:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_WPCR |= PWM_WPCR_WPRG3;
   80c76:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   80c7a:	f042 0220 	orr.w	r2, r2, #32
   80c7e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_ENA |= PWM_ENA_CHID5;
   80c82:	685a      	ldr	r2, [r3, #4]
   80c84:	f042 0220 	orr.w	r2, r2, #32
   80c88:	605a      	str	r2, [r3, #4]
	PWM->PWM_CH_NUM[5].PWM_CMR |=PWM_CMR_CPRE_CLKB;
   80c8a:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
   80c8e:	f042 020c 	orr.w	r2, r2, #12
   80c92:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	PWM->PWM_CH_NUM[5].PWM_CMR |=~(PWM_CMR_CALG | PWM_CMR_CPOL);
   80c96:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
   80c9a:	f462 7240 	orn	r2, r2, #768	; 0x300
   80c9e:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	
	PWM->PWM_CLK |= PWM_CLK_DIVA(0);
   80ca2:	681a      	ldr	r2, [r3, #0]
   80ca4:	601a      	str	r2, [r3, #0]
	PWM->PWM_CLK |= PWM_CLK_DIVB(42);
   80ca6:	681a      	ldr	r2, [r3, #0]
   80ca8:	f442 1228 	orr.w	r2, r2, #2752512	; 0x2a0000
   80cac:	601a      	str	r2, [r3, #0]
	PWM->PWM_CLK |= PWM_CLK_PREB(0);
   80cae:	681a      	ldr	r2, [r3, #0]
   80cb0:	601a      	str	r2, [r3, #0]
	
	int PWM_period_tick=40000;
	int PWM_dutycycle_tick=3000; //MIN 1800 CENTER:3000 MAX:4200
	PWM->PWM_CH_NUM[5].PWM_CPRD |= PWM_period_tick;
   80cb2:	f8d3 22ac 	ldr.w	r2, [r3, #684]	; 0x2ac
   80cb6:	f442 421c 	orr.w	r2, r2, #39936	; 0x9c00
   80cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80cbe:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY |= PWM_dutycycle_tick;
   80cc2:	f8d3 22a4 	ldr.w	r2, [r3, #676]	; 0x2a4
   80cc6:	f442 623b 	orr.w	r2, r2, #2992	; 0xbb0
   80cca:	f042 0208 	orr.w	r2, r2, #8
   80cce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
   80cd2:	4770      	bx	lr
   80cd4:	40094000 	.word	0x40094000

00080cd8 <pwm_duty_update>:
	//PWM->PWM_CH_NUM[5].PWM_CDTYUPD |= PWM_dutycycle_tick_NEW; example
}

void pwm_duty_update(int PWM_dutycycle_tick_NEW)
{
	if(1800<=PWM_dutycycle_tick_NEW && PWM_dutycycle_tick_NEW<=4200)
   80cd8:	f5a0 63e1 	sub.w	r3, r0, #1800	; 0x708
   80cdc:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   80ce0:	d805      	bhi.n	80cee <pwm_duty_update+0x16>
	{
		PWM->PWM_CH_NUM[5].PWM_CDTYUPD |= PWM_dutycycle_tick_NEW;
   80ce2:	4b03      	ldr	r3, [pc, #12]	; (80cf0 <pwm_duty_update+0x18>)
   80ce4:	f8d3 22a8 	ldr.w	r2, [r3, #680]	; 0x2a8
   80ce8:	4310      	orrs	r0, r2
   80cea:	f8c3 02a8 	str.w	r0, [r3, #680]	; 0x2a8
   80cee:	4770      	bx	lr
   80cf0:	40094000 	.word	0x40094000

00080cf4 <joystick_input>:
		//printf("End of Range ");
	}
}

void joystick_input(void)
{
   80cf4:	b508      	push	{r3, lr}


	int pwm_dutycycle = (int)(PWM->PWM_CH_NUM[5].PWM_CDTY);
   80cf6:	4b07      	ldr	r3, [pc, #28]	; (80d14 <joystick_input+0x20>)
   80cf8:	f8d3 02a4 	ldr.w	r0, [r3, #676]	; 0x2a4
		if (P1000_data.joystick==0)
   80cfc:	4b06      	ldr	r3, [pc, #24]	; (80d18 <joystick_input+0x24>)
   80cfe:	681b      	ldr	r3, [r3, #0]
   80d00:	b903      	cbnz	r3, 80d04 <joystick_input+0x10>
		{
			pwm_dutycycle+=150;
   80d02:	3096      	adds	r0, #150	; 0x96
			//printf("increased duty cycle to %d \n",pwm_dutycycle);
		}
		if (P1000_data.joystick==1){
   80d04:	2b01      	cmp	r3, #1
   80d06:	d002      	beq.n	80d0e <joystick_input+0x1a>
			pwm_dutycycle-=150;
			//printf("decreased duty cycle to %d \n",pwm_dutycycle);
		}
		pwm_duty_update(pwm_dutycycle);
   80d08:	4b04      	ldr	r3, [pc, #16]	; (80d1c <joystick_input+0x28>)
   80d0a:	4798      	blx	r3
   80d0c:	bd08      	pop	{r3, pc}
			pwm_dutycycle-=150;
   80d0e:	3896      	subs	r0, #150	; 0x96
   80d10:	e7fa      	b.n	80d08 <joystick_input+0x14>
   80d12:	bf00      	nop
   80d14:	40094000 	.word	0x40094000
   80d18:	20000464 	.word	0x20000464
   80d1c:	00080cd9 	.word	0x00080cd9

00080d20 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80d20:	4b16      	ldr	r3, [pc, #88]	; (80d7c <configure_uart+0x5c>)
   80d22:	2200      	movs	r2, #0
   80d24:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80d26:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80d28:	4b15      	ldr	r3, [pc, #84]	; (80d80 <configure_uart+0x60>)
   80d2a:	f44f 7140 	mov.w	r1, #768	; 0x300
   80d2e:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80d30:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80d34:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80d36:	4002      	ands	r2, r0
   80d38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80d3c:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80d3e:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80d40:	f44f 7280 	mov.w	r2, #256	; 0x100
   80d44:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80d48:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80d4a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80d4e:	21ac      	movs	r1, #172	; 0xac
   80d50:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / (16 * x) = BaudRate (write x into UART_BRGR)  
   80d52:	f240 2123 	movw	r1, #547	; 0x223
   80d56:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80d58:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80d5c:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80d5e:	f240 2102 	movw	r1, #514	; 0x202
   80d62:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80d66:	f04f 31ff 	mov.w	r1, #4294967295
   80d6a:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80d6c:	21e1      	movs	r1, #225	; 0xe1
   80d6e:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80d70:	4904      	ldr	r1, [pc, #16]	; (80d84 <configure_uart+0x64>)
   80d72:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80d74:	2250      	movs	r2, #80	; 0x50
   80d76:	601a      	str	r2, [r3, #0]
   80d78:	4770      	bx	lr
   80d7a:	bf00      	nop
   80d7c:	20000474 	.word	0x20000474
   80d80:	400e0e00 	.word	0x400e0e00
   80d84:	e000e100 	.word	0xe000e100

00080d88 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80d88:	4b07      	ldr	r3, [pc, #28]	; (80da8 <uart_putchar+0x20>)
   80d8a:	695b      	ldr	r3, [r3, #20]
   80d8c:	f013 0f02 	tst.w	r3, #2
   80d90:	d008      	beq.n	80da4 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80d92:	4b05      	ldr	r3, [pc, #20]	; (80da8 <uart_putchar+0x20>)
   80d94:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80d96:	4b04      	ldr	r3, [pc, #16]	; (80da8 <uart_putchar+0x20>)
   80d98:	695b      	ldr	r3, [r3, #20]
   80d9a:	f413 7f00 	tst.w	r3, #512	; 0x200
   80d9e:	d0fa      	beq.n	80d96 <uart_putchar+0xe>
	return 0;
   80da0:	2000      	movs	r0, #0
   80da2:	4770      	bx	lr
	return 1;
   80da4:	2001      	movs	r0, #1
}
   80da6:	4770      	bx	lr
   80da8:	400e0800 	.word	0x400e0800

00080dac <UART_Handler>:

void UART_Handler(void)
{
   80dac:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80dae:	4b15      	ldr	r3, [pc, #84]	; (80e04 <UART_Handler+0x58>)
   80db0:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80db2:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80db6:	d003      	beq.n	80dc0 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80db8:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80dbc:	4a11      	ldr	r2, [pc, #68]	; (80e04 <UART_Handler+0x58>)
   80dbe:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80dc0:	f013 0f01 	tst.w	r3, #1
   80dc4:	d012      	beq.n	80dec <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80dc6:	4810      	ldr	r0, [pc, #64]	; (80e08 <UART_Handler+0x5c>)
   80dc8:	7842      	ldrb	r2, [r0, #1]
   80dca:	1c53      	adds	r3, r2, #1
   80dcc:	4259      	negs	r1, r3
   80dce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80dd2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80dd6:	bf58      	it	pl
   80dd8:	424b      	negpl	r3, r1
   80dda:	7801      	ldrb	r1, [r0, #0]
   80ddc:	428b      	cmp	r3, r1
   80dde:	d006      	beq.n	80dee <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80de0:	4908      	ldr	r1, [pc, #32]	; (80e04 <UART_Handler+0x58>)
   80de2:	6988      	ldr	r0, [r1, #24]
   80de4:	4908      	ldr	r1, [pc, #32]	; (80e08 <UART_Handler+0x5c>)
   80de6:	440a      	add	r2, r1
   80de8:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80dea:	704b      	strb	r3, [r1, #1]
   80dec:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80dee:	4807      	ldr	r0, [pc, #28]	; (80e0c <UART_Handler+0x60>)
   80df0:	4b07      	ldr	r3, [pc, #28]	; (80e10 <UART_Handler+0x64>)
   80df2:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80df4:	4b04      	ldr	r3, [pc, #16]	; (80e08 <UART_Handler+0x5c>)
   80df6:	7859      	ldrb	r1, [r3, #1]
   80df8:	4a02      	ldr	r2, [pc, #8]	; (80e04 <UART_Handler+0x58>)
   80dfa:	6992      	ldr	r2, [r2, #24]
   80dfc:	440b      	add	r3, r1
   80dfe:	709a      	strb	r2, [r3, #2]
			return;
   80e00:	bd08      	pop	{r3, pc}
   80e02:	bf00      	nop
   80e04:	400e0800 	.word	0x400e0800
   80e08:	20000474 	.word	0x20000474
   80e0c:	00081cac 	.word	0x00081cac
   80e10:	00080c1d 	.word	0x00080c1d

00080e14 <__aeabi_drsub>:
   80e14:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80e18:	e002      	b.n	80e20 <__adddf3>
   80e1a:	bf00      	nop

00080e1c <__aeabi_dsub>:
   80e1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080e20 <__adddf3>:
   80e20:	b530      	push	{r4, r5, lr}
   80e22:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80e26:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80e2a:	ea94 0f05 	teq	r4, r5
   80e2e:	bf08      	it	eq
   80e30:	ea90 0f02 	teqeq	r0, r2
   80e34:	bf1f      	itttt	ne
   80e36:	ea54 0c00 	orrsne.w	ip, r4, r0
   80e3a:	ea55 0c02 	orrsne.w	ip, r5, r2
   80e3e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80e42:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80e46:	f000 80e2 	beq.w	8100e <__adddf3+0x1ee>
   80e4a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80e4e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80e52:	bfb8      	it	lt
   80e54:	426d      	neglt	r5, r5
   80e56:	dd0c      	ble.n	80e72 <__adddf3+0x52>
   80e58:	442c      	add	r4, r5
   80e5a:	ea80 0202 	eor.w	r2, r0, r2
   80e5e:	ea81 0303 	eor.w	r3, r1, r3
   80e62:	ea82 0000 	eor.w	r0, r2, r0
   80e66:	ea83 0101 	eor.w	r1, r3, r1
   80e6a:	ea80 0202 	eor.w	r2, r0, r2
   80e6e:	ea81 0303 	eor.w	r3, r1, r3
   80e72:	2d36      	cmp	r5, #54	; 0x36
   80e74:	bf88      	it	hi
   80e76:	bd30      	pophi	{r4, r5, pc}
   80e78:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80e7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80e80:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80e84:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80e88:	d002      	beq.n	80e90 <__adddf3+0x70>
   80e8a:	4240      	negs	r0, r0
   80e8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80e90:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80e94:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80e98:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80e9c:	d002      	beq.n	80ea4 <__adddf3+0x84>
   80e9e:	4252      	negs	r2, r2
   80ea0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80ea4:	ea94 0f05 	teq	r4, r5
   80ea8:	f000 80a7 	beq.w	80ffa <__adddf3+0x1da>
   80eac:	f1a4 0401 	sub.w	r4, r4, #1
   80eb0:	f1d5 0e20 	rsbs	lr, r5, #32
   80eb4:	db0d      	blt.n	80ed2 <__adddf3+0xb2>
   80eb6:	fa02 fc0e 	lsl.w	ip, r2, lr
   80eba:	fa22 f205 	lsr.w	r2, r2, r5
   80ebe:	1880      	adds	r0, r0, r2
   80ec0:	f141 0100 	adc.w	r1, r1, #0
   80ec4:	fa03 f20e 	lsl.w	r2, r3, lr
   80ec8:	1880      	adds	r0, r0, r2
   80eca:	fa43 f305 	asr.w	r3, r3, r5
   80ece:	4159      	adcs	r1, r3
   80ed0:	e00e      	b.n	80ef0 <__adddf3+0xd0>
   80ed2:	f1a5 0520 	sub.w	r5, r5, #32
   80ed6:	f10e 0e20 	add.w	lr, lr, #32
   80eda:	2a01      	cmp	r2, #1
   80edc:	fa03 fc0e 	lsl.w	ip, r3, lr
   80ee0:	bf28      	it	cs
   80ee2:	f04c 0c02 	orrcs.w	ip, ip, #2
   80ee6:	fa43 f305 	asr.w	r3, r3, r5
   80eea:	18c0      	adds	r0, r0, r3
   80eec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80ef0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80ef4:	d507      	bpl.n	80f06 <__adddf3+0xe6>
   80ef6:	f04f 0e00 	mov.w	lr, #0
   80efa:	f1dc 0c00 	rsbs	ip, ip, #0
   80efe:	eb7e 0000 	sbcs.w	r0, lr, r0
   80f02:	eb6e 0101 	sbc.w	r1, lr, r1
   80f06:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80f0a:	d31b      	bcc.n	80f44 <__adddf3+0x124>
   80f0c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80f10:	d30c      	bcc.n	80f2c <__adddf3+0x10c>
   80f12:	0849      	lsrs	r1, r1, #1
   80f14:	ea5f 0030 	movs.w	r0, r0, rrx
   80f18:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80f1c:	f104 0401 	add.w	r4, r4, #1
   80f20:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80f24:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80f28:	f080 809a 	bcs.w	81060 <__adddf3+0x240>
   80f2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80f30:	bf08      	it	eq
   80f32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80f36:	f150 0000 	adcs.w	r0, r0, #0
   80f3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80f3e:	ea41 0105 	orr.w	r1, r1, r5
   80f42:	bd30      	pop	{r4, r5, pc}
   80f44:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80f48:	4140      	adcs	r0, r0
   80f4a:	eb41 0101 	adc.w	r1, r1, r1
   80f4e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80f52:	f1a4 0401 	sub.w	r4, r4, #1
   80f56:	d1e9      	bne.n	80f2c <__adddf3+0x10c>
   80f58:	f091 0f00 	teq	r1, #0
   80f5c:	bf04      	itt	eq
   80f5e:	4601      	moveq	r1, r0
   80f60:	2000      	moveq	r0, #0
   80f62:	fab1 f381 	clz	r3, r1
   80f66:	bf08      	it	eq
   80f68:	3320      	addeq	r3, #32
   80f6a:	f1a3 030b 	sub.w	r3, r3, #11
   80f6e:	f1b3 0220 	subs.w	r2, r3, #32
   80f72:	da0c      	bge.n	80f8e <__adddf3+0x16e>
   80f74:	320c      	adds	r2, #12
   80f76:	dd08      	ble.n	80f8a <__adddf3+0x16a>
   80f78:	f102 0c14 	add.w	ip, r2, #20
   80f7c:	f1c2 020c 	rsb	r2, r2, #12
   80f80:	fa01 f00c 	lsl.w	r0, r1, ip
   80f84:	fa21 f102 	lsr.w	r1, r1, r2
   80f88:	e00c      	b.n	80fa4 <__adddf3+0x184>
   80f8a:	f102 0214 	add.w	r2, r2, #20
   80f8e:	bfd8      	it	le
   80f90:	f1c2 0c20 	rsble	ip, r2, #32
   80f94:	fa01 f102 	lsl.w	r1, r1, r2
   80f98:	fa20 fc0c 	lsr.w	ip, r0, ip
   80f9c:	bfdc      	itt	le
   80f9e:	ea41 010c 	orrle.w	r1, r1, ip
   80fa2:	4090      	lslle	r0, r2
   80fa4:	1ae4      	subs	r4, r4, r3
   80fa6:	bfa2      	ittt	ge
   80fa8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80fac:	4329      	orrge	r1, r5
   80fae:	bd30      	popge	{r4, r5, pc}
   80fb0:	ea6f 0404 	mvn.w	r4, r4
   80fb4:	3c1f      	subs	r4, #31
   80fb6:	da1c      	bge.n	80ff2 <__adddf3+0x1d2>
   80fb8:	340c      	adds	r4, #12
   80fba:	dc0e      	bgt.n	80fda <__adddf3+0x1ba>
   80fbc:	f104 0414 	add.w	r4, r4, #20
   80fc0:	f1c4 0220 	rsb	r2, r4, #32
   80fc4:	fa20 f004 	lsr.w	r0, r0, r4
   80fc8:	fa01 f302 	lsl.w	r3, r1, r2
   80fcc:	ea40 0003 	orr.w	r0, r0, r3
   80fd0:	fa21 f304 	lsr.w	r3, r1, r4
   80fd4:	ea45 0103 	orr.w	r1, r5, r3
   80fd8:	bd30      	pop	{r4, r5, pc}
   80fda:	f1c4 040c 	rsb	r4, r4, #12
   80fde:	f1c4 0220 	rsb	r2, r4, #32
   80fe2:	fa20 f002 	lsr.w	r0, r0, r2
   80fe6:	fa01 f304 	lsl.w	r3, r1, r4
   80fea:	ea40 0003 	orr.w	r0, r0, r3
   80fee:	4629      	mov	r1, r5
   80ff0:	bd30      	pop	{r4, r5, pc}
   80ff2:	fa21 f004 	lsr.w	r0, r1, r4
   80ff6:	4629      	mov	r1, r5
   80ff8:	bd30      	pop	{r4, r5, pc}
   80ffa:	f094 0f00 	teq	r4, #0
   80ffe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81002:	bf06      	itte	eq
   81004:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81008:	3401      	addeq	r4, #1
   8100a:	3d01      	subne	r5, #1
   8100c:	e74e      	b.n	80eac <__adddf3+0x8c>
   8100e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81012:	bf18      	it	ne
   81014:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81018:	d029      	beq.n	8106e <__adddf3+0x24e>
   8101a:	ea94 0f05 	teq	r4, r5
   8101e:	bf08      	it	eq
   81020:	ea90 0f02 	teqeq	r0, r2
   81024:	d005      	beq.n	81032 <__adddf3+0x212>
   81026:	ea54 0c00 	orrs.w	ip, r4, r0
   8102a:	bf04      	itt	eq
   8102c:	4619      	moveq	r1, r3
   8102e:	4610      	moveq	r0, r2
   81030:	bd30      	pop	{r4, r5, pc}
   81032:	ea91 0f03 	teq	r1, r3
   81036:	bf1e      	ittt	ne
   81038:	2100      	movne	r1, #0
   8103a:	2000      	movne	r0, #0
   8103c:	bd30      	popne	{r4, r5, pc}
   8103e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81042:	d105      	bne.n	81050 <__adddf3+0x230>
   81044:	0040      	lsls	r0, r0, #1
   81046:	4149      	adcs	r1, r1
   81048:	bf28      	it	cs
   8104a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8104e:	bd30      	pop	{r4, r5, pc}
   81050:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81054:	bf3c      	itt	cc
   81056:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8105a:	bd30      	popcc	{r4, r5, pc}
   8105c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81060:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81064:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81068:	f04f 0000 	mov.w	r0, #0
   8106c:	bd30      	pop	{r4, r5, pc}
   8106e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81072:	bf1a      	itte	ne
   81074:	4619      	movne	r1, r3
   81076:	4610      	movne	r0, r2
   81078:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8107c:	bf1c      	itt	ne
   8107e:	460b      	movne	r3, r1
   81080:	4602      	movne	r2, r0
   81082:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81086:	bf06      	itte	eq
   81088:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8108c:	ea91 0f03 	teqeq	r1, r3
   81090:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81094:	bd30      	pop	{r4, r5, pc}
   81096:	bf00      	nop

00081098 <__aeabi_ui2d>:
   81098:	f090 0f00 	teq	r0, #0
   8109c:	bf04      	itt	eq
   8109e:	2100      	moveq	r1, #0
   810a0:	4770      	bxeq	lr
   810a2:	b530      	push	{r4, r5, lr}
   810a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   810a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   810ac:	f04f 0500 	mov.w	r5, #0
   810b0:	f04f 0100 	mov.w	r1, #0
   810b4:	e750      	b.n	80f58 <__adddf3+0x138>
   810b6:	bf00      	nop

000810b8 <__aeabi_i2d>:
   810b8:	f090 0f00 	teq	r0, #0
   810bc:	bf04      	itt	eq
   810be:	2100      	moveq	r1, #0
   810c0:	4770      	bxeq	lr
   810c2:	b530      	push	{r4, r5, lr}
   810c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   810c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   810cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   810d0:	bf48      	it	mi
   810d2:	4240      	negmi	r0, r0
   810d4:	f04f 0100 	mov.w	r1, #0
   810d8:	e73e      	b.n	80f58 <__adddf3+0x138>
   810da:	bf00      	nop

000810dc <__aeabi_f2d>:
   810dc:	0042      	lsls	r2, r0, #1
   810de:	ea4f 01e2 	mov.w	r1, r2, asr #3
   810e2:	ea4f 0131 	mov.w	r1, r1, rrx
   810e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   810ea:	bf1f      	itttt	ne
   810ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   810f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   810f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   810f8:	4770      	bxne	lr
   810fa:	f092 0f00 	teq	r2, #0
   810fe:	bf14      	ite	ne
   81100:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81104:	4770      	bxeq	lr
   81106:	b530      	push	{r4, r5, lr}
   81108:	f44f 7460 	mov.w	r4, #896	; 0x380
   8110c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81110:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81114:	e720      	b.n	80f58 <__adddf3+0x138>
   81116:	bf00      	nop

00081118 <__aeabi_ul2d>:
   81118:	ea50 0201 	orrs.w	r2, r0, r1
   8111c:	bf08      	it	eq
   8111e:	4770      	bxeq	lr
   81120:	b530      	push	{r4, r5, lr}
   81122:	f04f 0500 	mov.w	r5, #0
   81126:	e00a      	b.n	8113e <__aeabi_l2d+0x16>

00081128 <__aeabi_l2d>:
   81128:	ea50 0201 	orrs.w	r2, r0, r1
   8112c:	bf08      	it	eq
   8112e:	4770      	bxeq	lr
   81130:	b530      	push	{r4, r5, lr}
   81132:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   81136:	d502      	bpl.n	8113e <__aeabi_l2d+0x16>
   81138:	4240      	negs	r0, r0
   8113a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8113e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81142:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81146:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8114a:	f43f aedc 	beq.w	80f06 <__adddf3+0xe6>
   8114e:	f04f 0203 	mov.w	r2, #3
   81152:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81156:	bf18      	it	ne
   81158:	3203      	addne	r2, #3
   8115a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8115e:	bf18      	it	ne
   81160:	3203      	addne	r2, #3
   81162:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   81166:	f1c2 0320 	rsb	r3, r2, #32
   8116a:	fa00 fc03 	lsl.w	ip, r0, r3
   8116e:	fa20 f002 	lsr.w	r0, r0, r2
   81172:	fa01 fe03 	lsl.w	lr, r1, r3
   81176:	ea40 000e 	orr.w	r0, r0, lr
   8117a:	fa21 f102 	lsr.w	r1, r1, r2
   8117e:	4414      	add	r4, r2
   81180:	e6c1      	b.n	80f06 <__adddf3+0xe6>
   81182:	bf00      	nop

00081184 <__aeabi_dmul>:
   81184:	b570      	push	{r4, r5, r6, lr}
   81186:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8118a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8118e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81192:	bf1d      	ittte	ne
   81194:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81198:	ea94 0f0c 	teqne	r4, ip
   8119c:	ea95 0f0c 	teqne	r5, ip
   811a0:	f000 f8de 	bleq	81360 <__aeabi_dmul+0x1dc>
   811a4:	442c      	add	r4, r5
   811a6:	ea81 0603 	eor.w	r6, r1, r3
   811aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   811ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   811b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   811b6:	bf18      	it	ne
   811b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   811bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   811c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   811c4:	d038      	beq.n	81238 <__aeabi_dmul+0xb4>
   811c6:	fba0 ce02 	umull	ip, lr, r0, r2
   811ca:	f04f 0500 	mov.w	r5, #0
   811ce:	fbe1 e502 	umlal	lr, r5, r1, r2
   811d2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   811d6:	fbe0 e503 	umlal	lr, r5, r0, r3
   811da:	f04f 0600 	mov.w	r6, #0
   811de:	fbe1 5603 	umlal	r5, r6, r1, r3
   811e2:	f09c 0f00 	teq	ip, #0
   811e6:	bf18      	it	ne
   811e8:	f04e 0e01 	orrne.w	lr, lr, #1
   811ec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   811f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   811f4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   811f8:	d204      	bcs.n	81204 <__aeabi_dmul+0x80>
   811fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   811fe:	416d      	adcs	r5, r5
   81200:	eb46 0606 	adc.w	r6, r6, r6
   81204:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81208:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8120c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81210:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81214:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81218:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8121c:	bf88      	it	hi
   8121e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81222:	d81e      	bhi.n	81262 <__aeabi_dmul+0xde>
   81224:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81228:	bf08      	it	eq
   8122a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8122e:	f150 0000 	adcs.w	r0, r0, #0
   81232:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81236:	bd70      	pop	{r4, r5, r6, pc}
   81238:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8123c:	ea46 0101 	orr.w	r1, r6, r1
   81240:	ea40 0002 	orr.w	r0, r0, r2
   81244:	ea81 0103 	eor.w	r1, r1, r3
   81248:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8124c:	bfc2      	ittt	gt
   8124e:	ebd4 050c 	rsbsgt	r5, r4, ip
   81252:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81256:	bd70      	popgt	{r4, r5, r6, pc}
   81258:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8125c:	f04f 0e00 	mov.w	lr, #0
   81260:	3c01      	subs	r4, #1
   81262:	f300 80ab 	bgt.w	813bc <__aeabi_dmul+0x238>
   81266:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8126a:	bfde      	ittt	le
   8126c:	2000      	movle	r0, #0
   8126e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81272:	bd70      	pople	{r4, r5, r6, pc}
   81274:	f1c4 0400 	rsb	r4, r4, #0
   81278:	3c20      	subs	r4, #32
   8127a:	da35      	bge.n	812e8 <__aeabi_dmul+0x164>
   8127c:	340c      	adds	r4, #12
   8127e:	dc1b      	bgt.n	812b8 <__aeabi_dmul+0x134>
   81280:	f104 0414 	add.w	r4, r4, #20
   81284:	f1c4 0520 	rsb	r5, r4, #32
   81288:	fa00 f305 	lsl.w	r3, r0, r5
   8128c:	fa20 f004 	lsr.w	r0, r0, r4
   81290:	fa01 f205 	lsl.w	r2, r1, r5
   81294:	ea40 0002 	orr.w	r0, r0, r2
   81298:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8129c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   812a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   812a4:	fa21 f604 	lsr.w	r6, r1, r4
   812a8:	eb42 0106 	adc.w	r1, r2, r6
   812ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   812b0:	bf08      	it	eq
   812b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   812b6:	bd70      	pop	{r4, r5, r6, pc}
   812b8:	f1c4 040c 	rsb	r4, r4, #12
   812bc:	f1c4 0520 	rsb	r5, r4, #32
   812c0:	fa00 f304 	lsl.w	r3, r0, r4
   812c4:	fa20 f005 	lsr.w	r0, r0, r5
   812c8:	fa01 f204 	lsl.w	r2, r1, r4
   812cc:	ea40 0002 	orr.w	r0, r0, r2
   812d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   812d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   812d8:	f141 0100 	adc.w	r1, r1, #0
   812dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   812e0:	bf08      	it	eq
   812e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   812e6:	bd70      	pop	{r4, r5, r6, pc}
   812e8:	f1c4 0520 	rsb	r5, r4, #32
   812ec:	fa00 f205 	lsl.w	r2, r0, r5
   812f0:	ea4e 0e02 	orr.w	lr, lr, r2
   812f4:	fa20 f304 	lsr.w	r3, r0, r4
   812f8:	fa01 f205 	lsl.w	r2, r1, r5
   812fc:	ea43 0302 	orr.w	r3, r3, r2
   81300:	fa21 f004 	lsr.w	r0, r1, r4
   81304:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81308:	fa21 f204 	lsr.w	r2, r1, r4
   8130c:	ea20 0002 	bic.w	r0, r0, r2
   81310:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81314:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81318:	bf08      	it	eq
   8131a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8131e:	bd70      	pop	{r4, r5, r6, pc}
   81320:	f094 0f00 	teq	r4, #0
   81324:	d10f      	bne.n	81346 <__aeabi_dmul+0x1c2>
   81326:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8132a:	0040      	lsls	r0, r0, #1
   8132c:	eb41 0101 	adc.w	r1, r1, r1
   81330:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81334:	bf08      	it	eq
   81336:	3c01      	subeq	r4, #1
   81338:	d0f7      	beq.n	8132a <__aeabi_dmul+0x1a6>
   8133a:	ea41 0106 	orr.w	r1, r1, r6
   8133e:	f095 0f00 	teq	r5, #0
   81342:	bf18      	it	ne
   81344:	4770      	bxne	lr
   81346:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8134a:	0052      	lsls	r2, r2, #1
   8134c:	eb43 0303 	adc.w	r3, r3, r3
   81350:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81354:	bf08      	it	eq
   81356:	3d01      	subeq	r5, #1
   81358:	d0f7      	beq.n	8134a <__aeabi_dmul+0x1c6>
   8135a:	ea43 0306 	orr.w	r3, r3, r6
   8135e:	4770      	bx	lr
   81360:	ea94 0f0c 	teq	r4, ip
   81364:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81368:	bf18      	it	ne
   8136a:	ea95 0f0c 	teqne	r5, ip
   8136e:	d00c      	beq.n	8138a <__aeabi_dmul+0x206>
   81370:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81374:	bf18      	it	ne
   81376:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8137a:	d1d1      	bne.n	81320 <__aeabi_dmul+0x19c>
   8137c:	ea81 0103 	eor.w	r1, r1, r3
   81380:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81384:	f04f 0000 	mov.w	r0, #0
   81388:	bd70      	pop	{r4, r5, r6, pc}
   8138a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8138e:	bf06      	itte	eq
   81390:	4610      	moveq	r0, r2
   81392:	4619      	moveq	r1, r3
   81394:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81398:	d019      	beq.n	813ce <__aeabi_dmul+0x24a>
   8139a:	ea94 0f0c 	teq	r4, ip
   8139e:	d102      	bne.n	813a6 <__aeabi_dmul+0x222>
   813a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   813a4:	d113      	bne.n	813ce <__aeabi_dmul+0x24a>
   813a6:	ea95 0f0c 	teq	r5, ip
   813aa:	d105      	bne.n	813b8 <__aeabi_dmul+0x234>
   813ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   813b0:	bf1c      	itt	ne
   813b2:	4610      	movne	r0, r2
   813b4:	4619      	movne	r1, r3
   813b6:	d10a      	bne.n	813ce <__aeabi_dmul+0x24a>
   813b8:	ea81 0103 	eor.w	r1, r1, r3
   813bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   813c0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   813c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   813c8:	f04f 0000 	mov.w	r0, #0
   813cc:	bd70      	pop	{r4, r5, r6, pc}
   813ce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   813d2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   813d6:	bd70      	pop	{r4, r5, r6, pc}

000813d8 <__aeabi_ddiv>:
   813d8:	b570      	push	{r4, r5, r6, lr}
   813da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   813de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   813e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   813e6:	bf1d      	ittte	ne
   813e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   813ec:	ea94 0f0c 	teqne	r4, ip
   813f0:	ea95 0f0c 	teqne	r5, ip
   813f4:	f000 f8a7 	bleq	81546 <__aeabi_ddiv+0x16e>
   813f8:	eba4 0405 	sub.w	r4, r4, r5
   813fc:	ea81 0e03 	eor.w	lr, r1, r3
   81400:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81404:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81408:	f000 8088 	beq.w	8151c <__aeabi_ddiv+0x144>
   8140c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81410:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81414:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81418:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8141c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81420:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81424:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81428:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8142c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81430:	429d      	cmp	r5, r3
   81432:	bf08      	it	eq
   81434:	4296      	cmpeq	r6, r2
   81436:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8143a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8143e:	d202      	bcs.n	81446 <__aeabi_ddiv+0x6e>
   81440:	085b      	lsrs	r3, r3, #1
   81442:	ea4f 0232 	mov.w	r2, r2, rrx
   81446:	1ab6      	subs	r6, r6, r2
   81448:	eb65 0503 	sbc.w	r5, r5, r3
   8144c:	085b      	lsrs	r3, r3, #1
   8144e:	ea4f 0232 	mov.w	r2, r2, rrx
   81452:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   81456:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8145a:	ebb6 0e02 	subs.w	lr, r6, r2
   8145e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81462:	bf22      	ittt	cs
   81464:	1ab6      	subcs	r6, r6, r2
   81466:	4675      	movcs	r5, lr
   81468:	ea40 000c 	orrcs.w	r0, r0, ip
   8146c:	085b      	lsrs	r3, r3, #1
   8146e:	ea4f 0232 	mov.w	r2, r2, rrx
   81472:	ebb6 0e02 	subs.w	lr, r6, r2
   81476:	eb75 0e03 	sbcs.w	lr, r5, r3
   8147a:	bf22      	ittt	cs
   8147c:	1ab6      	subcs	r6, r6, r2
   8147e:	4675      	movcs	r5, lr
   81480:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81484:	085b      	lsrs	r3, r3, #1
   81486:	ea4f 0232 	mov.w	r2, r2, rrx
   8148a:	ebb6 0e02 	subs.w	lr, r6, r2
   8148e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81492:	bf22      	ittt	cs
   81494:	1ab6      	subcs	r6, r6, r2
   81496:	4675      	movcs	r5, lr
   81498:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8149c:	085b      	lsrs	r3, r3, #1
   8149e:	ea4f 0232 	mov.w	r2, r2, rrx
   814a2:	ebb6 0e02 	subs.w	lr, r6, r2
   814a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   814aa:	bf22      	ittt	cs
   814ac:	1ab6      	subcs	r6, r6, r2
   814ae:	4675      	movcs	r5, lr
   814b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   814b4:	ea55 0e06 	orrs.w	lr, r5, r6
   814b8:	d018      	beq.n	814ec <__aeabi_ddiv+0x114>
   814ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   814be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   814c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   814c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   814ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   814ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   814d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   814d6:	d1c0      	bne.n	8145a <__aeabi_ddiv+0x82>
   814d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   814dc:	d10b      	bne.n	814f6 <__aeabi_ddiv+0x11e>
   814de:	ea41 0100 	orr.w	r1, r1, r0
   814e2:	f04f 0000 	mov.w	r0, #0
   814e6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   814ea:	e7b6      	b.n	8145a <__aeabi_ddiv+0x82>
   814ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   814f0:	bf04      	itt	eq
   814f2:	4301      	orreq	r1, r0
   814f4:	2000      	moveq	r0, #0
   814f6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   814fa:	bf88      	it	hi
   814fc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81500:	f63f aeaf 	bhi.w	81262 <__aeabi_dmul+0xde>
   81504:	ebb5 0c03 	subs.w	ip, r5, r3
   81508:	bf04      	itt	eq
   8150a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8150e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81512:	f150 0000 	adcs.w	r0, r0, #0
   81516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8151a:	bd70      	pop	{r4, r5, r6, pc}
   8151c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81520:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81524:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81528:	bfc2      	ittt	gt
   8152a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8152e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81532:	bd70      	popgt	{r4, r5, r6, pc}
   81534:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81538:	f04f 0e00 	mov.w	lr, #0
   8153c:	3c01      	subs	r4, #1
   8153e:	e690      	b.n	81262 <__aeabi_dmul+0xde>
   81540:	ea45 0e06 	orr.w	lr, r5, r6
   81544:	e68d      	b.n	81262 <__aeabi_dmul+0xde>
   81546:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8154a:	ea94 0f0c 	teq	r4, ip
   8154e:	bf08      	it	eq
   81550:	ea95 0f0c 	teqeq	r5, ip
   81554:	f43f af3b 	beq.w	813ce <__aeabi_dmul+0x24a>
   81558:	ea94 0f0c 	teq	r4, ip
   8155c:	d10a      	bne.n	81574 <__aeabi_ddiv+0x19c>
   8155e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81562:	f47f af34 	bne.w	813ce <__aeabi_dmul+0x24a>
   81566:	ea95 0f0c 	teq	r5, ip
   8156a:	f47f af25 	bne.w	813b8 <__aeabi_dmul+0x234>
   8156e:	4610      	mov	r0, r2
   81570:	4619      	mov	r1, r3
   81572:	e72c      	b.n	813ce <__aeabi_dmul+0x24a>
   81574:	ea95 0f0c 	teq	r5, ip
   81578:	d106      	bne.n	81588 <__aeabi_ddiv+0x1b0>
   8157a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8157e:	f43f aefd 	beq.w	8137c <__aeabi_dmul+0x1f8>
   81582:	4610      	mov	r0, r2
   81584:	4619      	mov	r1, r3
   81586:	e722      	b.n	813ce <__aeabi_dmul+0x24a>
   81588:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8158c:	bf18      	it	ne
   8158e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81592:	f47f aec5 	bne.w	81320 <__aeabi_dmul+0x19c>
   81596:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8159a:	f47f af0d 	bne.w	813b8 <__aeabi_dmul+0x234>
   8159e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   815a2:	f47f aeeb 	bne.w	8137c <__aeabi_dmul+0x1f8>
   815a6:	e712      	b.n	813ce <__aeabi_dmul+0x24a>

000815a8 <__aeabi_d2iz>:
   815a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   815ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   815b0:	d215      	bcs.n	815de <__aeabi_d2iz+0x36>
   815b2:	d511      	bpl.n	815d8 <__aeabi_d2iz+0x30>
   815b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   815b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   815bc:	d912      	bls.n	815e4 <__aeabi_d2iz+0x3c>
   815be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   815c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   815c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   815ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   815ce:	fa23 f002 	lsr.w	r0, r3, r2
   815d2:	bf18      	it	ne
   815d4:	4240      	negne	r0, r0
   815d6:	4770      	bx	lr
   815d8:	f04f 0000 	mov.w	r0, #0
   815dc:	4770      	bx	lr
   815de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   815e2:	d105      	bne.n	815f0 <__aeabi_d2iz+0x48>
   815e4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   815e8:	bf08      	it	eq
   815ea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   815ee:	4770      	bx	lr
   815f0:	f04f 0000 	mov.w	r0, #0
   815f4:	4770      	bx	lr
   815f6:	bf00      	nop

000815f8 <__aeabi_d2uiz>:
   815f8:	004a      	lsls	r2, r1, #1
   815fa:	d211      	bcs.n	81620 <__aeabi_d2uiz+0x28>
   815fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81600:	d211      	bcs.n	81626 <__aeabi_d2uiz+0x2e>
   81602:	d50d      	bpl.n	81620 <__aeabi_d2uiz+0x28>
   81604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8160c:	d40e      	bmi.n	8162c <__aeabi_d2uiz+0x34>
   8160e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8161a:	fa23 f002 	lsr.w	r0, r3, r2
   8161e:	4770      	bx	lr
   81620:	f04f 0000 	mov.w	r0, #0
   81624:	4770      	bx	lr
   81626:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8162a:	d102      	bne.n	81632 <__aeabi_d2uiz+0x3a>
   8162c:	f04f 30ff 	mov.w	r0, #4294967295
   81630:	4770      	bx	lr
   81632:	f04f 0000 	mov.w	r0, #0
   81636:	4770      	bx	lr

00081638 <__aeabi_frsub>:
   81638:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   8163c:	e002      	b.n	81644 <__addsf3>
   8163e:	bf00      	nop

00081640 <__aeabi_fsub>:
   81640:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00081644 <__addsf3>:
   81644:	0042      	lsls	r2, r0, #1
   81646:	bf1f      	itttt	ne
   81648:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   8164c:	ea92 0f03 	teqne	r2, r3
   81650:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   81654:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81658:	d06a      	beq.n	81730 <__addsf3+0xec>
   8165a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8165e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   81662:	bfc1      	itttt	gt
   81664:	18d2      	addgt	r2, r2, r3
   81666:	4041      	eorgt	r1, r0
   81668:	4048      	eorgt	r0, r1
   8166a:	4041      	eorgt	r1, r0
   8166c:	bfb8      	it	lt
   8166e:	425b      	neglt	r3, r3
   81670:	2b19      	cmp	r3, #25
   81672:	bf88      	it	hi
   81674:	4770      	bxhi	lr
   81676:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   8167a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8167e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   81682:	bf18      	it	ne
   81684:	4240      	negne	r0, r0
   81686:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8168a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   8168e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   81692:	bf18      	it	ne
   81694:	4249      	negne	r1, r1
   81696:	ea92 0f03 	teq	r2, r3
   8169a:	d03f      	beq.n	8171c <__addsf3+0xd8>
   8169c:	f1a2 0201 	sub.w	r2, r2, #1
   816a0:	fa41 fc03 	asr.w	ip, r1, r3
   816a4:	eb10 000c 	adds.w	r0, r0, ip
   816a8:	f1c3 0320 	rsb	r3, r3, #32
   816ac:	fa01 f103 	lsl.w	r1, r1, r3
   816b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   816b4:	d502      	bpl.n	816bc <__addsf3+0x78>
   816b6:	4249      	negs	r1, r1
   816b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   816bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   816c0:	d313      	bcc.n	816ea <__addsf3+0xa6>
   816c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   816c6:	d306      	bcc.n	816d6 <__addsf3+0x92>
   816c8:	0840      	lsrs	r0, r0, #1
   816ca:	ea4f 0131 	mov.w	r1, r1, rrx
   816ce:	f102 0201 	add.w	r2, r2, #1
   816d2:	2afe      	cmp	r2, #254	; 0xfe
   816d4:	d251      	bcs.n	8177a <__addsf3+0x136>
   816d6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   816da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   816de:	bf08      	it	eq
   816e0:	f020 0001 	biceq.w	r0, r0, #1
   816e4:	ea40 0003 	orr.w	r0, r0, r3
   816e8:	4770      	bx	lr
   816ea:	0049      	lsls	r1, r1, #1
   816ec:	eb40 0000 	adc.w	r0, r0, r0
   816f0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   816f4:	f1a2 0201 	sub.w	r2, r2, #1
   816f8:	d1ed      	bne.n	816d6 <__addsf3+0x92>
   816fa:	fab0 fc80 	clz	ip, r0
   816fe:	f1ac 0c08 	sub.w	ip, ip, #8
   81702:	ebb2 020c 	subs.w	r2, r2, ip
   81706:	fa00 f00c 	lsl.w	r0, r0, ip
   8170a:	bfaa      	itet	ge
   8170c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   81710:	4252      	neglt	r2, r2
   81712:	4318      	orrge	r0, r3
   81714:	bfbc      	itt	lt
   81716:	40d0      	lsrlt	r0, r2
   81718:	4318      	orrlt	r0, r3
   8171a:	4770      	bx	lr
   8171c:	f092 0f00 	teq	r2, #0
   81720:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   81724:	bf06      	itte	eq
   81726:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   8172a:	3201      	addeq	r2, #1
   8172c:	3b01      	subne	r3, #1
   8172e:	e7b5      	b.n	8169c <__addsf3+0x58>
   81730:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81734:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81738:	bf18      	it	ne
   8173a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8173e:	d021      	beq.n	81784 <__addsf3+0x140>
   81740:	ea92 0f03 	teq	r2, r3
   81744:	d004      	beq.n	81750 <__addsf3+0x10c>
   81746:	f092 0f00 	teq	r2, #0
   8174a:	bf08      	it	eq
   8174c:	4608      	moveq	r0, r1
   8174e:	4770      	bx	lr
   81750:	ea90 0f01 	teq	r0, r1
   81754:	bf1c      	itt	ne
   81756:	2000      	movne	r0, #0
   81758:	4770      	bxne	lr
   8175a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   8175e:	d104      	bne.n	8176a <__addsf3+0x126>
   81760:	0040      	lsls	r0, r0, #1
   81762:	bf28      	it	cs
   81764:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   81768:	4770      	bx	lr
   8176a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   8176e:	bf3c      	itt	cc
   81770:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   81774:	4770      	bxcc	lr
   81776:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   8177a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   8177e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81782:	4770      	bx	lr
   81784:	ea7f 6222 	mvns.w	r2, r2, asr #24
   81788:	bf16      	itet	ne
   8178a:	4608      	movne	r0, r1
   8178c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   81790:	4601      	movne	r1, r0
   81792:	0242      	lsls	r2, r0, #9
   81794:	bf06      	itte	eq
   81796:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   8179a:	ea90 0f01 	teqeq	r0, r1
   8179e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   817a2:	4770      	bx	lr

000817a4 <__aeabi_ui2f>:
   817a4:	f04f 0300 	mov.w	r3, #0
   817a8:	e004      	b.n	817b4 <__aeabi_i2f+0x8>
   817aa:	bf00      	nop

000817ac <__aeabi_i2f>:
   817ac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   817b0:	bf48      	it	mi
   817b2:	4240      	negmi	r0, r0
   817b4:	ea5f 0c00 	movs.w	ip, r0
   817b8:	bf08      	it	eq
   817ba:	4770      	bxeq	lr
   817bc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   817c0:	4601      	mov	r1, r0
   817c2:	f04f 0000 	mov.w	r0, #0
   817c6:	e01c      	b.n	81802 <__aeabi_l2f+0x2a>

000817c8 <__aeabi_ul2f>:
   817c8:	ea50 0201 	orrs.w	r2, r0, r1
   817cc:	bf08      	it	eq
   817ce:	4770      	bxeq	lr
   817d0:	f04f 0300 	mov.w	r3, #0
   817d4:	e00a      	b.n	817ec <__aeabi_l2f+0x14>
   817d6:	bf00      	nop

000817d8 <__aeabi_l2f>:
   817d8:	ea50 0201 	orrs.w	r2, r0, r1
   817dc:	bf08      	it	eq
   817de:	4770      	bxeq	lr
   817e0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   817e4:	d502      	bpl.n	817ec <__aeabi_l2f+0x14>
   817e6:	4240      	negs	r0, r0
   817e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   817ec:	ea5f 0c01 	movs.w	ip, r1
   817f0:	bf02      	ittt	eq
   817f2:	4684      	moveq	ip, r0
   817f4:	4601      	moveq	r1, r0
   817f6:	2000      	moveq	r0, #0
   817f8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   817fc:	bf08      	it	eq
   817fe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   81802:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   81806:	fabc f28c 	clz	r2, ip
   8180a:	3a08      	subs	r2, #8
   8180c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81810:	db10      	blt.n	81834 <__aeabi_l2f+0x5c>
   81812:	fa01 fc02 	lsl.w	ip, r1, r2
   81816:	4463      	add	r3, ip
   81818:	fa00 fc02 	lsl.w	ip, r0, r2
   8181c:	f1c2 0220 	rsb	r2, r2, #32
   81820:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81824:	fa20 f202 	lsr.w	r2, r0, r2
   81828:	eb43 0002 	adc.w	r0, r3, r2
   8182c:	bf08      	it	eq
   8182e:	f020 0001 	biceq.w	r0, r0, #1
   81832:	4770      	bx	lr
   81834:	f102 0220 	add.w	r2, r2, #32
   81838:	fa01 fc02 	lsl.w	ip, r1, r2
   8183c:	f1c2 0220 	rsb	r2, r2, #32
   81840:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   81844:	fa21 f202 	lsr.w	r2, r1, r2
   81848:	eb43 0002 	adc.w	r0, r3, r2
   8184c:	bf08      	it	eq
   8184e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81852:	4770      	bx	lr

00081854 <__aeabi_fmul>:
   81854:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81858:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   8185c:	bf1e      	ittt	ne
   8185e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81862:	ea92 0f0c 	teqne	r2, ip
   81866:	ea93 0f0c 	teqne	r3, ip
   8186a:	d06f      	beq.n	8194c <__aeabi_fmul+0xf8>
   8186c:	441a      	add	r2, r3
   8186e:	ea80 0c01 	eor.w	ip, r0, r1
   81872:	0240      	lsls	r0, r0, #9
   81874:	bf18      	it	ne
   81876:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   8187a:	d01e      	beq.n	818ba <__aeabi_fmul+0x66>
   8187c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81880:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   81884:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   81888:	fba0 3101 	umull	r3, r1, r0, r1
   8188c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81890:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   81894:	bf3e      	ittt	cc
   81896:	0049      	lslcc	r1, r1, #1
   81898:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   8189c:	005b      	lslcc	r3, r3, #1
   8189e:	ea40 0001 	orr.w	r0, r0, r1
   818a2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   818a6:	2afd      	cmp	r2, #253	; 0xfd
   818a8:	d81d      	bhi.n	818e6 <__aeabi_fmul+0x92>
   818aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   818ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   818b2:	bf08      	it	eq
   818b4:	f020 0001 	biceq.w	r0, r0, #1
   818b8:	4770      	bx	lr
   818ba:	f090 0f00 	teq	r0, #0
   818be:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   818c2:	bf08      	it	eq
   818c4:	0249      	lsleq	r1, r1, #9
   818c6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   818ca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   818ce:	3a7f      	subs	r2, #127	; 0x7f
   818d0:	bfc2      	ittt	gt
   818d2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   818d6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   818da:	4770      	bxgt	lr
   818dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   818e0:	f04f 0300 	mov.w	r3, #0
   818e4:	3a01      	subs	r2, #1
   818e6:	dc5d      	bgt.n	819a4 <__aeabi_fmul+0x150>
   818e8:	f112 0f19 	cmn.w	r2, #25
   818ec:	bfdc      	itt	le
   818ee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   818f2:	4770      	bxle	lr
   818f4:	f1c2 0200 	rsb	r2, r2, #0
   818f8:	0041      	lsls	r1, r0, #1
   818fa:	fa21 f102 	lsr.w	r1, r1, r2
   818fe:	f1c2 0220 	rsb	r2, r2, #32
   81902:	fa00 fc02 	lsl.w	ip, r0, r2
   81906:	ea5f 0031 	movs.w	r0, r1, rrx
   8190a:	f140 0000 	adc.w	r0, r0, #0
   8190e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81912:	bf08      	it	eq
   81914:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81918:	4770      	bx	lr
   8191a:	f092 0f00 	teq	r2, #0
   8191e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81922:	bf02      	ittt	eq
   81924:	0040      	lsleq	r0, r0, #1
   81926:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8192a:	3a01      	subeq	r2, #1
   8192c:	d0f9      	beq.n	81922 <__aeabi_fmul+0xce>
   8192e:	ea40 000c 	orr.w	r0, r0, ip
   81932:	f093 0f00 	teq	r3, #0
   81936:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8193a:	bf02      	ittt	eq
   8193c:	0049      	lsleq	r1, r1, #1
   8193e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81942:	3b01      	subeq	r3, #1
   81944:	d0f9      	beq.n	8193a <__aeabi_fmul+0xe6>
   81946:	ea41 010c 	orr.w	r1, r1, ip
   8194a:	e78f      	b.n	8186c <__aeabi_fmul+0x18>
   8194c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81950:	ea92 0f0c 	teq	r2, ip
   81954:	bf18      	it	ne
   81956:	ea93 0f0c 	teqne	r3, ip
   8195a:	d00a      	beq.n	81972 <__aeabi_fmul+0x11e>
   8195c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81960:	bf18      	it	ne
   81962:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81966:	d1d8      	bne.n	8191a <__aeabi_fmul+0xc6>
   81968:	ea80 0001 	eor.w	r0, r0, r1
   8196c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81970:	4770      	bx	lr
   81972:	f090 0f00 	teq	r0, #0
   81976:	bf17      	itett	ne
   81978:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   8197c:	4608      	moveq	r0, r1
   8197e:	f091 0f00 	teqne	r1, #0
   81982:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   81986:	d014      	beq.n	819b2 <__aeabi_fmul+0x15e>
   81988:	ea92 0f0c 	teq	r2, ip
   8198c:	d101      	bne.n	81992 <__aeabi_fmul+0x13e>
   8198e:	0242      	lsls	r2, r0, #9
   81990:	d10f      	bne.n	819b2 <__aeabi_fmul+0x15e>
   81992:	ea93 0f0c 	teq	r3, ip
   81996:	d103      	bne.n	819a0 <__aeabi_fmul+0x14c>
   81998:	024b      	lsls	r3, r1, #9
   8199a:	bf18      	it	ne
   8199c:	4608      	movne	r0, r1
   8199e:	d108      	bne.n	819b2 <__aeabi_fmul+0x15e>
   819a0:	ea80 0001 	eor.w	r0, r0, r1
   819a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   819a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   819ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   819b0:	4770      	bx	lr
   819b2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   819b6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   819ba:	4770      	bx	lr

000819bc <__aeabi_fdiv>:
   819bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   819c0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   819c4:	bf1e      	ittt	ne
   819c6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   819ca:	ea92 0f0c 	teqne	r2, ip
   819ce:	ea93 0f0c 	teqne	r3, ip
   819d2:	d069      	beq.n	81aa8 <__aeabi_fdiv+0xec>
   819d4:	eba2 0203 	sub.w	r2, r2, r3
   819d8:	ea80 0c01 	eor.w	ip, r0, r1
   819dc:	0249      	lsls	r1, r1, #9
   819de:	ea4f 2040 	mov.w	r0, r0, lsl #9
   819e2:	d037      	beq.n	81a54 <__aeabi_fdiv+0x98>
   819e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   819e8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   819ec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   819f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   819f4:	428b      	cmp	r3, r1
   819f6:	bf38      	it	cc
   819f8:	005b      	lslcc	r3, r3, #1
   819fa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   819fe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81a02:	428b      	cmp	r3, r1
   81a04:	bf24      	itt	cs
   81a06:	1a5b      	subcs	r3, r3, r1
   81a08:	ea40 000c 	orrcs.w	r0, r0, ip
   81a0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81a10:	bf24      	itt	cs
   81a12:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81a16:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81a1a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81a1e:	bf24      	itt	cs
   81a20:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81a24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81a28:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81a2c:	bf24      	itt	cs
   81a2e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81a32:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81a36:	011b      	lsls	r3, r3, #4
   81a38:	bf18      	it	ne
   81a3a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   81a3e:	d1e0      	bne.n	81a02 <__aeabi_fdiv+0x46>
   81a40:	2afd      	cmp	r2, #253	; 0xfd
   81a42:	f63f af50 	bhi.w	818e6 <__aeabi_fmul+0x92>
   81a46:	428b      	cmp	r3, r1
   81a48:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81a4c:	bf08      	it	eq
   81a4e:	f020 0001 	biceq.w	r0, r0, #1
   81a52:	4770      	bx	lr
   81a54:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81a58:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81a5c:	327f      	adds	r2, #127	; 0x7f
   81a5e:	bfc2      	ittt	gt
   81a60:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81a64:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81a68:	4770      	bxgt	lr
   81a6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81a6e:	f04f 0300 	mov.w	r3, #0
   81a72:	3a01      	subs	r2, #1
   81a74:	e737      	b.n	818e6 <__aeabi_fmul+0x92>
   81a76:	f092 0f00 	teq	r2, #0
   81a7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81a7e:	bf02      	ittt	eq
   81a80:	0040      	lsleq	r0, r0, #1
   81a82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81a86:	3a01      	subeq	r2, #1
   81a88:	d0f9      	beq.n	81a7e <__aeabi_fdiv+0xc2>
   81a8a:	ea40 000c 	orr.w	r0, r0, ip
   81a8e:	f093 0f00 	teq	r3, #0
   81a92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81a96:	bf02      	ittt	eq
   81a98:	0049      	lsleq	r1, r1, #1
   81a9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81a9e:	3b01      	subeq	r3, #1
   81aa0:	d0f9      	beq.n	81a96 <__aeabi_fdiv+0xda>
   81aa2:	ea41 010c 	orr.w	r1, r1, ip
   81aa6:	e795      	b.n	819d4 <__aeabi_fdiv+0x18>
   81aa8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81aac:	ea92 0f0c 	teq	r2, ip
   81ab0:	d108      	bne.n	81ac4 <__aeabi_fdiv+0x108>
   81ab2:	0242      	lsls	r2, r0, #9
   81ab4:	f47f af7d 	bne.w	819b2 <__aeabi_fmul+0x15e>
   81ab8:	ea93 0f0c 	teq	r3, ip
   81abc:	f47f af70 	bne.w	819a0 <__aeabi_fmul+0x14c>
   81ac0:	4608      	mov	r0, r1
   81ac2:	e776      	b.n	819b2 <__aeabi_fmul+0x15e>
   81ac4:	ea93 0f0c 	teq	r3, ip
   81ac8:	d104      	bne.n	81ad4 <__aeabi_fdiv+0x118>
   81aca:	024b      	lsls	r3, r1, #9
   81acc:	f43f af4c 	beq.w	81968 <__aeabi_fmul+0x114>
   81ad0:	4608      	mov	r0, r1
   81ad2:	e76e      	b.n	819b2 <__aeabi_fmul+0x15e>
   81ad4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81ad8:	bf18      	it	ne
   81ada:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81ade:	d1ca      	bne.n	81a76 <__aeabi_fdiv+0xba>
   81ae0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81ae4:	f47f af5c 	bne.w	819a0 <__aeabi_fmul+0x14c>
   81ae8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81aec:	f47f af3c 	bne.w	81968 <__aeabi_fmul+0x114>
   81af0:	e75f      	b.n	819b2 <__aeabi_fmul+0x15e>
   81af2:	bf00      	nop

00081af4 <__libc_init_array>:
   81af4:	b570      	push	{r4, r5, r6, lr}
   81af6:	4e0f      	ldr	r6, [pc, #60]	; (81b34 <__libc_init_array+0x40>)
   81af8:	4d0f      	ldr	r5, [pc, #60]	; (81b38 <__libc_init_array+0x44>)
   81afa:	1b76      	subs	r6, r6, r5
   81afc:	10b6      	asrs	r6, r6, #2
   81afe:	bf18      	it	ne
   81b00:	2400      	movne	r4, #0
   81b02:	d005      	beq.n	81b10 <__libc_init_array+0x1c>
   81b04:	3401      	adds	r4, #1
   81b06:	f855 3b04 	ldr.w	r3, [r5], #4
   81b0a:	4798      	blx	r3
   81b0c:	42a6      	cmp	r6, r4
   81b0e:	d1f9      	bne.n	81b04 <__libc_init_array+0x10>
   81b10:	4e0a      	ldr	r6, [pc, #40]	; (81b3c <__libc_init_array+0x48>)
   81b12:	4d0b      	ldr	r5, [pc, #44]	; (81b40 <__libc_init_array+0x4c>)
   81b14:	f000 f8dc 	bl	81cd0 <_init>
   81b18:	1b76      	subs	r6, r6, r5
   81b1a:	10b6      	asrs	r6, r6, #2
   81b1c:	bf18      	it	ne
   81b1e:	2400      	movne	r4, #0
   81b20:	d006      	beq.n	81b30 <__libc_init_array+0x3c>
   81b22:	3401      	adds	r4, #1
   81b24:	f855 3b04 	ldr.w	r3, [r5], #4
   81b28:	4798      	blx	r3
   81b2a:	42a6      	cmp	r6, r4
   81b2c:	d1f9      	bne.n	81b22 <__libc_init_array+0x2e>
   81b2e:	bd70      	pop	{r4, r5, r6, pc}
   81b30:	bd70      	pop	{r4, r5, r6, pc}
   81b32:	bf00      	nop
   81b34:	00081cdc 	.word	0x00081cdc
   81b38:	00081cdc 	.word	0x00081cdc
   81b3c:	00081ce4 	.word	0x00081ce4
   81b40:	00081cdc 	.word	0x00081cdc

00081b44 <register_fini>:
   81b44:	4b02      	ldr	r3, [pc, #8]	; (81b50 <register_fini+0xc>)
   81b46:	b113      	cbz	r3, 81b4e <register_fini+0xa>
   81b48:	4802      	ldr	r0, [pc, #8]	; (81b54 <register_fini+0x10>)
   81b4a:	f000 b805 	b.w	81b58 <atexit>
   81b4e:	4770      	bx	lr
   81b50:	00000000 	.word	0x00000000
   81b54:	00081b65 	.word	0x00081b65

00081b58 <atexit>:
   81b58:	2300      	movs	r3, #0
   81b5a:	4601      	mov	r1, r0
   81b5c:	461a      	mov	r2, r3
   81b5e:	4618      	mov	r0, r3
   81b60:	f000 b81e 	b.w	81ba0 <__register_exitproc>

00081b64 <__libc_fini_array>:
   81b64:	b538      	push	{r3, r4, r5, lr}
   81b66:	4c0a      	ldr	r4, [pc, #40]	; (81b90 <__libc_fini_array+0x2c>)
   81b68:	4d0a      	ldr	r5, [pc, #40]	; (81b94 <__libc_fini_array+0x30>)
   81b6a:	1b64      	subs	r4, r4, r5
   81b6c:	10a4      	asrs	r4, r4, #2
   81b6e:	d00a      	beq.n	81b86 <__libc_fini_array+0x22>
   81b70:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81b74:	3b01      	subs	r3, #1
   81b76:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81b7a:	3c01      	subs	r4, #1
   81b7c:	f855 3904 	ldr.w	r3, [r5], #-4
   81b80:	4798      	blx	r3
   81b82:	2c00      	cmp	r4, #0
   81b84:	d1f9      	bne.n	81b7a <__libc_fini_array+0x16>
   81b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81b8a:	f000 b8ab 	b.w	81ce4 <_fini>
   81b8e:	bf00      	nop
   81b90:	00081cf4 	.word	0x00081cf4
   81b94:	00081cf0 	.word	0x00081cf0

00081b98 <__retarget_lock_acquire_recursive>:
   81b98:	4770      	bx	lr
   81b9a:	bf00      	nop

00081b9c <__retarget_lock_release_recursive>:
   81b9c:	4770      	bx	lr
   81b9e:	bf00      	nop

00081ba0 <__register_exitproc>:
   81ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81ba4:	4d2c      	ldr	r5, [pc, #176]	; (81c58 <__register_exitproc+0xb8>)
   81ba6:	4606      	mov	r6, r0
   81ba8:	6828      	ldr	r0, [r5, #0]
   81baa:	4698      	mov	r8, r3
   81bac:	460f      	mov	r7, r1
   81bae:	4691      	mov	r9, r2
   81bb0:	f7ff fff2 	bl	81b98 <__retarget_lock_acquire_recursive>
   81bb4:	4b29      	ldr	r3, [pc, #164]	; (81c5c <__register_exitproc+0xbc>)
   81bb6:	681c      	ldr	r4, [r3, #0]
   81bb8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81bbc:	2b00      	cmp	r3, #0
   81bbe:	d03e      	beq.n	81c3e <__register_exitproc+0x9e>
   81bc0:	685a      	ldr	r2, [r3, #4]
   81bc2:	2a1f      	cmp	r2, #31
   81bc4:	dc1c      	bgt.n	81c00 <__register_exitproc+0x60>
   81bc6:	f102 0e01 	add.w	lr, r2, #1
   81bca:	b176      	cbz	r6, 81bea <__register_exitproc+0x4a>
   81bcc:	2101      	movs	r1, #1
   81bce:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81bd2:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81bd6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81bda:	4091      	lsls	r1, r2
   81bdc:	4308      	orrs	r0, r1
   81bde:	2e02      	cmp	r6, #2
   81be0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81be4:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81be8:	d023      	beq.n	81c32 <__register_exitproc+0x92>
   81bea:	3202      	adds	r2, #2
   81bec:	f8c3 e004 	str.w	lr, [r3, #4]
   81bf0:	6828      	ldr	r0, [r5, #0]
   81bf2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81bf6:	f7ff ffd1 	bl	81b9c <__retarget_lock_release_recursive>
   81bfa:	2000      	movs	r0, #0
   81bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81c00:	4b17      	ldr	r3, [pc, #92]	; (81c60 <__register_exitproc+0xc0>)
   81c02:	b30b      	cbz	r3, 81c48 <__register_exitproc+0xa8>
   81c04:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81c08:	f3af 8000 	nop.w
   81c0c:	4603      	mov	r3, r0
   81c0e:	b1d8      	cbz	r0, 81c48 <__register_exitproc+0xa8>
   81c10:	2000      	movs	r0, #0
   81c12:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81c16:	f04f 0e01 	mov.w	lr, #1
   81c1a:	6058      	str	r0, [r3, #4]
   81c1c:	6019      	str	r1, [r3, #0]
   81c1e:	4602      	mov	r2, r0
   81c20:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81c24:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81c28:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81c2c:	2e00      	cmp	r6, #0
   81c2e:	d0dc      	beq.n	81bea <__register_exitproc+0x4a>
   81c30:	e7cc      	b.n	81bcc <__register_exitproc+0x2c>
   81c32:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81c36:	4301      	orrs	r1, r0
   81c38:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81c3c:	e7d5      	b.n	81bea <__register_exitproc+0x4a>
   81c3e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81c42:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81c46:	e7bb      	b.n	81bc0 <__register_exitproc+0x20>
   81c48:	6828      	ldr	r0, [r5, #0]
   81c4a:	f7ff ffa7 	bl	81b9c <__retarget_lock_release_recursive>
   81c4e:	f04f 30ff 	mov.w	r0, #4294967295
   81c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81c56:	bf00      	nop
   81c58:	20000430 	.word	0x20000430
   81c5c:	00081ccc 	.word	0x00081ccc
   81c60:	00000000 	.word	0x00000000
   81c64:	304e4143 	.word	0x304e4143
   81c68:	73656d20 	.word	0x73656d20
   81c6c:	65676173 	.word	0x65676173
   81c70:	72726120 	.word	0x72726120
   81c74:	64657669 	.word	0x64657669
   81c78:	206e6920 	.word	0x206e6920
   81c7c:	2d6e6f6e 	.word	0x2d6e6f6e
   81c80:	64657375 	.word	0x64657375
   81c84:	69616d20 	.word	0x69616d20
   81c88:	786f626c 	.word	0x786f626c
   81c8c:	00000d0a 	.word	0x00000d0a
   81c90:	4c414f47 	.word	0x4c414f47
   81c94:	63732021 	.word	0x63732021
   81c98:	2065726f 	.word	0x2065726f
   81c9c:	6425203d 	.word	0x6425203d
   81ca0:	0000000a 	.word	0x0000000a
   81ca4:	6c756e28 	.word	0x6c756e28
   81ca8:	0000296c 	.word	0x0000296c
   81cac:	3a525245 	.word	0x3a525245
   81cb0:	52415520 	.word	0x52415520
   81cb4:	58522054 	.word	0x58522054
   81cb8:	66756220 	.word	0x66756220
   81cbc:	20726566 	.word	0x20726566
   81cc0:	66207369 	.word	0x66207369
   81cc4:	0a6c6c75 	.word	0x0a6c6c75
   81cc8:	0000000d 	.word	0x0000000d

00081ccc <_global_impure_ptr>:
   81ccc:	20000008                                ... 

00081cd0 <_init>:
   81cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81cd2:	bf00      	nop
   81cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81cd6:	bc08      	pop	{r3}
   81cd8:	469e      	mov	lr, r3
   81cda:	4770      	bx	lr

00081cdc <__init_array_start>:
   81cdc:	00081b45 	.word	0x00081b45

00081ce0 <__frame_dummy_init_array_entry>:
   81ce0:	00080119                                ....

00081ce4 <_fini>:
   81ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81ce6:	bf00      	nop
   81ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81cea:	bc08      	pop	{r3}
   81cec:	469e      	mov	lr, r3
   81cee:	4770      	bx	lr

00081cf0 <__fini_array_start>:
   81cf0:	000800f5 	.word	0x000800f5
